{"version":3,"file":"client.3ae0407359a7995d7497.js","sources":["webpack:///webpack/bootstrap","webpack:///./common/v2/components/Typography.tsx","webpack:///./common/v2/features/NotificationsPanel/components/NotificationWrapper.tsx","webpack:///./common/v2/components/Currency.tsx","webpack:///./common/v2/features/ScreenLock/ScreenLockLocking.tsx","webpack:///./common/v2/components/ErrorMessages/InlineErrors.tsx","webpack:///./common/v2/components/Panel.tsx","webpack:///./common/v2/components/DashboardPanel.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/WalletBreakdownView.tsx","webpack:///./common/v2/features/Layout/Header/Header.tsx","webpack:///./common/v2/features/Layout/Layout.tsx","webpack:///./common/v2/features/BroadcastTransaction/components/ConfirmTransaction.tsx","webpack:///./common/v2/features/BroadcastTransaction/components/BroadcastTx.tsx","webpack:///./common/v2/features/SignAndVerifyMessage/SignAndVerifyMessage.tsx","webpack:///./common/v2/features/PageNotFound/PageNotFound.tsx","webpack:///./common/v2/features/ReceiveAssets/ReceiveAssets.tsx","webpack:///./common/v2/features/SendAssets/components/SendAssetsForm.tsx","webpack:///./common/v2/features/ScreenLock/ScreenLockForgotPassword.tsx","webpack:///./common/v2/features/ScreenLock/ScreenLockLocked.tsx","webpack:///./common/v2/features/ScreenLock/ScreenLockNew.tsx","webpack:///./common/v2/features/NoAccounts/NoAccounts.tsx","webpack:///./common/v2/features/DownloadApp/DownloadApp.tsx","webpack:///./common/v2/features/Settings/Export/Export.tsx","webpack:///./common/v2/features/Settings/Import/components/ImportSuccess.tsx","webpack:///./common/v2/features/Settings/Import/components/ImportBox.tsx","webpack:///./common/v2/features/Settings/Import/Import.tsx","webpack:///./common/v2/features/Settings/components/GeneralSettings.tsx","webpack:///./common/v2/features/Settings/components/AddToAddressBook.tsx","webpack:///./common/v2/features/Settings/components/AddressBook.tsx","webpack:///./common/v2/features/Settings/Settings.tsx","webpack:///./common/v2/features/AddAccount/components/NetworkSelectPanel.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/WalletBreakdown.tsx","webpack:///./common/v2/features/Dashboard/components/ActionTile.tsx","webpack:///./common/v2/features/Dashboard/Dashboard.tsx","webpack:///./common/v2/features/CreateWallet/Keystore/components/VerifyKeystorePanel.tsx","webpack:///./common/v2/features/CreateWallet/Keystore/components/MakeBackupPanel.tsx","webpack:///./common/v2/features/CreateWallet/Keystore/components/SaveKeystoreFilePanel.tsx","webpack:///./common/v2/features/CreateWallet/Keystore/components/GenerateKeystoreFilePanel.tsx","webpack:///./common/v2/features/CreateWallet/Mnemonic/components/GeneratePhrasePanel.tsx","webpack:///./common/v2/features/CreateWallet/Mnemonic/components/ConfirmPhrasePanel.tsx","webpack:///./common/v2/features/CreateWallet/Mnemonic/components/BackUpPhrasePanel.tsx","webpack:///./common/v2/features/CreateWallet/components/SelectNetworkPanel.tsx","webpack:///./common/v2/features/CreateWallet/CreateWallet.tsx","webpack:///./common/v2/features/Home/components/KeepYourAssetsSafePanel.tsx","webpack:///./common/v2/features/Home/components/FeaturesPanel.tsx","webpack:///./common/v2/features/Home/components/BottomActionPanel.tsx","webpack:///./common/v2/features/Home/components/TestimonialsPanel.tsx","webpack:///./common/v2/features/Home/components/PeaceOfMindPanel.tsx","webpack:///./common/v2/features/Home/components/DownloadAppPanel.tsx","webpack:///./common/v2/features/Home/components/CompatibleWalletsPanel.tsx","webpack:///./common/v2/features/Home/components/GetStartedPanel.tsx","webpack:///./common/v2/features/Home/Home.tsx","webpack:///./common/v2/features/NotificationsPanel/components/OnboardingResponsibleNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/OnboardingPleaseUnderstandNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/WalletNotAddedNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/GetHardwareWalletNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/PrintPaperWalletNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/SaveDashboardNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/WalletAddedNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/components/WalletCreatedNotification.tsx","webpack:///./common/v2/features/NotificationsPanel/NotificationsPanel.tsx","webpack:///./common/v2/features/DevTools/DevTools.tsx","webpack:///./common/v2/features/Drawer/screens/SelectLanguage.tsx","webpack:///./common/v2/components/Banner.tsx","webpack:///./common/v2/components/Network.tsx","webpack:///./common/v2/components/CollapsibleTable.tsx","webpack:///./common/v2/components/TabsNav.tsx","webpack:///./common/v2/components/WalletList/WalletList.tsx","webpack:///./common/v2/components/CodeBlock.tsx","webpack:///./common/v2/components/Tabs.tsx","webpack:///./common/v2/components/RouterLink.tsx","webpack:///./common/v2/components/PrintPaperWalletButton.tsx","webpack:///./common/v2/components/NetworkSelectDropdown.tsx","webpack:///./common/v2/components/InputField.tsx","webpack:///./common/v2/components/NewAppReleaseModal.tsx","webpack:///./common/v2/components/Modal/Modal.tsx","webpack:///./common/v2/components/Link.tsx","webpack:///./common/v2/components/ExtendedContentPanel.tsx","webpack:///./common/v2/components/Dropdown.tsx","webpack:///./common/v2/components/Divider.tsx","webpack:///./common/v2/components/ContentPanel.tsx","webpack:///./common/v2/components/CopyableCodeBlock.tsx","webpack:///./common/v2/components/Checkbox.tsx","webpack:///./common/v2/components/BannerAd/BannerAd.tsx","webpack:///./common/v2/components/Button.tsx","webpack:///./common/v2/components/AssetIcon.tsx","webpack:///./common/v2/components/AssetSummary.tsx","webpack:///./common/v2/components/AccountList.tsx","webpack:///./common/v2/components/AccountSummary.tsx","webpack:///./common/components/PaperWallet/index.tsx","webpack:///./common/v2/features/SignAndVerifyMessage/VerifyMessage.tsx","webpack:///./common/v2/features/SignAndVerifyMessage/SignMessage.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/NoAccountsSelected.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/NoAssets.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/BreakdownChart.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/BalancesDetailView.tsx","webpack:///./common/v2/features/Dashboard/components/WalletBreakdown/AccountDropdown.tsx","webpack:///./common/v2/features/Dashboard/components/TokenPanel/AddToken.tsx","webpack:///./common/v2/features/Dashboard/components/TokenPanel/TokenDetails.tsx","webpack:///./common/v2/features/Dashboard/components/TokenPanel/TokenList.tsx","webpack:///./common/v2/features/DevTools/ToolsAccountList.tsx","webpack:///./common/v2/features/DevTools/ToolsNotifications.tsx","webpack:///./common/v2/components/StackedCard.tsx","webpack:///./common/v2/components/IconCaret.tsx","webpack:///./common/v2/components/Table.tsx","webpack:///./common/assets/images/icn-sent.svg","webpack:///./common/v2/components/TransactionFlow/displays/TransactionIntermediaryDisplay.tsx","webpack:///./common/v2/components/WalletList/WalletButton.tsx","webpack:///./common/v2/components/PaperWallet.tsx"],"sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t4: 0\n \t};\n\n \tvar deferredModules = [];\n \tvar sriHashes = {\"0\":\"*-*-*-CHUNK-SRI-HASH-0-*-*-*\",\"1\":\"*-*-*-CHUNK-SRI-HASH-1-*-*-*\",\"2\":\"*-*-*-CHUNK-SRI-HASH-2-*-*-*\",\"3\":\"*-*-*-CHUNK-SRI-HASH-3-*-*-*\"};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([3552,0,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Typography as UITypography } from '@mycrypto/ui';\n\ninterface Props {\n  as?: string;\n  value?: any;\n  children?: any;\n  bold?: boolean;\n  small?: boolean;\n  style?: any;\n}\n\nconst STypography = styled(UITypography)`\n  line-height: 1.5;\n  vertical-align: middle;\n  font-weight: ${(p: Props) => (p.bold ? '600' : '400')};\n  font-size: ${(p: Props) => (p.small ? '0.8em' : '1rem')} !important;\n`;\n\nfunction Typography({\n  as = 'span',\n  value,\n  small = false,\n  bold = false,\n  children,\n  ...props\n}: Props) {\n  return (\n    <STypography as={as} bold={bold} small={small} {...props}>\n      {children ? children : value}\n    </STypography>\n  );\n}\n\nexport default Typography;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { BREAK_POINTS } from 'v2/theme';\n\nconst { SCREEN_XS, SCREEN_MD } = BREAK_POINTS;\n\ninterface WrapperProps {\n  alignCenterOnSmallScreen?: boolean;\n}\n\nconst Wrapper = styled.div<WrapperProps>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  text-align: left;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-direction: column;\n    ${props => props.alignCenterOnSmallScreen && 'text-align: center;'};\n  }\n`;\n\nconst Info = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 860px;\n`;\n\ninterface LeftImageProps {\n  src: string;\n  width: string;\n  height: string;\n  transform?: string;\n  hideOnMobile?: boolean;\n  marginRight?: string;\n}\n\nconst LeftImage = styled.img<LeftImageProps>`\n  ${props => `width: ${props.width};`};\n  ${props => `height: ${props.height};`};\n  ${props => props.transform && `transform: ${props.transform};`};\n  ${props =>\n    props.hideOnMobile &&\n    `@media (max-width: ${SCREEN_MD}) {\n      display: none;\n    }`};\n  ${props => (props.marginRight ? `margin-right: ${props.marginRight};` : 'margin-right: 30px;')};\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Tagline = styled.p`\n  font-weight: bold;\n  font-size: 16px;\n  color: #a682ff;\n  margin: 0;\n  text-transform: uppercase;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 12px;\n  }\n`;\n\nconst Title = styled.p`\n  font-weight: bold;\n  font-size: 24px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 20px;\n  }\n`;\n\nconst Description = styled.p`\n  font-weight: normal;\n  word-break: break-word;\n  font-size: 16px;\n  white-space: pre-line;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 14px;\n  }\n\n  strong {\n    font-weight: 600;\n  }\n`;\n\nconst Resources = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 20px;\n  }\n`;\n\ninterface NotificationWrapperProps {\n  leftImg?: LeftImageProps;\n  tagline?: React.ReactElement<any>;\n  title: React.ReactElement<any> | string;\n  description?: React.ReactElement<any>;\n  additionalDescription?: React.ReactElement<any>;\n  resources: React.ReactElement<any>;\n  alignCenterOnSmallScreen?: boolean;\n  children?: any;\n}\n\nexport default function NotificationWrapper({\n  leftImg,\n  tagline,\n  title,\n  description,\n  additionalDescription,\n  resources,\n  alignCenterOnSmallScreen,\n  children\n}: NotificationWrapperProps) {\n  return (\n    <Wrapper alignCenterOnSmallScreen={alignCenterOnSmallScreen}>\n      <Info>\n        {leftImg && <LeftImage {...leftImg} />}\n        <Content>\n          {tagline && <Tagline>{tagline}</Tagline>}\n          <Title>{title}</Title>\n          {description && <Description>{description}</Description>}\n          {additionalDescription && <Description>{additionalDescription}</Description>}\n          {children}\n        </Content>\n      </Info>\n      <Resources>{resources}</Resources>\n    </Wrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { TSymbol } from 'v2/types';\nimport { getSymbolIcon } from 'v2/utils';\nimport { default as Typography } from './Typography';\n\nconst SContainer = styled('div')`\n  display: inline-flex;\n  align-contents: center;\n`;\ninterface Props {\n  amount: string;\n  symbol: TSymbol;\n  decimals?: number;\n  icon?: boolean;\n  prefix?: boolean;\n}\n\nfunction Currency({ amount, symbol, decimals = 5, icon = false, prefix = false, ...props }: Props) {\n  const format = (value: string, decimalPlaces: number) => {\n    const v = parseFloat(value);\n    return Number(v).toFixed(decimalPlaces);\n    // const multiplier = Math.pow(10, decimalPlaces);\n    // return Math.round(v * multiplier + Number.EPSILON) / multiplier;\n  };\n\n  return (\n    <SContainer {...props}>\n      {icon && (\n        <span>\n          <img src={getSymbolIcon(symbol)} width={19} alt={symbol} />\n        </span>\n      )}\n      <Typography>\n        {prefix && `${symbol}`}\n        {format(amount, decimals)}\n        {!prefix && `${symbol}`}\n      </Typography>\n    </SContainer>\n  );\n}\n\nexport default Currency;\n","import React, { Component } from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport translate, { translateRaw } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services/ApiService';\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  align-items: center;\n  justify-content: center;\n  z-index: 10;\n  width: 100%;\n  height: 100%;\n  padding: 12px;\n  background-color: rgba(66, 66, 66, 0.8);\n`;\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  max-width: 540px;\n  text-align: center;\n`;\n\nconst Title = styled.p`\n  font-size: 32px;\n  color: white;\n  font-weight: bold;\n`;\n\nconst Description = styled.p`\n  font-size: 24px;\n  color: white;\n  line-height: 1.5;\n`;\n\nconst PrimaryButton = styled(Button)`\n  width: 100%;\n  max-width: 420px;\n  margin-top: 10px;\n  font-size: 18px;\n`;\n\nconst SecondaryButton = styled(Button)`\n  width: 100%;\n  max-width: 420px;\n  margin-top: 10px;\n  font-size: 18px;\n  color: white;\n  background: none;\n  border: solid 2px #ffffff;\n\n  hover: {\n    background: #fff;\n  }\n`;\n\ninterface LockScreenProps {\n  timeLeft: number;\n  onScreenLockClicked(): void;\n  onCancelLockCountdown(): void;\n}\n\nexport default class ScreenLockLocking extends Component<LockScreenProps> {\n  public handleKeepUsingDashboardClicked = () => {\n    this.props.onCancelLockCountdown();\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.SCREEN_LOCK,\n      'Keep Using MyCrypto button clicked'\n    );\n  };\n\n  public handleTurnOnScreenLockClick = () => {\n    this.props.onScreenLockClicked();\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.SCREEN_LOCK,\n      'Turn On Screenlock button clicked'\n    );\n  };\n\n  public render() {\n    return (\n      <MainWrapper>\n        <ContentWrapper>\n          <Title>{translate('SCREEN_LOCK_LOCKING_HEADING')}</Title>\n          <Description>\n            {translate('SCREEN_LOCK_LOCKING_DESCRIPTION')}{' '}\n            <b>\n              {translate('SCREEN_LOCK_LOCKING_SECONDS', {\n                $time_left: this.props.timeLeft.toString()\n              })}\n            </b>\n          </Description>\n          <PrimaryButton onClick={this.handleKeepUsingDashboardClicked}>\n            {translateRaw('SCREEN_LOCK_LOCKING_KEEP_USING')}\n          </PrimaryButton>\n          <SecondaryButton onClick={this.handleTurnOnScreenLockClick}>\n            {translate('SCREEN_LOCK_LOCKING_TURN_ON_LOCK')}\n          </SecondaryButton>\n        </ContentWrapper>\n      </MainWrapper>\n    );\n  }\n}\n","import styled from 'styled-components';\nimport { COLORS } from 'v2/theme';\nconst { PASTEL_RED } = COLORS;\n\nexport const InlineErrorMsg = styled.div`\n  font-size: 16px;\n  width: 100%;\n  color: ${PASTEL_RED};\n  text-align: justify;\n  white-space: pre-line;\n`;\n","import styled from 'styled-components';\nimport { Panel as UIPanel } from '@mycrypto/ui';\n\nexport const Panel = styled(UIPanel)`\n  border-radius: 3px;\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button, Heading } from '@mycrypto/ui';\n\nimport { Panel } from './Panel';\n\nconst Content = styled.div`\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nconst DPanel = styled(Panel)`\n  padding: 0 0 15px 0;\n`;\n\nconst DHeadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px;\n`;\n\nconst DFooterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 15px 0px 15px;\n`;\n\nconst DHeading = styled(Heading)`\n  && {\n    margin: 0;\n    font-size: 24px;\n    font-weight: bold;\n    color: #424242;\n  }\n`;\n\nconst DButton = styled(Button)`\n  padding: 9px 16px;\n  font-size: 18px;\n`;\n\ninterface Props {\n  heading: any;\n  children: any;\n  headingRight?: string | JSX.Element;\n  footer?: JSX.Element;\n  actionLink?: string;\n  className?: string;\n  padChildren?: boolean;\n}\n\nexport const DashboardPanel = ({\n  heading,\n  headingRight,\n  actionLink,\n  footer,\n  className = '',\n  children,\n  padChildren,\n  ...rest\n}: Props) => {\n  return (\n    <DPanel {...rest}>\n      <DHeadingWrapper>\n        <DHeading>{heading}</DHeading>\n        {headingRight &&\n          (actionLink ? (\n            <Link to={actionLink}>\n              <DButton>{headingRight}</DButton>\n            </Link>\n          ) : (\n            headingRight\n          ))}\n      </DHeadingWrapper>\n      {padChildren ? <Content>{children}</Content> : children}\n      {footer && <DFooterWrapper>{footer}</DFooterWrapper>}\n    </DPanel>\n  );\n};\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { translate, translateRaw } from 'translations';\nimport BreakdownChart from './BreakdownChart';\nimport NoAssets from './NoAssets';\nimport { WalletBreakdownProps, Balance } from './types';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\nimport { TSymbol } from 'v2/types';\nimport { AssetIcon } from 'v2/components';\n\nimport moreIcon from 'common/assets/images/icn-more.svg';\n\nexport const SMALLEST_CHART_SHARE_SUPPORTED = 0.03; // 3%\nexport const NUMBER_OF_ASSETS_DISPLAYED = 4;\n\nconst { BRIGHT_SKY_BLUE } = COLORS;\nconst { SCREEN_MD } = BREAK_POINTS;\n\nconst BreakDownHeading = styled.div`\n  margin: 0;\n  font-size: 20px;\n  font-weight: bold;\n  color: #424242;\n\n  @media (min-width: ${SCREEN_MD}) {\n    font-size: 24px;\n  }\n`;\n\nconst BreakDownChartWrapper = styled.div`\n  flex: 1;\n  padding-left: 15px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    padding-right: 15px;\n  }\n`;\n\nconst PanelFigures = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  margin: 30px 0;\n`;\n\nconst PanelFigure = styled.div``;\n\nconst PanelFigureValue = styled.div`\n  margin: 0;\n  font-size: 22px;\n  font-weight: bold;\n`;\n\nconst PanelFigureLabel = styled.div`\n  margin: 0;\n  font-size: 16px;\n  font-weight: normal;\n`;\n\ninterface PanelDividerProps {\n  mobileOnly?: boolean;\n}\n\nconst PanelDivider = styled.div<PanelDividerProps>`\n  height: 1px;\n  margin-bottom: 15px;\n  margin-top: 15px;\n  background: #ddd;\n  display: block;\n\n  ${props =>\n    props.mobileOnly &&\n    `\n  @media (min-width: ${SCREEN_MD}) {\n    display: none;\n  }`};\n`;\n\nconst VerticalPanelDivider = styled.div`\n  width: 1px;\n  margin: 0 15px;\n  background: #ddd;\n  display: none;\n\n  @media (min-width: ${SCREEN_MD}) {\n    display: block;\n  }\n`;\n\nconst BreakDownBalances = styled.div`\n  flex: 1;\n  padding-right: 15px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n\n  display: flex;\n  flex-direction: column;\n\n  @media (max-width: ${SCREEN_MD}) {\n    padding-left: 15px;\n  }\n`;\n\nconst BreakDownHeadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst BreakDownMore = styled.img`\n  display: block;\n  cursor: pointer;\n`;\n\nconst BreakDownBalanceList = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: #282d32;\n  font-size: 16px;\n  font-weight: normal;\n`;\n\nconst BreakDownBalance = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 11px 0;\n  line-height: 1.2;\n  align-items: center;\n\n  &:first-of-type {\n    margin-top: 16px;\n  }\n`;\n\nconst BreakDownBalanceAssetIcon = styled(AssetIcon)`\n  margin-right: 10px;\n`;\n\nconst BreakDownBalanceAssetInfo = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst BreakDownBalanceAssetName = styled.div`\n  margin: 0;\n`;\n\nconst BreakDownBalanceAssetAmount = styled(BreakDownBalanceAssetName)`\n  a {\n    color: ${BRIGHT_SKY_BLUE};\n  }\n  ${(props: { silent?: boolean }) =>\n    props.silent === true &&\n    css`\n      color: ${COLORS.CLOUDY_BLUE};\n      font-size: 0.8em;\n    `}\n`;\n\nconst BalanceTotalWrapper = styled.div`\n  margin-top: auto;\n  margin-bottom: 30px;\n`;\n\nconst BreakDownBalanceTotal = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 16px;\n  font-weight: normal;\n`;\n\nconst ViewDetailsLink = styled.a`\n  color: #1eb8e7;\n`;\n\nexport default function WalletBreakdownView({\n  balances,\n  toggleShowChart,\n  totalFiatValue,\n  fiat\n}: WalletBreakdownProps) {\n  const [selectedAssetIndex, setSelectedAssetIndex] = useState(0);\n  const [previousBalances, setPreviousBalances] = useState<Balance[]>([]);\n\n  const chartBalances = createChartBalances(balances, totalFiatValue);\n  const breakdownBalances =\n    balances.length > NUMBER_OF_ASSETS_DISPLAYED ? createBreakdownBalances(balances) : balances;\n\n  const shownSelectedIndex = chartBalances.length > selectedAssetIndex ? selectedAssetIndex : 0;\n  const balance = chartBalances[shownSelectedIndex];\n  const selectedAssetPercentage = parseFloat(\n    ((balance.fiatValue / totalFiatValue) * 100).toFixed(2)\n  );\n  if (chartBalances.length !== previousBalances.length) {\n    setSelectedAssetIndex(0);\n    setPreviousBalances(chartBalances);\n  }\n  return (\n    <>\n      <BreakDownChartWrapper>\n        <BreakDownHeading>{translate('WALLET_BREAKDOWN_TITLE')}</BreakDownHeading>\n        {totalFiatValue === 0 ? (\n          <NoAssets />\n        ) : (\n          <>\n            <BreakdownChart\n              balances={chartBalances}\n              setSelectedAssetIndex={setSelectedAssetIndex}\n              selectedAssetIndex={selectedAssetIndex}\n            />\n            <PanelFigures>\n              <PanelFigure>\n                <PanelFigureValue>{balance.name}</PanelFigureValue>\n                <PanelFigureLabel>\n                  {selectedAssetPercentage}\n                  {translate('WALLET_BREAKDOWN_PERCENTAGE')}\n                </PanelFigureLabel>\n              </PanelFigure>\n              <PanelFigure>\n                <PanelFigureValue>\n                  {fiat.symbol}\n                  {balance.fiatValue.toFixed(2)}\n                </PanelFigureValue>\n                <PanelFigureLabel>\n                  {translate('WALLET_BREAKDOWN_VALUE_IN')} {fiat.name}\n                </PanelFigureLabel>\n              </PanelFigure>\n            </PanelFigures>\n          </>\n        )}\n      </BreakDownChartWrapper>\n      <PanelDivider mobileOnly={true} />\n      <VerticalPanelDivider />\n      <BreakDownBalances>\n        <BreakDownHeadingWrapper>\n          <BreakDownHeading>{translate('WALLET_BREAKDOWN_BALANCE')}</BreakDownHeading>\n          <BreakDownMore src={moreIcon} alt=\"More\" onClick={toggleShowChart} />\n        </BreakDownHeadingWrapper>\n        <BreakDownBalanceList>\n          {breakdownBalances.map(({ name, amount, fiatValue, ticker, isOther }) => (\n            <BreakDownBalance key={name}>\n              <BreakDownBalanceAssetInfo>\n                <div>\n                  <BreakDownBalanceAssetIcon symbol={ticker as TSymbol} size={'26px'} />\n                </div>\n                <div>\n                  <BreakDownBalanceAssetName>{name}</BreakDownBalanceAssetName>\n                  <BreakDownBalanceAssetAmount silent={true}>\n                    {!isOther && `${amount.toFixed(4)} ${ticker}`}\n                  </BreakDownBalanceAssetAmount>\n                </div>\n              </BreakDownBalanceAssetInfo>\n              <BreakDownBalanceAssetAmount>\n                {fiat.symbol}\n                {fiatValue.toFixed(2)}\n              </BreakDownBalanceAssetAmount>\n            </BreakDownBalance>\n          ))}\n        </BreakDownBalanceList>\n        <BalanceTotalWrapper>\n          <ViewDetailsLink onClick={toggleShowChart}>\n            {translate('WALLET_BREAKDOWN_MORE')}\n          </ViewDetailsLink>\n          <PanelDivider />\n          <BreakDownBalanceTotal>\n            <div>{translate('WALLET_BREAKDOWN_TOTAL')}</div>\n            <div>\n              {fiat.symbol}\n              {totalFiatValue.toFixed(2)}\n            </div>\n          </BreakDownBalanceTotal>\n        </BalanceTotalWrapper>\n      </BreakDownBalances>\n    </>\n  );\n}\n\nconst createChartBalances = (balances: Balance[], totalFiatValue: number) => {\n  /* Construct a chartBalances array which consists of assets and a otherTokensAsset\n  which combines the fiat value of all remaining tokens that are in the balances array*/\n  const chartBalances = balances.filter(\n    balanceObject => balanceObject.fiatValue / totalFiatValue >= SMALLEST_CHART_SHARE_SUPPORTED\n  );\n  const otherBalances = balances.filter(\n    balanceObject => balanceObject.fiatValue / totalFiatValue <= SMALLEST_CHART_SHARE_SUPPORTED\n  );\n  const otherTokensAsset = createOtherTokenAsset(otherBalances);\n  chartBalances.push(otherTokensAsset);\n  return chartBalances;\n};\n\nconst createBreakdownBalances = (balances: Balance[]) => {\n  /* Construct a finalBalances array which consists of top X assets and a otherTokensAsset\n  which combines the fiat value of all remaining tokens that are in the balances array*/\n  const otherBalances = balances.slice(NUMBER_OF_ASSETS_DISPLAYED, balances.length);\n  const otherTokensAssets = createOtherTokenAsset(otherBalances);\n  const finalBalances = balances.slice(0, NUMBER_OF_ASSETS_DISPLAYED);\n  finalBalances.push(otherTokensAssets);\n  return finalBalances;\n};\n\nconst createOtherTokenAsset = (otherBalances: Balance[]) => ({\n  name: translateRaw('WALLET_BREAKDOWN_OTHER'),\n  ticker: translateRaw('WALLET_BREAKDOWN_OTHER_TICKER'),\n  isOther: true,\n  amount: 0,\n  fiatValue: otherBalances.reduce((sum, asset) => {\n    return (sum += asset.fiatValue);\n  }, 0)\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Transition } from 'react-spring/renderprops.cjs';\nimport { Icon } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { UnlockScreen, SelectLanguage } from 'v2/features/Drawer/screens';\nimport { links } from './constants';\nimport { BREAK_POINTS, COLORS, MIN_CONTENT_PADDING } from 'v2/theme';\nimport { translate } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { KNOWLEDGE_BASE_URL, ROUTE_PATHS } from 'v2/config';\n\nimport { AppState } from 'features/reducers';\nimport { configMetaSelectors } from 'features/config';\nimport { languages } from 'config';\n\n// Legacy\nimport logo from 'assets/images/logo-mycrypto.svg';\n\nconst { BRIGHT_SKY_BLUE } = COLORS;\n\nconst Navbar = styled.nav`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 4;\n  width: 100%;\n  background: #163150;\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    position: initial;\n  }\n`;\n\nconst Menu = styled.div`\n  position: fixed;\n  top: 77px;\n  left: 0;\n  overflow: auto;\n  width: 375px;\n  height: calc(100vh - 77px);\n  background: #163150;\n`;\n\nconst HeaderTop = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  height: 77px;\n  padding: 0 ${MIN_CONTENT_PADDING};\n  border-bottom: 1px solid #3e546d;\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    padding: 0;\n  }\n`;\n\nconst HeaderBottom = styled.div`\n  display: none;\n  height: 77px;\n  border-bottom: 1px solid #3e546d;\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nconst HeaderBottomLinks = styled.ul`\n  display: none;\n\n  li {\n    position: relative;\n\n    ul {\n      position: absolute;\n      top: 100%;\n      left: 0;\n      min-width: 200px;\n      margin: 0;\n      padding: 0;\n      background: #163150;\n      border: 1px solid #3e546d;\n      text-transform: none;\n      z-index: 1;\n\n      li {\n        padding: 13px;\n        font-weight: 300;\n      }\n    }\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin: 0;\n    padding: 0;\n    color: #ffffff;\n    text-transform: uppercase;\n    font-weight: bold;\n    list-style-type: none;\n\n    display: flex;\n    align-items: center;\n    height: 100%;\n\n    li {\n      height: 100%;\n      margin: 0;\n      padding: 0 25px;\n      font-weight: 500;\n      display: flex;\n      align-items: center;\n\n      transition: background 0.2s ease-in;\n\n      &:hover {\n        background: #304b6a;\n        cursor: pointer;\n      }\n    }\n  }\n`;\n\nconst HeaderTopLeft = styled.div`\n  display: none;\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin: 0;\n    padding: 0;\n    color: #ffffff;\n    text-transform: uppercase;\n    font-weight: bold;\n    list-style-type: none;\n\n    display: flex;\n    align-items: center;\n    height: 100%;\n\n    li {\n      height: 100%;\n      margin: 0;\n      padding: 0 25px;\n      font-weight: 500;\n      display: flex;\n      align-items: center;\n\n      transition: background 0.2s ease-in;\n\n      &:hover {\n        background: #304b6a;\n        cursor: pointer;\n      }\n    }\n  }\n`;\n\nconst MenuLinks = styled.ul`\n  margin: 0;\n  color: #ffffff;\n  text-transform: uppercase;\n  font-weight: bold;\n  list-style-type: none;\n\n  padding: 15px 0;\n  border-bottom: 1px solid #3e546d;\n\n  li {\n    height: 100%;\n    margin: 0;\n    font-weight: 500;\n    padding: 20px ${MIN_CONTENT_PADDING};\n\n    ul {\n      list-style-type: none;\n      margin: 15px 0;\n      padding: 0;\n\n      li {\n        margin: 0;\n        padding: 0;\n        text-transform: none;\n\n        &:not(:last-of-type) {\n          margin-bottom: 15px;\n        }\n      }\n    }\n  }\n`;\n\nconst MenuMid = styled.div`\n  padding: 35px ${MIN_CONTENT_PADDING};\n  border-bottom: 1px solid #3e546d;\n  color: #ffffff;\n  text-transform: uppercase;\n  font-weight: normal;\n`;\n\nconst MobileTopLeft = styled.div`\n  display: block;\n  color: #ffffff;\n  font-size: 1.5rem;\n\n  svg {\n    color: #ffffff;\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    display: none;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst MobileTopRight = styled(MobileTopLeft)`\n  visibility: hidden;\n`;\n\nconst CenterImg = styled.img`\n  width: 160px;\n  height: 39px;\n`;\n\nconst Unlock = styled.li`\n  visibility: hidden;\n  display: flex;\n  align-items: center;\n  border-left: 1px solid #3e546d;\n\n  svg {\n    margin-right: 6px;\n    color: #1eb8e7;\n  }\n`;\n\ninterface IconWrapperProps {\n  subItems?: boolean;\n}\n\n// prettier-ignore\nconst IconWrapper = styled(Icon)<IconWrapperProps>`\n  margin: 0;\n  margin-left: 6px;\n  font-size: 0.75rem;\n\n  svg {\n    color: ${BRIGHT_SKY_BLUE};\n    ${props => props.subItems && 'transform: rotate(270deg);'};\n  }\n`;\n\nconst TitleIconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\ninterface PrefixIconProps {\n  width: string;\n  height: string;\n}\n\n// prettier-ignore\nconst PrefixIcon = styled.img<PrefixIconProps>`\n  ${props => props.width && `width: ${props.width};`}\n  ${props => props.height && `height: ${props.height};`}\n  margin-right: 3px;\n\n  svg {\n    color: ${BRIGHT_SKY_BLUE};\n  }\n`;\n\ninterface Props {\n  languageSelection: ReturnType<typeof configMetaSelectors.getLanguageSelection>;\n  drawerVisible: boolean;\n  toggleDrawerVisible(): void;\n  setDrawerScreen(screen: any): void;\n}\n\ninterface State {\n  menuOpen: boolean;\n  visibleMenuDropdowns: {\n    [dropdown: string]: boolean;\n  };\n  visibleDropdowns: {\n    [dropdown: string]: boolean;\n  };\n}\n\ninterface LinkElement {\n  to: string;\n  title?: string;\n  subItems?: LinkElement;\n}\n\nexport class Header extends Component<Props & RouteComponentProps<{}>, State> {\n  public state: State = {\n    menuOpen: false,\n    visibleMenuDropdowns: {\n      'Manage Assets': false,\n      Tools: false\n    },\n    visibleDropdowns: {\n      'Manage Assets': false,\n      Tools: false\n    }\n  };\n\n  public render() {\n    const {\n      history,\n      drawerVisible,\n      toggleDrawerVisible,\n      setDrawerScreen,\n      languageSelection\n    } = this.props;\n    const { menuOpen, visibleMenuDropdowns, visibleDropdowns } = this.state;\n    const onUnlockClick = () => {\n      this.closeMenu();\n      drawerVisible ? toggleDrawerVisible() : setDrawerScreen(UnlockScreen);\n    };\n\n    const onLanguageClick = () => {\n      this.closeMenu();\n      drawerVisible ? toggleDrawerVisible() : setDrawerScreen(SelectLanguage);\n    };\n\n    return (\n      <Navbar>\n        {/* Mobile Menu */}\n        <Transition\n          items={menuOpen}\n          from={{ left: '-375px' }}\n          enter={{ left: '0' }}\n          leave={{ left: '-500px' }}\n        >\n          {open =>\n            open &&\n            ((style: any) => (\n              <Menu style={style}>\n                <MenuLinks>\n                  {links.map(({ title, to, subItems, icon }) => {\n                    return (\n                      <li\n                        key={title}\n                        onClick={e => {\n                          e.stopPropagation();\n\n                          if (to) {\n                            history.push(to);\n                            this.toggleMenu();\n                          } else {\n                            this.toggleMenuDropdown(title);\n                          }\n                        }}\n                      >\n                        <TitleIconWrapper>\n                          {icon && <PrefixIcon {...icon} />} {title}\n                          {!icon && <IconWrapper subItems={!subItems} icon=\"navDownCaret\" />}\n                        </TitleIconWrapper>\n                        {subItems && visibleMenuDropdowns[title] && (\n                          <ul>\n                            {subItems.map(({ to: innerTo, title: innerTitle }: LinkElement) => (\n                              <li\n                                key={innerTitle}\n                                onClick={() => {\n                                  this.toggleMenu();\n                                  history.push(innerTo);\n                                }}\n                              >\n                                {innerTitle}\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n                      </li>\n                    );\n                  })}\n                </MenuLinks>\n                <MenuMid onClick={onLanguageClick}>\n                  {languages[languageSelection]} <IconWrapper subItems={true} icon=\"navDownCaret\" />\n                </MenuMid>\n                <MenuLinks>\n                  <li onClick={this.openHelpSupportPage}>\n                    {translate('NEW_HEADER_TEXT_1')}\n                    <IconWrapper subItems={true} icon=\"navDownCaret\" />\n                  </li>\n                  <li>\n                    Latest News <IconWrapper subItems={true} icon=\"navDownCaret\" />\n                  </li>\n                </MenuLinks>\n              </Menu>\n            ))\n          }\n        </Transition>\n        <HeaderTop>\n          {/* Mobile Left */}\n          <MobileTopLeft role=\"button\" onClick={this.toggleMenu}>\n            <Icon icon={menuOpen ? 'exit' : 'combinedShape'} />\n          </MobileTopLeft>\n          {/* Desktop Left */}\n          <HeaderTopLeft>\n            <li onClick={this.openHelpSupportPage}>{translate('NEW_HEADER_TEXT_1')}</li>\n            <li>Latest News</li>\n          </HeaderTopLeft>\n          <div>\n            <Link to={ROUTE_PATHS.ROOT.path}>\n              <CenterImg src={logo} alt=\"Our logo\" />\n            </Link>\n          </div>\n          {/* Unlock button hidden for MVP purposes */}\n          {/* Mobile Right */}\n          <MobileTopRight onClick={onUnlockClick}>\n            <Icon icon={drawerVisible ? 'exit' : 'unlock'} />\n          </MobileTopRight>\n          {/* Desktop Right */}\n          <HeaderTopLeft>\n            <Unlock onClick={onUnlockClick}>\n              <IconWrapper icon=\"unlock\" /> Unlock\n            </Unlock>\n            <li onClick={onLanguageClick}>{languages[languageSelection]}</li>\n          </HeaderTopLeft>\n        </HeaderTop>\n        <HeaderBottom>\n          <HeaderBottomLinks>\n            {links.map(({ title, to, subItems, icon }) => {\n              const liProps = to\n                ? { onClick: () => history.push(to) }\n                : {\n                    onMouseEnter: () => this.toggleDropdown(title),\n                    onMouseLeave: () => this.toggleDropdown(title)\n                  };\n\n              return (\n                <li key={title} {...liProps}>\n                  {icon && <PrefixIcon {...icon} />} {title}{' '}\n                  {!icon && subItems && <IconWrapper subItems={!subItems} icon=\"navDownCaret\" />}\n                  {subItems && visibleDropdowns[title] && (\n                    <ul>\n                      {subItems.map(({ to: innerTo, title: innerTitle }: LinkElement) => (\n                        <li key={innerTitle} onClick={() => history.push(innerTo)}>\n                          {innerTitle}\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n                </li>\n              );\n            })}\n          </HeaderBottomLinks>\n        </HeaderBottom>\n      </Navbar>\n    );\n  }\n\n  private toggleMenu = () => {\n    const { drawerVisible, toggleDrawerVisible } = this.props;\n\n    if (drawerVisible) {\n      toggleDrawerVisible();\n    }\n\n    this.setState(prevState => ({\n      menuOpen: !prevState.menuOpen\n    }));\n  };\n\n  private closeMenu = () =>\n    this.setState({\n      menuOpen: false\n    });\n\n  private toggleMenuDropdown = (dropdown: string) =>\n    this.setState(prevState => ({\n      visibleMenuDropdowns: {\n        ...prevState.visibleMenuDropdowns,\n        [dropdown]: !prevState.visibleMenuDropdowns[dropdown]\n      }\n    }));\n\n  private toggleDropdown = (dropdown: string) =>\n    this.setState(prevState => ({\n      visibleDropdowns: {\n        ...prevState.visibleDropdowns,\n        [dropdown]: !prevState.visibleDropdowns[dropdown]\n      }\n    }));\n\n  private openHelpSupportPage = (): void => {\n    window.open(KNOWLEDGE_BASE_URL, '_blank');\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HEADER, 'Help & Support clicked');\n  };\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  languageSelection: configMetaSelectors.getLanguageSelection(state)\n});\n\nexport default withRouter(connect(mapStateToProps)(Header));\n","import React, { useContext } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { BannerType } from 'v2/types';\nimport { Banner } from 'v2/components';\nimport { BREAK_POINTS, MAX_CONTENT_WIDTH, MIN_CONTENT_PADDING } from 'v2/theme';\nimport { DrawerContext } from 'v2/features';\nimport Header from './Header';\nimport Footer from './Footer';\n\ninterface LayoutConfig {\n  centered?: boolean;\n  fluid?: boolean;\n  fullW?: boolean;\n  bgColor?: string;\n}\ninterface Props {\n  config?: LayoutConfig;\n  className?: string;\n  children: any;\n}\n\n// Homepage 'home' creates an unidentified overflow on the x axis.\n// We use layout to disable it here.\nconst SMain = styled('main')`\n  overflow-x: hidden;\n  min-width: 350px;\n  background: ${(p: { bgColor?: string }) => p.bgColor || '#f6f8fa'};\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\n// This is the moment our header becomes sticky and shrinks.\n// Since it is aboslute positionning we add the extra height to\n// the padding.\n// !WARNING: When we remove the banner we will need to place the\n// same margin on SContainer.\nconst SBanner = styled(Banner)`\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-top: 77px;\n  }\n`;\n\nconst SContainer = styled('div')`\n  padding: 50px ${p => (p.fluid || p.fullW ? 0 : MIN_CONTENT_PADDING)};\n  max-width: ${p => (p.fullW ? '100%' : MAX_CONTENT_WIDTH)};\n\n  ${({ centered }: LayoutConfig) =>\n    centered &&\n    css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      flex: 1;\n      // Necessary to center the mobile layout when below the small screen breakpoint.\n      @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n        align-self: center;\n      }\n    `}\n`;\n\nexport default function Layout({ config = {}, className = '', children }: Props) {\n  const { centered = true, fluid, fullW = false, bgColor } = config;\n  const { visible, toggleVisible, setScreen } = useContext(DrawerContext);\n  const betaAnnouncement =\n    'Heads up: this is a beta version of the new MyCrypto. It has not been audited yet, so please practice safe sending.';\n  return (\n    <SMain className={className} bgColor={bgColor}>\n      <Header\n        drawerVisible={visible}\n        toggleDrawerVisible={toggleVisible}\n        setDrawerScreen={setScreen}\n      />\n      <SBanner type={BannerType.ANNOUNCEMENT} value={betaAnnouncement} />\n      <SContainer centered={centered} fluid={fluid} fullW={fullW}>\n        {children}\n      </SContainer>\n      <Footer />\n    </SMain>\n  );\n}\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport BN from 'bn.js';\n\nimport { getNetworkByName, getNetworkByChainId, getAssetByUUID } from 'v2/services/Store';\nimport { ConfirmTransaction as ConfirmTransactionForm } from 'v2/components/TransactionFlow';\nimport { toChecksumAddressByChainId } from 'utils/formatters';\nimport { fromWei, ProviderHandler } from 'v2/services/EthService';\nimport { InlineErrorMsg } from 'v2/components/ErrorMessages';\nimport { translateRaw } from 'translations';\nimport { ITxReceipt, ITxConfig } from 'v2/types';\nimport { fromTxReceiptObj } from 'v2/components/TransactionFlow/helpers';\n\nconst ErrorWrapper = styled(InlineErrorMsg)`\n  margin-top: 12px;\n`;\n\ninterface Props {\n  transaction: any;\n  signedTransaction: string;\n  network: string;\n  goToNextStep(): void;\n  selectNetwork(network: string): void;\n  setTxReceipt(receipt: ITxReceipt): void;\n  setTxConfig(config: ITxConfig): void;\n}\n\nexport default function ConfirmTransaction(props: Props) {\n  const [txError, setTxError] = useState('');\n\n  const { transaction, signedTransaction, network, goToNextStep } = props;\n  const { from, to, value, _chainId, gasPrice, gasLimit, nonce, data } = transaction;\n\n  const txNetwork = transaction._chainId\n    ? getNetworkByChainId(transaction._chainId)\n    : getNetworkByName(network);\n\n  if (!txNetwork) {\n    return <InlineErrorMsg>{translateRaw('BROADCAST_TX_INVALID_CHAIN_ID')}</InlineErrorMsg>;\n  }\n\n  const txAmount = fromWei(new BN(value, 16), 'ether');\n  const txBaseAsset = getAssetByUUID(txNetwork.baseAsset)!;\n  const txToAddress = toChecksumAddressByChainId(to.toString('hex'), _chainId);\n  const txFromAddress = toChecksumAddressByChainId(from.toString('hex'), _chainId);\n  const txGasPrice = new BN(gasPrice, 16).toString();\n  const txGasLimit = new BN(gasLimit, 16).toString();\n  const txValue = new BN(value, 16).toString();\n  const txNonce = new BN(nonce, 16).toString();\n  const txData = data.toString('hex');\n\n  const txConfig: any = {\n    amount: txAmount,\n    receiverAddress: txToAddress,\n    senderAccount: { address: txFromAddress, assets: [] },\n    network: txNetwork,\n    asset: txBaseAsset,\n    baseAsset: txBaseAsset,\n    gasPrice: txGasPrice,\n    gasLimit: txGasLimit,\n    value: txValue,\n    nonce: txNonce,\n    data: txData\n  };\n\n  const handleConfirmClick = async () => {\n    const provider = new ProviderHandler(txNetwork);\n    const { setTxReceipt, setTxConfig } = props;\n    setTxError('');\n\n    try {\n      const response = await provider.sendRawTx(signedTransaction);\n      setTxReceipt(fromTxReceiptObj(response) || {});\n      setTxConfig(txConfig);\n      goToNextStep();\n    } catch (e) {\n      setTxError(e.toString());\n    }\n  };\n\n  return (\n    <>\n      <ConfirmTransactionForm\n        onComplete={handleConfirmClick}\n        resetFlow={handleConfirmClick}\n        txConfig={txConfig}\n      />\n      {txError && <ErrorWrapper>{txError}</ErrorWrapper>}\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { toBuffer } from 'ethereumjs-util';\nimport { Button, Identicon } from '@mycrypto/ui';\nimport EthTx from 'ethereumjs-tx';\nimport styled from 'styled-components';\n\nimport translate, { translateRaw } from 'translations';\nimport { getTransactionFields, makeTransaction } from 'libs/transaction';\nimport {\n  InputField,\n  QRCode,\n  CodeBlock,\n  NetworkSelectDropdown,\n  InlineErrorMsg\n} from 'v2/components';\n\ninterface State {\n  userInput: string;\n  inputError: string;\n  networkSelectError: string;\n  stringifiedTransaction: string;\n  transaction: EthTx | undefined;\n}\n\ninterface Props {\n  transaction: any;\n  signedTransaction: string;\n  network: string;\n  selectNetwork(network: string): void;\n  goToNextStep(): void;\n  setTransaction(transaction: EthTx | undefined): void;\n  setSignedTransaction(signedTransaction: string): void;\n}\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Description = styled.p`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: normal;\n  text-align: center;\n  color: ${props => props.theme.text};\n  white-space: pre-line;\n\n  strong {\n    font-weight: 900;\n  }\n\n  @media (max-width: 700px) {\n    padding: 0 8px;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  margin-top: 30px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nconst PlaceholderButton = styled(Button)`\n  opacity: 0.4;\n  margin-top: 20px;\n  cursor: default;\n`;\n\nconst SendButton = styled(Button)`\n  width: 100%;\n`;\n\nconst CodeBlockWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  max-width: 510px;\n  overflow-x: auto;\n`;\n\nconst QRCodeWrapper = styled.div`\n  max-width: 15rem;\n  margin: 1rem auto;\n  width: 100%;\n  text-align: center;\n`;\n\nconst IdenticonIcon = styled(Identicon)`\n  margin-left: 12px;\n  margin-top: 8px;\n\n  img {\n    width: 48px;\n    height: 48px;\n    max-width: none;\n  }\n`;\n\nconst StyledLabel = styled.label`\n  margin-top: 8px;\n`;\n\nconst NetworkSelectWrapper = styled.div`\n  width: 100%;\n`;\n\nconst getStringifiedTx = (serializedTx: Buffer) =>\n  JSON.stringify(getTransactionFields(makeTransaction(serializedTx)), null, 2);\n\nclass BroadcastTx extends Component<Props> {\n  public state: State = {\n    stringifiedTransaction: '',\n    userInput: '',\n    inputError: '',\n    networkSelectError: '',\n    transaction: undefined\n  };\n\n  public handleSendClicked = () => {\n    const { goToNextStep, setTransaction, network } = this.props;\n    this.setState({ networkSelectError: '' });\n    if (!network) {\n      this.setState({ networkSelectError: translateRaw('SELECT_NETWORK_ERROR') });\n      return;\n    }\n\n    setTransaction(this.state.transaction);\n    goToNextStep();\n  };\n\n  public render() {\n    const { network, selectNetwork } = this.props;\n    const { userInput } = this.state;\n    const stateTransaction = userInput ? this.state.stringifiedTransaction : '';\n\n    return (\n      <ContentWrapper>\n        <Description>{translate('BROADCAST_TX_DESCRIPTION')}</Description>\n        <InputWrapper>\n          <InputField\n            label={translateRaw('SEND_SIGNED')}\n            value={userInput}\n            placeholder=\"0xf86b0284ee6b2800825208944bbeeb066ed09b7aed07bf39eee0460dfa26152088016345785d8a00008029a03ba7a0cc6d1756cd771f2119cf688b6d4dc9d37096089f0331fe0de0d1cc1254a02f7bcd19854c8d46f8de09e457aec25b127ab4328e1c0d24bfbff8702ee1f474\"\n            onChange={this.handleChange}\n            onBlur={this.validateField}\n            inputError={!stateTransaction ? this.state.inputError : ''}\n          />\n          {stateTransaction && <IdenticonIcon address={userInput} />}\n        </InputWrapper>\n        {stateTransaction && (\n          <React.Fragment>\n            {this.state.transaction && !this.state.transaction._chainId && (\n              <NetworkSelectWrapper>\n                <NetworkSelectDropdown network={network} onChange={selectNetwork} />\n                {this.state.networkSelectError && (\n                  <InlineErrorMsg>{this.state.networkSelectError}</InlineErrorMsg>\n                )}\n              </NetworkSelectWrapper>\n            )}\n            <StyledLabel>{translate('SEND_RAW')}</StyledLabel>\n            <CodeBlockWrapper>\n              <CodeBlock>{stateTransaction}</CodeBlock>\n            </CodeBlockWrapper>\n            <SendButton onClick={this.handleSendClicked}>{translateRaw('SEND_TRANS')}</SendButton>\n          </React.Fragment>\n        )}\n        {!stateTransaction && <PlaceholderButton>{translateRaw('SEND_TRANS')}</PlaceholderButton>}\n        <QRCodeWrapper>{stateTransaction && <QRCode data={stateTransaction} />}</QRCodeWrapper>\n      </ContentWrapper>\n    );\n  }\n\n  protected validateField = () => {\n    const { stringifiedTransaction } = this.state;\n    if (!!stringifiedTransaction || !this.state.userInput) {\n      this.setState({ inputError: '' });\n    } else {\n      this.setState({ inputError: translateRaw('BROADCAST_TX_INPUT_ERROR') });\n    }\n  };\n\n  protected handleChange = ({ currentTarget }: React.FormEvent<HTMLInputElement>) => {\n    const { setSignedTransaction } = this.props;\n    const { value } = currentTarget;\n    this.setState({ userInput: value, inputError: '', stringifiedTransaction: '' });\n    setSignedTransaction(value);\n\n    const bufferTransaction = toBuffer(value);\n    const tx = new EthTx(bufferTransaction);\n    if (tx.verifySignature()) {\n      const stringifiedTransaction = getStringifiedTx(bufferTransaction);\n      this.setState({ stringifiedTransaction, transaction: tx });\n    }\n  };\n}\n\nexport default BroadcastTx;\n","import React, { useState } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { History } from 'history';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, Tabs } from 'v2/components';\nimport { ROUTE_PATHS } from 'v2/config';\nimport { Tab } from 'v2/types';\nimport { BREAK_POINTS } from 'v2/theme';\nimport translate from 'translations';\nimport { tabsConfig } from './constants';\n\nconst { SCREEN_SM } = BREAK_POINTS;\n\nconst HeadingWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Heading = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst Title = styled.div`\n  margin-bottom: 10px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    width: 100%;\n  }\n`;\n\nconst SubTitle = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: normal;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst SubTitleMobile = styled.div`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: normal;\n  align-self: flex-start;\n\n  @media (min-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst TabsWrapper = styled.div`\n  max-height: 50px;\n  margin-top: 8px;\n  width: fit-content;\n`;\n\nconst tabClickRedirect = (history: History, url: string): void => {\n  history.push(url);\n};\n\nfunction SignAndVerifyMessage(props: RouteComponentProps<{}>) {\n  const [showSubtitle, setShowSubtitle] = useState(true);\n\n  const { history, location } = props;\n\n  const currentRoute = tabsConfig.find(\n    tabConfig => ROUTE_PATHS[tabConfig.key].path === location.pathname\n  );\n\n  const tabs: Tab[] = tabsConfig.map(tabConfig => ({\n    title: ROUTE_PATHS[tabConfig.key].title,\n    onClick: () => tabClickRedirect(history, ROUTE_PATHS[tabConfig.key].path)\n  }));\n\n  return currentRoute ? (\n    <ExtendedContentPanel\n      heading={\n        <HeadingWrapper>\n          <Heading>\n            <Title>{ROUTE_PATHS[currentRoute.key].title}</Title>\n            {showSubtitle && <SubTitleMobile>{translate(currentRoute.subtitle)}</SubTitleMobile>}\n            <TabsWrapper>\n              <Tabs\n                tabs={tabs}\n                selectedIndex={tabsConfig.findIndex(tab => tab.key === currentRoute.key)}\n              />\n            </TabsWrapper>\n          </Heading>\n          {showSubtitle && <SubTitle>{translate(currentRoute.subtitle)}</SubTitle>}\n        </HeadingWrapper>\n      }\n      width=\"850px\"\n    >\n      <currentRoute.component setShowSubtitle={setShowSubtitle} />\n    </ExtendedContentPanel>\n  ) : (\n    <></>\n  );\n}\n\nexport default withRouter(SignAndVerifyMessage);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate from 'translations';\nimport { ROUTE_PATHS } from 'v2/config';\n\nimport cryingWallet from 'common/assets/images/icn-sad-wallet.svg';\n\nconst PageNotFoundContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  width: 345px;\n  border-radius: 3px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n  background-color: #ffffff;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media (min-width: 700px) {\n    max-width: 1245px;\n    width: 100%;\n    margin-top: 6.5em;\n    margin-bottom: 6.5em;\n  }\n`;\n\nconst PageNotFoundContent = styled.div`\n  width: 340px;\n  flex-direction: column;\n  align-items: center;\n  padding: 18px 4px 26px 4px;\n  text-align: center;\n  justify-content: center;\n\n  @media (min-width: 700px) {\n    width: 503px;\n  }\n`;\nconst Header = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: ${props => props.theme.headline};\n`;\n\nconst Description = styled.p`\n  height: 48px;\n  font-size: 16px;\n  padding: 0 30px 0 30px;\n  color: ${props => props.theme.text};\n\n  @media (min-width: 700px) {\n    font-size: 18px;\n    font-weight: normal;\n    line-height: 1.5;\n  }\n`;\n\nconst ImgIcon = styled.img`\n  width: 300px;\n  margin: 0 0 28px 0;\n`;\n\nconst PrimaryButton = styled(Button)`\n  width: 315px;\n  margin-bottom: 15px;\n  font-size: 17px;\n  text-align: center;\n  white-space: nowrap;\n\n  @media (min-width: 700px) {\n    width: 230px;\n  }\n`;\n\nconst ButtonGroup = styled.div`\n  justify-content: center;\n  width: 340px;\n  flex-direction: column;\n  margin-top: 28px;\n\n  @media (min-width: 700px) {\n    width: 503px;\n  }\n`;\n\nconst PageNotFound: React.SFC = () => (\n  <PageNotFoundContainer>\n    <PageNotFoundContent>\n      <ImgIcon src={cryingWallet} />\n      <Header>{translate('404_HEADER')}</Header>\n      <Description>{translate('404_DESCRIPTION')}</Description>\n      <ButtonGroup>\n        <Link to={ROUTE_PATHS.ROOT.path}>\n          <PrimaryButton>{translate('404_BUTTON')}</PrimaryButton>\n        </Link>\n      </ButtonGroup>\n    </PageNotFoundContent>\n  </PageNotFoundContainer>\n);\n\nexport default PageNotFound;\n","import React, { useContext, useState } from 'react';\nimport { Formik, Form, Field, FieldProps, FormikProps } from 'formik';\nimport noop from 'lodash/noop';\nimport { Copyable, Heading, Input, Tooltip } from '@mycrypto/ui';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport Select, { Option } from 'react-select';\nimport styled from 'styled-components';\n\nimport {\n  buildEIP681EtherRequest,\n  buildEIP681TokenRequest\n} from 'v2/services/EthService/utils/formatters';\nimport { ContentPanel, QRCode } from 'v2/components';\nimport { AccountContext, AssetContext, getNetworkById } from 'v2/services/Store';\nimport { isValidAmount, truncate } from 'v2/utils';\nimport { ExtendedAccount as IExtendedAccount } from 'v2/types';\nimport { translate, translateRaw } from 'translations';\nimport questionToolTip from 'common/assets/images/icn-question.svg';\n\nimport { AccountDropdown } from './components';\n// Legacy\nimport receiveIcon from 'common/assets/images/icn-receive.svg';\n\nconst isAssetToken = (tokenType: string) => {\n  if (tokenType === 'base') {\n    return false;\n  }\n  return true;\n};\n\nconst QRDisplay = styled.div`\n  margin: auto;\n  width: 60%;\n`;\n\nconst SLabel = styled.label`\n  margin-bottom: 8px;\n  color: #333333;\n  font-weight: normal;\n`;\n\nconst Fieldset = styled.fieldset`\n  margin-bottom: 15px;\n`;\n\nconst FieldsetBox = styled.div`\n  padding: 12px 0;\n  background: #f6f8fa;\n  text-align: center;\n`;\n\nconst AssetFields = styled.div`\n  margin-bottom: 15px;\n  align-items: center;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  margin: 30px 0;\n  background: #e3edff;\n`;\n\nconst FullWidthInput = styled(Input)`\n  width: 100%;\n`;\n\nconst StyledSelect = styled(Select)`\n  width: 100%;\n  border-radius: 0.125em;\n  border: 0.125em solid rgba(63, 63, 68, 0.05);\n  outline: 0 0 0 0.25em rgba(0, 122, 153, 0.65);\n`;\n\nconst Amount = styled.div`\n  width: 100%;\n`;\n\nconst Asset = styled.div`\n  margin-top: 15px;\n  width: 100%;\n\n  .select-container {\n    transition: box-shadow 0.12s;\n    height: 54px;\n  }\n\n  .is-focused {\n    border: none;\n    outline: none;\n    box-shadow: 0 0 0 0.25em rgba(0, 122, 153, 0.65);\n  }\n  .Select-menu-outer {\n    max-height: 410px;\n    border: none;\n    box-shadow: 0 0 0 0.18em rgba(0, 122, 153, 0.65);\n    .Select-menu {\n      max-height: 400px;\n    }\n  }\n`;\n\nconst CodeHeader = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CodeHeading = styled(Heading)`\n  margin-top: 8px;\n`;\n\nconst ErrorMessage = styled.span`\n  color: red;\n  margin-top: 15px;\n  display: block;\n`;\n\nexport function ReceiveAssets({ history }: RouteComponentProps<{}>) {\n  const { accounts } = useContext(AccountContext);\n  const { assets } = useContext(AssetContext);\n  const [networkName, setNetworkName] = useState(accounts[0].networkId);\n  const network = getNetworkById(networkName);\n  const filteredAssets = network\n    ? assets\n        .filter(asset => asset.networkId === network.id)\n        .filter(asset => asset.type === 'base' || asset.type === 'erc20')\n    : [];\n  const assetOptions = filteredAssets.map(asset => ({ label: asset.name, id: asset.uuid }));\n\n  const [chosenAssetName, setAssetName] = useState(assetOptions[0].label);\n  const selectedAsset = filteredAssets.find(asset => asset.name === chosenAssetName);\n\n  const ethereum = assets.find(asset => asset.name === 'Ethereum');\n\n  const initialValues = {\n    amount: '0',\n    asset: { label: ethereum!.name, id: ethereum!.uuid },\n    recipientAddress: accounts[0]\n  };\n\n  const validateAmount = (amount: any) => {\n    let error;\n    if (selectedAsset) {\n      const { decimal } = selectedAsset;\n      if (isNaN(amount)) {\n        error = translateRaw('RECEIVE_FORM_ERROR_TYPE');\n      } else if (decimal && !isValidAmount(decimal)(amount)) {\n        error = translateRaw('RECEIVE_FORM_ERROR_AMOUNT');\n      }\n    }\n\n    return error;\n  };\n\n  return (\n    <ContentPanel\n      heading=\"Receive Assets\"\n      icon={receiveIcon}\n      onBack={() => history.push('/')}\n      width=\"500px;\"\n      mobileMaxWidth=\"100%;\"\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={noop}\n        render={({\n          values: { amount, recipientAddress },\n          errors\n        }: FormikProps<typeof initialValues>) => (\n          <Form>\n            <Fieldset>\n              <SLabel htmlFor=\"recipientAddress\">Recipient Address</SLabel>\n              <Field\n                name=\"recipientAddress\"\n                component={({ field, form }: FieldProps) => (\n                  <AccountDropdown\n                    name={field.name}\n                    value={field.value}\n                    accounts={accounts}\n                    onSelect={(option: IExtendedAccount) => {\n                      form.setFieldValue(field.name, option);\n                      if (option.networkId) {\n                        setNetworkName(option.networkId);\n                      }\n                    }}\n                  />\n                )}\n              />\n            </Fieldset>\n            <AssetFields>\n              <Amount>\n                <SLabel htmlFor=\"amount\">Amount</SLabel>\n                <Field\n                  name=\"amount\"\n                  validate={validateAmount}\n                  render={({ field, form }: FieldProps<typeof initialValues>) => (\n                    <FullWidthInput\n                      value={field.value}\n                      onChange={({ target: { value } }) => form.setFieldValue(field.name, value)}\n                      placeholder=\"0.00\"\n                    />\n                  )}\n                />\n              </Amount>\n              {errors.amount && <ErrorMessage>{errors.amount}</ErrorMessage>}\n              <Asset>\n                <SLabel htmlFor=\"asset\">Asset</SLabel>\n                <Field\n                  name=\"asset\"\n                  render={({ field, form }: FieldProps<typeof initialValues>) => (\n                    <StyledSelect\n                      name=\"Assets\"\n                      className=\"select-container\"\n                      options={assetOptions}\n                      value={field.value}\n                      onChange={(option: Option) => {\n                        form.setFieldValue(field.name, option);\n                        if (option.label) {\n                          setAssetName(option.label);\n                        }\n                      }}\n                    />\n                  )}\n                />\n              </Asset>\n            </AssetFields>\n            {!errors.amount && selectedAsset && recipientAddress.address && network && (\n              <>\n                <Divider />\n                <CodeHeader>\n                  <CodeHeading as=\"h3\">{translateRaw('RECEIVE_FORM_CODE_HEADER')}</CodeHeading>\n                  <Tooltip tooltip={translate('RECEIVE_FORM_TOOLTIP')}>\n                    <img className=\"Tool-tip-img\" src={questionToolTip} />\n                  </Tooltip>\n                </CodeHeader>\n\n                <Fieldset>\n                  <SLabel>QR Code</SLabel>\n                  <QRDisplay>\n                    <QRCode\n                      data={\n                        isAssetToken(selectedAsset.type) &&\n                        selectedAsset.contractAddress &&\n                        selectedAsset.decimal\n                          ? buildEIP681TokenRequest(\n                              recipientAddress.address,\n                              selectedAsset.contractAddress,\n                              network.chainId,\n                              amount,\n                              selectedAsset.decimal\n                            )\n                          : buildEIP681EtherRequest(\n                              recipientAddress.address,\n                              network.chainId,\n                              amount\n                            )\n                      }\n                    />\n                  </QRDisplay>\n                </Fieldset>\n                <Fieldset>\n                  <SLabel>Payment Code</SLabel>\n                  <FieldsetBox>\n                    <Copyable\n                      text={\n                        isAssetToken(selectedAsset.type) &&\n                        selectedAsset.contractAddress &&\n                        selectedAsset.decimal\n                          ? buildEIP681TokenRequest(\n                              recipientAddress.address,\n                              selectedAsset.contractAddress,\n                              network.chainId,\n                              amount,\n                              selectedAsset.decimal\n                            )\n                          : buildEIP681EtherRequest(\n                              recipientAddress.address,\n                              network.chainId,\n                              amount\n                            )\n                      }\n                      truncate={truncate}\n                    />\n                  </FieldsetBox>\n                </Fieldset>\n              </>\n            )}\n          </Form>\n        )}\n      />\n    </ContentPanel>\n  );\n}\n\nexport default withRouter(ReceiveAssets);\n","import React, { useContext, useState } from 'react';\nimport { Field, FieldProps, Form, Formik, FastField } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Input } from '@mycrypto/ui';\nimport _ from 'lodash';\nimport { formatEther, bigNumberify } from 'ethers/utils';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\n\nimport translate, { translateRaw } from 'translations';\nimport { WhenQueryExists } from 'components/renderCbs';\nimport { InlineErrorMsg } from 'v2/components';\nimport {\n  getNetworkById,\n  getBaseAssetByNetwork,\n  getBalanceFromAccount,\n  getAccountsByAsset,\n  StoreContext,\n  getTokenBalanceFromAccount\n} from 'v2/services/Store';\nimport {\n  Asset,\n  Network,\n  ExtendedAccount,\n  StoreAsset,\n  IFormikFields,\n  IStepComponentProps,\n  TTicker\n} from 'v2/types';\nimport {\n  getNonce,\n  hexToNumber,\n  getResolvedENSAddress,\n  isValidETHAddress,\n  gasStringsToMaxGasBN,\n  convertedToBaseUnit,\n  baseToConvertedUnit,\n  isValidPositiveNumber\n} from 'v2/services/EthService';\nimport { fetchGasPriceEstimates, getGasEstimate } from 'v2/services/ApiService';\nimport {\n  GAS_LIMIT_LOWER_BOUND,\n  GAS_LIMIT_UPPER_BOUND,\n  GAS_PRICE_GWEI_LOWER_BOUND,\n  GAS_PRICE_GWEI_UPPER_BOUND,\n  DEFAULT_ASSET_DECIMAL\n} from 'v2/config';\nimport { RatesContext } from 'v2/services/RatesProvider';\n\nimport TransactionFeeDisplay from 'v2/components/TransactionFlow/displays/TransactionFeeDisplay';\nimport {\n  AccountDropdown,\n  AssetDropdown,\n  EthAddressField,\n  GasLimitField,\n  GasPriceField,\n  GasPriceSlider,\n  NonceField,\n  DataField\n} from './fields';\nimport './SendAssetsForm.scss';\nimport {\n  validateGasLimitField,\n  validateGasPriceField,\n  validateNonceField,\n  validateDataField,\n  validateAmountField\n} from './validators/validators';\nimport { processFormForEstimateGas, isERC20Tx } from '../helpers';\nimport { weiToFloat } from 'v2/utils';\n\nexport const AdvancedOptionsButton = styled(Button)`\n  width: 100%;\n  color: #1eb8e7;\n  text-align: center;\n`;\n\nconst initialFormikValues: IFormikFields = {\n  receiverAddress: {\n    value: '',\n    display: ''\n  },\n  amount: '',\n  account: {} as ExtendedAccount, // should be renamed senderAccount\n  network: {} as Network, // Not a field move to state\n  asset: {} as StoreAsset,\n  txDataField: '0x',\n  gasEstimates: {\n    // Not a field, move to state\n    fastest: 20,\n    fast: 18,\n    standard: 12,\n    isDefault: false,\n    safeLow: 4,\n    time: Date.now(),\n    chainId: 1\n  },\n  gasPriceSlider: '20',\n  gasPriceField: '20',\n  gasLimitField: '21000',\n  advancedTransaction: false,\n  nonceField: '0'\n};\n\nconst QueryWarning: React.SFC<{}> = () => (\n  <WhenQueryExists\n    whenQueryExists={\n      <div className=\"alert alert-info\">\n        <p>{translate('WARN_SEND_LINK')}</p>\n      </div>\n    }\n  />\n);\n\nconst SendAssetsSchema = Yup.object().shape({\n  amount: Yup.number()\n    .min(0, translateRaw('ERROR_0'))\n    .required(translateRaw('REQUIRED')),\n  account: Yup.object().required(translateRaw('REQUIRED')),\n  receiverAddress: Yup.object().required(translateRaw('REQUIRED')),\n  gasLimitField: Yup.number()\n    .min(GAS_LIMIT_LOWER_BOUND, translateRaw('ERROR_8'))\n    .max(GAS_LIMIT_UPPER_BOUND, translateRaw('ERROR_8'))\n    .required(translateRaw('REQUIRED')),\n  gasPriceField: Yup.number()\n    .min(GAS_PRICE_GWEI_LOWER_BOUND, translateRaw('ERROR_10'))\n    .max(GAS_PRICE_GWEI_UPPER_BOUND, translateRaw('ERROR_10'))\n    .required(translateRaw('REQUIRED')),\n  nonceField: Yup.number()\n    .integer(translateRaw('ERROR_11'))\n    .min(0, translateRaw('ERROR_11'))\n    .required(translateRaw('REQUIRED'))\n});\n\nexport default function SendAssetsForm({\n  // txConfig // @TODO Use prop in case goToPrevStep or URI prefill.\n  onComplete\n}: IStepComponentProps) {\n  const { accounts, assets } = useContext(StoreContext);\n  const { getRate } = useContext(RatesContext);\n  const [isEstimatingGasLimit, setIsEstimatingGasLimit] = useState(false); // Used to indicate that interface is currently estimating gas.\n  const [isEstimatingNonce, setIsEstimatingNonce] = useState(false); // Used to indicate that interface is currently estimating gas.\n  const [isResolvingENSName, setIsResolvingENSName] = useState(false); // Used to indicate recipient-address is ENS name that is currently attempting to be resolved.\n  const [baseAsset, setBaseAsset] = useState({} as Asset);\n\n  return (\n    <div className=\"SendAssetsForm\">\n      <Formik\n        initialValues={initialFormikValues}\n        validationSchema={SendAssetsSchema}\n        onSubmit={fields => {\n          onComplete(fields);\n        }}\n        render={({\n          errors,\n          setFieldValue,\n          setFieldTouched,\n          touched,\n          values,\n          handleChange,\n          submitForm\n        }) => {\n          const toggleAdvancedOptions = () => {\n            setFieldValue('advancedTransaction', !values.advancedTransaction);\n          };\n\n          const handleGasEstimate = async () => {\n            if (\n              !(\n                !values ||\n                !values.network ||\n                !values.asset ||\n                !values.receiverAddress ||\n                !isValidETHAddress(values.receiverAddress.value) ||\n                !values.account ||\n                !isValidPositiveNumber(values.amount)\n              )\n            ) {\n              setIsEstimatingGasLimit(true);\n              const finalTx = processFormForEstimateGas(values);\n              const gas = await getGasEstimate(values.network, finalTx);\n              setFieldValue('gasLimitField', hexToNumber(gas));\n              setFieldTouched('amount');\n              setIsEstimatingGasLimit(false);\n            } else {\n              return;\n            }\n          };\n\n          const handleENSResolve = async (name: string) => {\n            if (!values || !values.network) {\n              setIsResolvingENSName(false);\n              return;\n            }\n            setIsResolvingENSName(true);\n            const resolvedAddress =\n              (await getResolvedENSAddress(values.network, name)) ||\n              '0x0000000000000000000000000000000000000000';\n            setIsResolvingENSName(false);\n            setFieldValue('receiverAddress', { ...values.receiverAddress, value: resolvedAddress });\n            setIsResolvingENSName(false);\n          };\n\n          const handleFieldReset = () => {\n            setFieldValue('account', undefined);\n          };\n\n          const setAmountFieldToAssetMax = () => {\n            if (values.asset && values.account && baseAsset) {\n              const isERC20 = isERC20Tx(values.asset);\n              const balance = isERC20\n                ? weiToFloat(\n                    bigNumberify(getTokenBalanceFromAccount(values.account, values.asset)),\n                    values.asset.decimal\n                  ).toString()\n                : formatEther(getBalanceFromAccount(values.account));\n              const gasPrice = values.advancedTransaction\n                ? values.gasPriceField\n                : values.gasPriceSlider;\n              const amount = isERC20 // subtract gas cost from balance when sending a base asset\n                ? balance\n                : baseToConvertedUnit(\n                    new BN(convertedToBaseUnit(balance.toString(), DEFAULT_ASSET_DECIMAL))\n                      .sub(gasStringsToMaxGasBN(gasPrice, values.gasLimitField))\n                      .toString(),\n                    DEFAULT_ASSET_DECIMAL\n                  );\n              setFieldValue('amount', amount);\n              handleGasEstimate();\n            }\n          };\n\n          const handleNonceEstimate = async (account: ExtendedAccount) => {\n            if (!values || !values.network || !account) {\n              return;\n            }\n            setIsEstimatingNonce(true);\n            const nonce: number = await getNonce(values.network, account);\n            setFieldValue('nonceField', nonce.toString());\n            setIsEstimatingNonce(false);\n          };\n          return (\n            <Form className=\"SendAssetsForm\">\n              <QueryWarning />\n              {/* Asset */}\n              <fieldset className=\"SendAssetsForm-fieldset\">\n                <label htmlFor=\"asset\" className=\"input-group-header\">\n                  {translate('X_ASSET')}\n                </label>\n                <FastField\n                  name=\"asset\" // Need a way to spread option, name, symbol on sharedConfig for assets\n                  component={({ field, form }: FieldProps) => (\n                    <AssetDropdown\n                      name={field.name}\n                      value={field.value}\n                      assets={assets()}\n                      onSelect={(option: StoreAsset) => {\n                        form.setFieldValue('asset', option); //if this gets deleted, it no longer shows as selected on interface (find way to not need this)\n                        //TODO get assetType onChange\n                        handleFieldReset();\n                        if (option.networkId) {\n                          fetchGasPriceEstimates(option.networkId).then(data => {\n                            form.setFieldValue('gasEstimates', data);\n                            form.setFieldValue('gasPriceSlider', data.fast);\n                          });\n                          const network = getNetworkById(option.networkId);\n                          form.setFieldValue('network', network || {});\n                          if (network) {\n                            setBaseAsset(getBaseAssetByNetwork(network) || ({} as Asset));\n                          }\n                        }\n                      }}\n                    />\n                  )}\n                />\n              </fieldset>\n              {/* Sender Address */}\n              <fieldset className=\"SendAssetsForm-fieldset\">\n                <label htmlFor=\"account\" className=\"input-group-header\">\n                  {translate('X_ADDRESS')}\n                </label>\n                <Field\n                  name=\"account\"\n                  value={values.account}\n                  component={({ field, form }: FieldProps) => {\n                    const accountsWithAsset = getAccountsByAsset(accounts, values.asset);\n                    return (\n                      <AccountDropdown\n                        name={field.name}\n                        value={field.value}\n                        accounts={accountsWithAsset}\n                        onSelect={(option: ExtendedAccount) => {\n                          form.setFieldValue('account', option); //if this gets deleted, it no longer shows as selected on interface, would like to set only object keys that are needed instead of full object\n                          handleNonceEstimate(option);\n                          handleGasEstimate();\n                        }}\n                      />\n                    );\n                  }}\n                />\n              </fieldset>\n              <fieldset className=\"SendAssetsForm-fieldset\">\n                <label htmlFor=\"receiverAddress\" className=\"input-group-header\">\n                  {translate('SEND_ADDR')}\n                </label>\n                <EthAddressField\n                  fieldName=\"receiverAddress.display\"\n                  handleENSResolve={handleENSResolve}\n                  error={errors && errors.receiverAddress && errors.receiverAddress.display}\n                  touched={touched}\n                  handleGasEstimate={handleGasEstimate}\n                  network={values.network}\n                  isLoading={isResolvingENSName}\n                  placeholder=\"Enter an Address or Contact\"\n                />\n              </fieldset>\n              {/* Amount */}\n              <fieldset className=\"SendAssetsForm-fieldset\">\n                <label htmlFor=\"amount\" className=\"input-group-header label-with-action\">\n                  <div>{translate('SEND_ASSETS_AMOUNT_LABEL')}</div>\n                  <div className=\"label-action\" onClick={setAmountFieldToAssetMax}>\n                    {translateRaw('SEND_ASSETS_AMOUNT_LABEL_ACTION').toLowerCase()}\n                  </div>\n                </label>\n                <Field\n                  name=\"amount\"\n                  validate={validateAmountField}\n                  render={({ field, form }: FieldProps) => {\n                    return (\n                      <>\n                        <Input\n                          {...field}\n                          value={field.value}\n                          onBlur={() => {\n                            form.setFieldTouched('amount');\n                            handleGasEstimate();\n                          }}\n                          placeholder={'0.00'}\n                        />\n                        {errors && touched && touched.amount ? (\n                          <InlineErrorMsg className=\"SendAssetsForm-errors\">\n                            {errors.amount}\n                          </InlineErrorMsg>\n                        ) : null}\n                      </>\n                    );\n                  }}\n                />\n              </fieldset>\n              {/* You'll Send */}\n              {/* <fieldset className=\"SendAssetsForm-fieldset SendAssetsForm-fieldset-youllSend\">\n                <label>You'll Send</label>\n                <TransactionValueDisplay\n                  amount={values.amount || '0.00'}\n                  ticker={\n                    values.asset && values.asset.ticker\n                      ? (values.asset.ticker as TSymbol)\n                      : ('ETH' as TSymbol)\n                  }\n                  fiatAsset={{ ticker: 'USD' as TSymbol, exchangeRate: '250' }}\n                />\n              </fieldset> */}\n              {/* Transaction Fee */}\n              <fieldset className=\"SendAssetsForm-fieldset\">\n                <label htmlFor=\"transactionFee\" className=\"SendAssetsForm-fieldset-transactionFee\">\n                  <div>Transaction Fee</div>\n                  {/* TRANSLATE THIS */}\n                  <TransactionFeeDisplay\n                    baseAsset={baseAsset}\n                    gasLimitToUse={values.gasLimitField}\n                    gasPriceToUse={\n                      values.advancedTransaction ? values.gasPriceField : values.gasPriceSlider\n                    }\n                    fiatAsset={{\n                      fiat: 'USD',\n                      value: (\n                        getRate((baseAsset.ticker as TTicker) || ('ETH' as TTicker)) || 0\n                      ).toString(),\n                      symbol: '$'\n                    }}\n                  />\n                  {/* TRANSLATE THIS */}\n                </label>\n                {!values.advancedTransaction && (\n                  <GasPriceSlider\n                    handleChange={(e: string) => {\n                      handleGasEstimate();\n                      handleChange(e);\n                    }}\n                    gasPrice={values.gasPriceSlider}\n                    gasEstimates={values.gasEstimates}\n                  />\n                )}\n              </fieldset>\n              {/* Advanced Options */}\n              <div className=\"SendAssetsForm-advancedOptions\">\n                <AdvancedOptionsButton basic={true} onClick={toggleAdvancedOptions}>\n                  {values.advancedTransaction ? 'Hide' : 'Show'} Advanced Options\n                </AdvancedOptionsButton>\n                {values.advancedTransaction && (\n                  <div className=\"SendAssetsForm-advancedOptions-content\">\n                    <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData\">\n                      <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData-price\">\n                        <label htmlFor=\"gasPrice\">{translate('OFFLINE_STEP2_LABEL_3')}</label>\n                        <Field\n                          name=\"gasPriceField\"\n                          validate={validateGasPriceField}\n                          render={({ field, form }: FieldProps<IFormikFields>) => (\n                            <GasPriceField\n                              onChange={(option: string) => {\n                                form.setFieldValue('gasPriceField', option);\n                              }}\n                              name={field.name}\n                              value={field.value}\n                            />\n                          )}\n                        />\n                        {errors && errors.gasPriceField && (\n                          <InlineErrorMsg>{errors.gasPriceField}</InlineErrorMsg>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData\">\n                      <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData-limit\">\n                        <label htmlFor=\"gasLimit\" className=\"input-group-header label-with-action\">\n                          <div>{translate('OFFLINE_STEP2_LABEL_4')}</div>\n                          <div className=\"label-action\" onClick={handleGasEstimate}>\n                            Estimate\n                          </div>\n                        </label>\n\n                        <Field\n                          name=\"gasLimitField\"\n                          validate={validateGasLimitField}\n                          render={({ field, form }: FieldProps<IFormikFields>) => (\n                            <GasLimitField\n                              onChange={(option: string) => {\n                                form.setFieldValue('gasLimitField', option);\n                              }}\n                              name={field.name}\n                              value={field.value}\n                            />\n                          )}\n                        />\n                        {errors && errors.gasLimitField && (\n                          <InlineErrorMsg>{errors.gasLimitField}</InlineErrorMsg>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData\">\n                      <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData-nonce\">\n                        <label htmlFor=\"nonce\" className=\"input-group-header label-with-action\">\n                          <div>Nonce (?)</div>\n                          <div\n                            className=\"label-action\"\n                            onClick={() => handleNonceEstimate(values.account)}\n                          >\n                            Estimate\n                          </div>\n                        </label>\n\n                        <Field\n                          name=\"nonceField\"\n                          validate={validateNonceField}\n                          render={({ field, form }: FieldProps<IFormikFields>) => (\n                            <NonceField\n                              onChange={(option: string) => {\n                                form.setFieldValue('nonceField', option);\n                              }}\n                              name={field.name}\n                              value={field.value}\n                            />\n                          )}\n                        />\n                        {errors && errors.nonceField && (\n                          <InlineErrorMsg>{errors.nonceField}</InlineErrorMsg>\n                        )}\n                      </div>\n                    </div>\n\n                    <fieldset className=\"SendAssetsForm-fieldset\">\n                      <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData\">\n                        <div className=\"SendAssetsForm-advancedOptions-content-priceLimitNonceData-data\">\n                          <label htmlFor=\"data\">Data{/* TRANSLATE THIS */}</label>\n                          <Field\n                            name=\"txDataField\"\n                            validate={validateDataField}\n                            render={({ field, form }: FieldProps<IFormikFields>) => (\n                              <DataField\n                                onChange={(option: string) => {\n                                  form.setFieldValue('txDataField', option);\n                                }}\n                                errors={errors.txDataField}\n                                name={field.name}\n                                value={field.value}\n                              />\n                            )}\n                          />\n                        </div>\n                      </div>\n                    </fieldset>\n                  </div>\n                )}\n              </div>\n\n              <Button\n                type=\"submit\"\n                onClick={() => {\n                  submitForm();\n                }}\n                disabled={isEstimatingGasLimit || isResolvingENSName || isEstimatingNonce}\n                className=\"SendAssetsForm-next\"\n              >\n                Next{/* TRANSLATE THIS */}\n              </Button>\n            </Form>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate, { translateRaw } from 'translations';\nimport { ExtendedContentPanel } from 'v2/components';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\n\nimport mainImage from 'common/assets/images/icn-forgot-password.svg';\n\nconst ActionButton = styled(Button)`\n  width: 320px;\n  margin-top: 10px;\n  font-size: 18px;\n  padding-left: 5px;\n  padding-right: 5px;\n\n  @media (min-width: 700px) {\n    width: 420px;\n  }\n`;\n\nconst FormWrapper = styled.div`\n  margin: 14px 0;\n`;\n\nconst AditionalDescription = styled.p`\n  font-size: 18px;\n  font-weight: normal;\n  margin-top: 28px;\n  line-height: 1.5;\n  padding: 0 30px;\n  color: ${props => props.theme.text};\n\n  @media (max-width: 700px) {\n    padding: 0 8px;\n  }\n`;\n\ntype Props = RouteComponentProps<{}>;\n\nclass ScreenLockForgotPassword extends Component<Props> {\n  public handleImportWalletSettingsClick = () => {\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.SCREEN_LOCK,\n      'Import Wallet Settings button clicked'\n    );\n  };\n\n  public handleStartOverClick = () => {\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.SCREEN_LOCK, 'Start Over button clicked');\n  };\n\n  public render() {\n    return (\n      <ExtendedContentPanel\n        onBack={this.props.history.goBack}\n        heading={translateRaw('SCREEN_LOCK_FORGOT_PASSWORD_HEADING')}\n        description={translateRaw('SCREEN_LOCK_FORGOT_PASSWORD_DESCRIPTION')}\n        image={mainImage}\n        showImageOnTop={true}\n        centered={true}\n        className=\"\"\n      >\n        <AditionalDescription>\n          {translate('SCREEN_LOCK_FORGOT_PASSWORD_ADDITIONAL_DESCRIPTION')}\n        </AditionalDescription>\n        <FormWrapper>\n          <ActionButton onClick={this.handleImportWalletSettingsClick}>\n            {translate('SCREEN_LOCK_FORGOT_PASSWORD_ADDITIONAL_IMPORT')}\n          </ActionButton>\n          <ActionButton onClick={this.handleStartOverClick}>\n            {translate('SCREEN_LOCK_FORGOT_PASSWORD_ADDITIONAL_START_OVER')}\n          </ActionButton>\n        </FormWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n\nexport default withRouter<Props>(ScreenLockForgotPassword);\n","import React, { Component } from 'react';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate, { translateRaw } from 'translations';\nimport { ExtendedContentPanel, InputField } from 'v2/components';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { ScreenLockContext } from './ScreenLockProvider';\n\nimport mainImage from 'common/assets/images/icn-unlock-wallet.svg';\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 18px 4px 26px 4px;\n`;\n\nconst PrimaryButton = styled(Button)`\n  width: 320px;\n  margin-top: 10px;\n  font-size: 18px;\n\n  @media (min-width: 700px) {\n    width: 420px;\n  }\n`;\n\nconst FormWrapper = styled.form`\n  margin-top: 15px;\n  max-width: 320px;\n\n  @media (min-width: 700px) {\n    max-width: 420px;\n  }\n`;\n\nconst BottomActions = styled.div`\n  margin-top: 35px;\n  line-height: 2.5;\n`;\ntype Props = RouteComponentProps<{}>;\n\nclass ScreenLockLocked extends Component<Props> {\n  public state = { password: '', passwordError: '' };\n\n  public onPasswordChanged = (event: any) => {\n    this.setState({ password: event.target.value, passwordError: '' });\n  };\n\n  public handleUnlockWalletClick = async (decryptWithPassword: any, e: any) => {\n    e.preventDefault();\n    const response = await decryptWithPassword(this.state.password);\n    if (response === false) {\n      this.setState({ passwordError: translate('SCREEN_LOCK_LOCKED_WRONG_PASSWORD') });\n    }\n  };\n\n  public trackRecomendationClick = () => {\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.SCREEN_LOCK,\n      'Why do we recommend link clicked'\n    );\n  };\n\n  public render() {\n    return (\n      <ScreenLockContext.Consumer>\n        {({ decryptWithPassword }) => (\n          <ExtendedContentPanel\n            heading={translateRaw('SCREEN_LOCK_LOCKED_HEADING')}\n            description={translateRaw('SCREEN_LOCK_LOCKED_DESCRIPTION')}\n            image={mainImage}\n            showImageOnTop={true}\n            centered={true}\n            className=\"\"\n          >\n            <ContentWrapper>\n              <FormWrapper onSubmit={e => this.handleUnlockWalletClick(decryptWithPassword, e)}>\n                <InputField\n                  label={translateRaw('SCREEN_LOCK_LOCKED_PASSWORD_LABEL')}\n                  value={this.state.password}\n                  onChange={this.onPasswordChanged}\n                  inputError={this.state.passwordError}\n                  type={'password'}\n                />\n                <PrimaryButton type=\"submit\">\n                  {translate('SCREEN_LOCK_LOCKED_UNLOCK')}\n                </PrimaryButton>\n              </FormWrapper>\n              <BottomActions>\n                <div>\n                  {translate('SCREEN_LOCK_LOCKED_FORGOT_PASSWORD')}{' '}\n                  <Link to=\"/screen-lock/forgot-password\">\n                    {translate('SCREEN_LOCK_LOCKED_IMPORT_SETTINGS')}\n                  </Link>\n                </div>\n                <div>\n                  {translate('SCREEN_LOCK_LOCKED_RECOMMEND_LOCK')}{' '}\n                  <Link onClick={this.trackRecomendationClick} to=\"/dashboard\">\n                    {translate('SCREEN_LOCK_LOCKED_LEARN_MORE')}\n                  </Link>\n                </div>\n              </BottomActions>\n            </ContentWrapper>\n          </ExtendedContentPanel>\n        )}\n      </ScreenLockContext.Consumer>\n    );\n  }\n}\n\nexport default withRouter<Props>(ScreenLockLocked);\n","import React, { Component } from 'react';\nimport { withRouter, RouteComponentProps, Link } from 'react-router-dom';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport translate, { translateRaw } from 'translations';\n\nimport { ExtendedContentPanel, InputField } from 'v2/components';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { ScreenLockContext } from './ScreenLockProvider';\n\n// Legacy\nimport mainImage from 'common/assets/images/icn-create-pw.svg';\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 18px 4px 26px 4px;\n`;\n\nconst ActionButton = styled(Button)`\n  width: 320px;\n  margin-top: 10px;\n  font-size: 18px;\n\n  @media (min-width: 700px) {\n    width: 420px;\n  }\n`;\n\nconst FormWrapper = styled.form`\n  margin-top: 15px;\n  max-width: 420px;\n`;\n\nconst BottomActions = styled.div`\n  margin-top: 30px;\n  line-height: 2.5;\n`;\n\ntype Props = RouteComponentProps<{}>;\n\nclass ScreenLockNew extends Component<Props> {\n  public state = { password1: '', password2: '', password1Error: '', password2Error: '' };\n\n  public validateForm = () => {\n    this.setState({ password1Error: '', password2Error: '' });\n    const { password1, password2 } = this.state;\n    const minLength = 8;\n\n    if (password1.length > 0 && password1.length < minLength) {\n      this.setState({\n        password1Error: translate('INPUT_ERROR_PASSWORD_TOO_SHORT')\n      });\n    }\n\n    if (password1 !== password2) {\n      if (password2.length > 0) {\n        this.setState({\n          password2Error: translate('INPUT_ERROR_PASSWORDS_DONT_MATCH')\n        });\n      }\n    }\n  };\n\n  public onPassword1Changed = (event: any) => {\n    this.setState({ password1: event.target.value });\n  };\n\n  public onPassword2Changed = (event: any) => {\n    this.setState({ password2: event.target.value });\n  };\n\n  public handleCreatePasswordClicked = (\n    encryptWithPassword: (password: string, hashed: boolean) => void\n  ) => (e: any) => {\n    e.preventDefault();\n\n    const { password1, password2, password1Error, password2Error } = this.state;\n    if (\n      !(password1Error || password2Error) &&\n      !(password1.length === 0 || password2.length === 0) &&\n      password1 === password2\n    ) {\n      encryptWithPassword(password1, false);\n      AnalyticsService.instance.track(\n        ANALYTICS_CATEGORIES.SCREEN_LOCK,\n        'User created a screenlock'\n      );\n    }\n  };\n\n  public onBack = () => {\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.SCREEN_LOCK, 'Back button clicked');\n    this.props.history.goBack();\n  };\n\n  public trackRecomendationClick = () => {\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.SCREEN_LOCK,\n      'Why do we recommend link clicked'\n    );\n  };\n\n  public render() {\n    return (\n      <ScreenLockContext.Consumer>\n        {({ encryptWithPassword }) => (\n          <ExtendedContentPanel\n            onBack={this.onBack}\n            heading={translateRaw('SCREEN_LOCK_NEW_HEADING')}\n            description={translateRaw('SCREEN_LOCK_NEW_DESCRIPTION')}\n            image={mainImage}\n            showImageOnTop={true}\n            centered={true}\n            className=\"\"\n          >\n            <ContentWrapper>\n              <FormWrapper onSubmit={this.handleCreatePasswordClicked(encryptWithPassword)}>\n                <InputField\n                  label={translateRaw('SCREEN_LOCK_NEW_PASSWORD_LABEL')}\n                  value={this.state.password1}\n                  onChange={this.onPassword1Changed}\n                  validate={this.validateForm}\n                  inputError={this.state.password1Error}\n                  type={'password'}\n                />\n                <InputField\n                  label={translateRaw('SCREEN_LOCK_NEW_CONFIRM_PASSWORD_LABEL')}\n                  value={this.state.password2}\n                  onChange={this.onPassword2Changed}\n                  validate={this.validateForm}\n                  inputError={this.state.password2Error}\n                  type={'password'}\n                />\n                <ActionButton type=\"submit\">\n                  {translate('SCREEN_LOCK_NEW_CREATE_PASSWORD_BUTTON')}\n                </ActionButton>\n              </FormWrapper>\n              <BottomActions>\n                <div>\n                  {translate('SCREEN_LOCK_LOCKED_RECOMMEND_LOCK')}{' '}\n                  <Link onClick={this.trackRecomendationClick} to=\"/dashboard\">\n                    {translate('SCREEN_LOCK_LOCKED_LEARN_MORE')}\n                  </Link>\n                </div>\n              </BottomActions>\n            </ContentWrapper>\n          </ExtendedContentPanel>\n        )}\n      </ScreenLockContext.Consumer>\n    );\n  }\n}\n\nexport default withRouter<Props>(ScreenLockNew);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate from 'translations';\nimport sadWallet from 'common/assets/images/icn-sad-wallet.svg';\n\nconst NoAccountsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-content: center;\n  width: 345px;\n  height: 506px;\n  border-radius: 3px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n  background-color: #ffffff;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media (min-width: 700px) {\n    width: 1245px;\n    height: 505px;\n    margin-top: 6.5em;\n    margin-bottom: 6.5em;\n  }\n`;\n\nconst NoAccountsContent = styled.div`\n  width: 340px;\n  flex-direction: column;\n  align-items: center;\n  padding: 18px 4px 26px 4px;\n  text-align: center;\n  justify-content: center;\n\n  @media (min-width: 700px) {\n    width: 503px;\n    margin-top: 45px;\n  }\n`;\nconst Header = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: ${props => props.theme.headline};\n`;\n\nconst Description = styled.p`\n  height: 48px;\n  font-size: 16px;\n  padding: 0 30px 0 30px;\n  color: ${props => props.theme.text};\n\n  @media (min-width: 700px) {\n    font-size: 18px;\n    font-weight: normal;\n    line-height: 1.5;\n  }\n`;\n\nconst ImgIcon = styled.img`\n  width: 130px;\n  height: 99px;\n  margin: 21px 0 28px 0;\n`;\n\nconst PrimaryButton = styled(Button)`\n  width: 315px;\n  margin-bottom: 15px;\n  font-size: 17px;\n  text-align: center;\n  white-space: nowrap;\n\n  @media (min-width: 700px) {\n    width: 230px;\n  }\n`;\n\nconst WhiteButtonFirst = styled(Button)`\n  width: 315px;\n  margin-bottom: 15px;\n  font-size: 17px;\n  white-space: nowrap;\n  text-align: center;\n  padding-left: 1.25;\n\n  @media (min-width: 700px) {\n    width: 230px;\n\n    &:first-of-type {\n      margin-right: 20px;\n  }\n`;\n\nconst WhiteButtonSecond = styled(Button)`\n  width: 315px;\n  margin-bottom: 15px;\n  font-size: 17px;\n  white-space: nowrap;\n  text-align: center;\n  padding-left: 1.1rem;\n\n  @media (min-width: 700px) {\n    width: 230px;\n\n`;\n\nconst ButtonGroup = styled.div`\n  justify-content: center;\n  width: 340px;\n  flex-direction: column;\n  margin-top: 20px;\n\n  @media (min-width: 700px) {\n    width: 503px;\n  }\n`;\n\nexport default class NoAccounts extends Component {\n  public state = {\n    redirect: false\n  };\n  public handleClick() {\n    this.setState({ redirect: true });\n  }\n  public render() {\n    return (\n      <NoAccountsContainer>\n        <NoAccountsContent className=\"no-accounts\">\n          <ImgIcon src={sadWallet} />\n          <Header>{translate('NO_ACCOUNTS_HEADER')}</Header>\n          <Description>{translate('NO_ACCOUNTS_DESCRIPTION')}</Description>\n          <ButtonGroup>\n            <Link to=\"/add-account\">\n              <WhiteButtonFirst secondary={true} onClick={this.handleClick}>\n                Add Existing Account\n              </WhiteButtonFirst>\n            </Link>\n            {/* Link to import settings page */}\n            <WhiteButtonSecond secondary={true}>Import MyCrypto Settings</WhiteButtonSecond>\n          </ButtonGroup>\n          <Link to=\"/create-wallet\">\n            <PrimaryButton>Create New Account</PrimaryButton>\n          </Link>\n        </NoAccountsContent>\n      </NoAccountsContainer>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Button } from '@mycrypto/ui';\nimport cloneDeep from 'lodash/cloneDeep';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel } from 'v2/components';\nimport { AnalyticsService, ANALYTICS_CATEGORIES, GithubService } from 'v2/services/ApiService';\nimport { GITHUB_RELEASE_NOTES_URL, DOWNLOAD_MYCRYPTO_LINK, OS } from 'v2/config';\nimport { getFeaturedOS } from 'v2/utils';\nimport { AppDownloadItem } from './types';\nimport translate from 'translations';\n\n// Legacy\nimport desktopAppIcon from 'common/assets/images/icn-desktop-app.svg';\n\nconst DownloadAppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 18px 4px 26px 4px;\n  text-align: center;\n`;\n\nconst Header = styled.p`\n  font-size: 32px;\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: ${props => props.theme.headline};\n`;\n\nconst Description = styled.p`\n  font-size: 18px;\n  font-weight: normal;\n  line-height: 1.5;\n  padding: 0 30px 0 30px;\n  color: ${props => props.theme.text};\n`;\n\nconst ImgIcon = styled.img`\n  width: 135px;\n  height: 135px;\n  margin: 21px 0 28px 0;\n`;\n\nconst PrimaryButton = styled(Button)`\n  width: 320px;\n  margin-bottom: 15px;\n  font-size: 18px;\n\n  @media (min-width: 700px) {\n    width: 420px;\n  }\n`;\n\nconst OptionGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: 700px) {\n    flex-direction: row;\n  }\n`;\n\nconst Option = styled(Button)`\n  width: 320px;\n  margin-bottom: 15px;\n  font-size: 17px;\n\n  @media (min-width: 700px) {\n    width: 200px;\n\n    &:first-of-type {\n      margin-right: 20px;\n    }\n  }\n`;\n\nconst Footer = styled.p`\n  font-size: 16px;\n  font-weight: normal;\n  line-height: normal;\n  margin: 0;\n\n  a {\n    color: ${props => props.theme.link};\n    text-decoration: none;\n    font-weight: bold;\n\n    :hover {\n      color: ${props => props.theme.linkHover};\n    }\n  }\n`;\n\ntype Props = RouteComponentProps<{}>;\n\nconst DEFAULT_LINK = GITHUB_RELEASE_NOTES_URL;\nconst featuredOS = getFeaturedOS();\n\ninterface State {\n  downloadItems: AppDownloadItem[];\n}\n\nexport class DownloadApp extends Component<Props, State> {\n  public state: State = {\n    downloadItems: [\n      {\n        OS: OS.WINDOWS,\n        name: 'Windows',\n        link: DEFAULT_LINK\n      },\n      {\n        OS: OS.MAC,\n        name: 'Mac',\n        link: DEFAULT_LINK\n      },\n      {\n        OS: OS.LINUX64,\n        name: 'Linux (64-bit)',\n        link: DEFAULT_LINK\n      },\n      {\n        OS: OS.LINUX32,\n        name: 'Linux (32-bit)',\n        link: DEFAULT_LINK\n      },\n      {\n        OS: OS.STANDALONE,\n        name: 'Stand Alone',\n        link: DEFAULT_LINK\n      }\n    ]\n  };\n\n  public async componentDidMount() {\n    try {\n      const { releaseUrls } = await GithubService.instance.getReleasesInfo();\n      const downloadItems: AppDownloadItem[] = cloneDeep(this.state.downloadItems);\n\n      downloadItems.forEach(downloadItem => {\n        downloadItem.link = releaseUrls[downloadItem.OS] || DEFAULT_LINK;\n      });\n\n      this.setState({ downloadItems });\n      this.trackUserLandsOnComponent(\n        downloadItems.find(x => x.OS === featuredOS) || downloadItems[0]\n      );\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  public render() {\n    const { downloadItems } = this.state;\n    const primaryDownload = downloadItems.find(x => x.OS === featuredOS) || downloadItems[0];\n    const secondaryDownloads = downloadItems.filter(x => x !== primaryDownload);\n\n    return (\n      <ExtendedContentPanel onBack={this.props.history.goBack} className=\"\">\n        <DownloadAppWrapper>\n          <Header>{translate('DOWNLOAD_APP_TITLE')}</Header>\n          <Description>{translate('DOWNLOAD_APP_DESCRIPTION')}</Description>\n          <ImgIcon src={desktopAppIcon} alt=\"Desktop\" />\n          <PrimaryButton onClick={() => this.openDownloadLink(primaryDownload)}>\n            {translate('DOWNLOAD_APP_DOWNLOAD_BUTTON')} {primaryDownload.name}\n          </PrimaryButton>\n          <OptionGroup>\n            <Option secondary={true} onClick={() => this.openDownloadLink(secondaryDownloads[0])}>\n              {secondaryDownloads[0].name}\n            </Option>\n            <Option secondary={true} onClick={() => this.openDownloadLink(secondaryDownloads[1])}>\n              {secondaryDownloads[1].name}\n            </Option>\n          </OptionGroup>\n          <OptionGroup>\n            <Option secondary={true} onClick={() => this.openDownloadLink(secondaryDownloads[2])}>\n              {secondaryDownloads[2].name}\n            </Option>\n            <Option secondary={true} onClick={() => this.openDownloadLink(secondaryDownloads[3])}>\n              {secondaryDownloads[3].name}\n            </Option>\n          </OptionGroup>\n          <Footer>\n            {translate('DOWNLOAD_APP_FOOTER_INFO')}{' '}\n            <a\n              onClick={this.trackLearnMoreClick}\n              href={DOWNLOAD_MYCRYPTO_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {translate('DOWNLOAD_APP_FOOTER_INFO_LINK')}\n            </a>\n          </Footer>\n        </DownloadAppWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n\n  private openDownloadLink = (item: AppDownloadItem) => {\n    const target = item.link === DEFAULT_LINK ? '_blank' : '_self';\n    window.open(item.link, target);\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.DOWNLOAD_DESKTOP,\n      `${item.name} download button clicked`\n    );\n  };\n\n  private trackLearnMoreClick = () => {\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.DOWNLOAD_DESKTOP,\n      'Learn more link clicked'\n    );\n  };\n\n  private trackUserLandsOnComponent = (item: AppDownloadItem) => {\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.DOWNLOAD_DESKTOP,\n      `${item.name} user lands on this component`\n    );\n  };\n}\n\nexport default withRouter<Props>(DownloadApp);\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Typography } from '@mycrypto/ui';\n\nimport translate, { translateRaw } from 'translations';\nimport { ContentPanel, Button, RouterLink } from 'v2/components';\nimport { SettingsContext } from 'v2/services/Store';\nimport Downloader from './Downloader';\n\nconst CenteredContentPanel = styled(ContentPanel)`\n  width: 35rem;\n`;\n\nconst ImportSuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst CacheDisplay = styled.code`\n  overflow: auto;\n  width: 100%;\n  height: 10rem;\n`;\n\nexport function Export(props: RouteComponentProps<{}>) {\n  const { history } = props;\n  const onBack = history.goBack;\n  const { getStorage } = useContext(SettingsContext);\n  const store = String(getStorage());\n  return (\n    <CenteredContentPanel onBack={onBack} heading={translateRaw('SETTINGS_EXPORT_HEADING')}>\n      <ImportSuccessContainer>\n        <Typography>{translate('SETTINGS_EXPORT_INFO')}</Typography>\n        <CacheDisplay>{store}</CacheDisplay>\n        <RouterLink fullWidth={true} to=\"/settings\">\n          <Button fullWidth={true}>{translate('SETTINGS_EXPORT_LEAVE')}</Button>\n        </RouterLink>\n        <Downloader getStorage={getStorage} />\n      </ImportSuccessContainer>\n    </CenteredContentPanel>\n  );\n}\n\nexport default withRouter(Export);\n","import React from 'react';\nimport styled from 'styled-components';\nimport translate from 'translations';\n\nimport { Button, RouterLink } from 'v2/components';\n\nconst ImportSuccessContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport default function ImportSuccess() {\n  return (\n    <ImportSuccessContainer>\n      {translate('SETTINGS_IMPORT_SUCCESS')}\n      <RouterLink to=\"/settings\">\n        <Button fullWidth={true} secondary={true}>\n          {translate('SETTINGS_IMPORT_COMPLETE')}\n        </Button>\n      </RouterLink>\n    </ImportSuccessContainer>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport translate from 'translations';\n\nconst FilePicker = styled.label`\n  background: none;\n  color: #1eb8e7;\n  cursor: pointer;\n`;\nconst FilePickerInput = styled.input`\n  display: none !important;\n`;\n\ninterface ImportBoxContainerProps {\n  dragging: boolean;\n}\n\nconst ImportBoxContainer = styled.div<ImportBoxContainerProps>`\n  color: #9b9b9b;\n  background: #e8eaed;\n  padding: 6rem;\n  border-radius: 0.375em;\n  box-shadow: ${props => (props.dragging ? '0px 0px 0px 2px #1eb8e7;' : 'none')};\n`;\n\nconst ErrorMessage = styled.span`\n  color: #ef4747;\n`;\n\ninterface ImportProps {\n  importCache(importedCache: any): void;\n  onNext(): void;\n}\n\nexport default class ImportBox extends React.Component<ImportProps> {\n  public state = { badImport: false, dragging: false };\n  public submit = (importedCache: string) => {\n    const importSuccess = this.props.importCache(importedCache);\n    if (Boolean(importSuccess) === false) {\n      this.setState({ badImport: true });\n    }\n    if (Boolean(importSuccess) === true) {\n      this.props.onNext();\n    }\n  };\n\n  public render() {\n    const { badImport, dragging } = this.state;\n    return (\n      <ImportBoxContainer\n        onDrop={this.handleFileSelection}\n        onDragEnter={() => this.setState({ dragging: true })}\n        onDragLeave={() => this.setState({ dragging: false })}\n        dragging={dragging}\n      >\n        {badImport ? (\n          <ErrorMessage>{translate('SETTINGS_IMPORT_INVALID')}</ErrorMessage>\n        ) : (\n          translate('SETTINGS_IMPORT_COPY')\n        )}\n        <br />\n        <br />\n        <FilePicker htmlFor=\"upload\">\n          {translate('SETTINGS_IMPORT_BUTTON')}\n          <FilePickerInput id=\"upload\" type=\"file\" onChange={this.handleFileSelection} />\n        </FilePicker>{' '}\n        {translate('SETTINGS_IMPORT_PASTE')}\n        <br />\n      </ImportBoxContainer>\n    );\n  }\n\n  private handleFileSelection = (e: any) => {\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      if (fileReader.result) {\n        this.submit(fileReader.result as string);\n      }\n    };\n    if (e.target.files && e.target.files[0]) {\n      const target = e.target;\n      const inputFile = target.files[0];\n      fileReader.readAsText(inputFile, 'utf-8');\n    }\n    if (e.dataTransfer && e.dataTransfer.items && e.dataTransfer.items[0].kind === 'file') {\n      const draggedFile = e.dataTransfer.items[0].getAsFile();\n      fileReader.readAsText(draggedFile, 'utf-8');\n    }\n  };\n}\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ContentPanel } from 'v2/components';\nimport { ImportBox, ImportSuccess } from './components';\nimport { SettingsContext } from 'v2/services/Store';\nimport { translateRaw } from 'translations';\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nconst CenteredContentPanel = styled(ContentPanel)`\n  width: 35rem;\n  h1 {\n    font-size: 24px;\n  }\n`;\n\nexport interface PanelProps {\n  onBack(): void;\n  onNext(): void;\n}\n\nexport class Import extends React.Component<RouteComponentProps<{}>> {\n  public state = { step: 0 };\n\n  public render() {\n    const { history } = this.props;\n    const { step } = this.state;\n    const steps = [\n      {\n        heading: translateRaw('SETTINGS_IMPORT_HEADING'),\n        component: ImportBox,\n        backOption: history.goBack\n      },\n      {\n        heading: translateRaw('SETTINGS_IMPORT_SUCCESS_HEADING'),\n        component: ImportSuccess,\n        backOption: this.regressStep\n      }\n    ];\n    const onBack = steps[step].backOption;\n    const Step = steps[step].component;\n    return (\n      <CenteredContentPanel\n        onBack={onBack}\n        heading={steps[step].heading}\n        stepper={{\n          current: step + 1,\n          total: steps.length\n        }}\n      >\n        <Content>\n          <SettingsContext.Consumer>\n            {({ importStorage }) => <Step onNext={this.advanceStep} importCache={importStorage} />}\n          </SettingsContext.Consumer>\n        </Content>\n      </CenteredContentPanel>\n    );\n  }\n\n  private advanceStep = () =>\n    this.setState(() => ({\n      step: 1\n    }));\n\n  private regressStep = () =>\n    this.setState((prevState: any) => ({\n      step: Math.min(0, prevState.step - 1)\n    }));\n}\n\nexport default withRouter(Import);\n","import React from 'react';\nimport { Button, Tooltip, Icon } from '@mycrypto/ui';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { translate } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { ISettings } from 'v2/types';\nimport { DashboardPanel } from 'v2/components';\nimport { ROUTE_PATHS } from 'v2/config';\n\nconst Divider = styled.div`\n  height: 2px;\n  margin-bottom: 15px;\n  background: #e8eaed;\n`;\n\nconst SettingsField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 29px;\n  padding: 0 30px;\n\n  @media (max-width: 700px) {\n    display: block;\n  }\n`;\n\nconst SettingsLabel = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  @media (max-width: 700px) {\n    width: 100%;\n  }\n`;\n\nconst SettingsTooltipIcon = styled(Icon)`\n  margin-left: 10px;\n  height: 1em;\n`;\n\nconst SettingsControl = styled.div`\n  button {\n    margin-left: 15px;\n  }\n  @media (max-width: 700px) {\n    margin-top: 15px;\n    width: 100%;\n  }\n`;\n\nconst SelectContainer = styled.div`\n  border: 0.125em solid #007896;\n  padding: 0.6rem;\n  width: 205px;\n  text-align: center;\n  select {\n    border: none;\n    height: 2em;\n    background: none;\n  }\n`;\n\nconst SettingsButton = styled(Button)`\n  width: 105px;\n  padding: 12px 12px;\n`;\n\ninterface SettingsProps {\n  globalSettings: ISettings;\n  updateGlobalSettings(settings: ISettings): void;\n}\n\nconst timerOptions = [\n  { name: '1 Minutes', value: '60000' },\n  { name: '3 Minutes', value: '180000' },\n  { name: '5 Minutes', value: '300000' },\n  { name: '10 Minutes', value: '600000' },\n  { name: '15 Minutes', value: '900000' },\n  { name: '30 Minutes', value: '1800000' },\n  { name: '45 Minutes', value: '2700000' },\n  { name: '1 Hours', value: '3600000' },\n  { name: '3 Hours', value: '10800000' },\n  { name: '6 Hours', value: '21600000' },\n  { name: '12 Hours', value: '43200000' }\n];\n\nexport default class GeneralSettings extends React.Component<SettingsProps> {\n  public changeTimer = (event: React.FormEvent<HTMLSelectElement>) => {\n    const target = event.target as HTMLSelectElement;\n    const settings = this.props.globalSettings;\n    settings.inactivityTimer = Number(target.value);\n    this.props.updateGlobalSettings(settings);\n\n    const selectedTimer = timerOptions.find(selection => selection.value === target.value);\n    if (selectedTimer) {\n      AnalyticsService.instance.track(\n        ANALYTICS_CATEGORIES.SETTINGS,\n        `User set inactivity timer to ${selectedTimer.name}`\n      );\n    }\n  };\n\n  public render() {\n    const { globalSettings } = this.props;\n    return (\n      <DashboardPanel heading={translate('SETTINGS_GENERAL_LABEL')}>\n        <Divider />\n        <SettingsField>\n          <SettingsLabel>\n            {translate('SETTINGS_HANDLING_LABEL')}\n            <Tooltip tooltip={<span>{translate('SETTINGS_TOOLTIP')}</span>}>\n              <div>\n                <SettingsTooltipIcon icon=\"shape\" />\n              </div>\n            </Tooltip>\n          </SettingsLabel>\n          <SettingsControl>\n            <Link to={ROUTE_PATHS.SETTINGS_IMPORT.path}>\n              <SettingsButton secondary={true}>{translate('SETTINGS_IMPORT_LABEL')}</SettingsButton>\n            </Link>\n            <Link to={ROUTE_PATHS.SETTINGS_EXPORT.path}>\n              <SettingsButton secondary={true}>{translate('SETTINGS_EXPORT_LABEL')}</SettingsButton>\n            </Link>\n          </SettingsControl>\n        </SettingsField>\n        <SettingsField>\n          <SettingsLabel>{translate('SETTINGS_PAPER_LABEL')}</SettingsLabel>\n          <SettingsControl>\n            <SettingsButton secondary={true}>{translate('SETTINGS_DOWNLOAD_LABEL')}</SettingsButton>\n            <SettingsButton secondary={true}>{translate('SETTINGS_PRINT_LABEL')}</SettingsButton>\n          </SettingsControl>\n        </SettingsField>\n        <SettingsField>\n          <SettingsLabel>{translate('SETTINGS_INACTIVITY_LABEL')}</SettingsLabel>\n          <SettingsControl>\n            <SelectContainer>\n              <select onChange={this.changeTimer} value={String(globalSettings.inactivityTimer)}>\n                {timerOptions.map(option => (\n                  <option value={option.value} key={option.value}>\n                    {option.name}\n                  </option>\n                ))}\n              </select>\n            </SelectContainer>\n          </SettingsControl>\n        </SettingsField>\n      </DashboardPanel>\n    );\n  }\n}\n","import React from 'react';\nimport { Formik, Form, Field, FieldProps } from 'formik';\nimport { Button, Input, Textarea } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport backArrowIcon from 'common/assets/images/icn-back-arrow.svg';\nimport { DashboardPanel, NetworkSelectDropdown } from 'v2/components';\nimport { AddressBook } from 'v2/types';\n\nconst AddToAddressBookPanel = styled(DashboardPanel)`\n  padding: 24px 30px;\n`;\n\nconst BackButton = styled(Button)`\n  margin-right: 16px;\n`;\n\nconst AddressFieldset = styled.fieldset`\n  margin-bottom: 15px;\n\n  label {\n    display: block;\n    margin-bottom: 9px;\n    color: #163150;\n  }\n  input,\n  textarea {\n    display: block;\n    width: 100%;\n  }\n`;\n\nconst AddressBookButtons = styled.div`\n  button {\n    &:first-of-type {\n      margin-right: 12px;\n    }\n  }\n`;\n\ninterface Props {\n  toggleFlipped(): void;\n  createAddressBooks(values: AddressBook): void;\n}\n\nexport default function AddToAddressBook({ toggleFlipped, createAddressBooks }: Props) {\n  return (\n    <AddToAddressBookPanel\n      heading={\n        <>\n          <BackButton basic={true} onClick={toggleFlipped}>\n            <img src={backArrowIcon} alt=\"Back\" />\n          </BackButton>\n          Add Address\n        </>\n      }\n      padChildren={true}\n    >\n      <Formik\n        initialValues={{\n          label: '',\n          address: '',\n          notes: '',\n          network: ''\n        }}\n        onSubmit={(values: AddressBook, { setSubmitting }) => {\n          createAddressBooks(values);\n          setSubmitting(false);\n          toggleFlipped();\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <AddressFieldset>\n              <label htmlFor=\"label\">Label</label>\n              <Field\n                name=\"label\"\n                render={({ field }: FieldProps<AddressBook>) => (\n                  <Input {...field} placeholder=\"Enter name of address\" />\n                )}\n              />\n            </AddressFieldset>\n            <AddressFieldset>\n              <label htmlFor=\"address\">Address</label>\n              <Field\n                name=\"address\"\n                render={({ field }: FieldProps<AddressBook>) => (\n                  <Input {...field} placeholder=\"Enter the address\" />\n                )}\n              />\n            </AddressFieldset>\n            <AddressFieldset>\n              <Field\n                name=\"network\"\n                render={({ field, form }: FieldProps<AddressBook>) => (\n                  <NetworkSelectDropdown\n                    network={field.value}\n                    onChange={e => form.setFieldValue(field.name, e)}\n                  />\n                )}\n              />\n            </AddressFieldset>\n            <AddressFieldset>\n              <label htmlFor=\"notes\">Notes</label>\n              <Field\n                name=\"notes\"\n                render={({ field }: FieldProps<AddressBook>) => (\n                  <Textarea {...field} placeholder=\"Enter a note for this address\" />\n                )}\n              />\n            </AddressFieldset>\n            <AddressBookButtons>\n              <Button type=\"button\" secondary={true} onClick={toggleFlipped}>\n                Cancel\n              </Button>\n              <Button type=\"Submit\" disabled={isSubmitting}>\n                Add Address\n              </Button>\n            </AddressBookButtons>\n          </Form>\n        )}\n      </Formik>\n    </AddToAddressBookPanel>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, Copyable, Identicon, Button } from '@mycrypto/ui';\n\nimport { DashboardPanel, CollapsibleTable, Typography } from 'v2/components';\nimport { ExtendedAddressBook } from 'v2/types';\nimport { truncate } from 'v2/utils';\nimport { BREAK_POINTS } from 'v2/theme';\n\ninterface Props {\n  addressBook: ExtendedAddressBook[];\n  toggleFlipped(): void;\n  deleteAddressBooks(uuid: string): void;\n}\n\nconst DeleteButton = styled(Button)`\n  align-self: flex-end;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.7em;\n  width: 100%;\n`;\n\nconst AddAccountButton = styled(Button)`\n  color: #1eb8e7;\n  font-weight: bold;\n`;\n\nconst BottomRow = styled.div`\n  margin-top: 0.875rem;\n  text-align: center;\n`;\n\nconst Label = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nconst SIdenticon = styled(Identicon)`\n  > img {\n    height: 2em;\n  }\n  margin-right: 10px;\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-right: 27px;\n  }\n`;\n\nconst STypography = styled(Typography)`\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    font-weight: inherit;\n  }\n`;\n\nexport default function AddressBook({ addressBook, toggleFlipped, deleteAddressBooks }: Props) {\n  const addressBookTable = {\n    head: ['Favorite', 'Label', 'Address', 'Notes', 'Delete'],\n    body: addressBook.map(({ address, label, notes, uuid }: ExtendedAddressBook) => [\n      <Icon key={0} icon=\"star\" />,\n      <Label key={1}>\n        <SIdenticon address={address} />\n        <STypography bold={true} value={label} />\n      </Label>,\n      <Copyable key={2} text={address} truncate={truncate} isCopyable={true} />,\n      <Typography key={3} value={notes} />,\n      <DeleteButton key={4} onClick={() => deleteAddressBooks(uuid)} icon=\"exit\" />\n    ]),\n    config: {\n      primaryColumn: 'Label',\n      sortableColumn: 'Label',\n      sortFunction: (a: any, b: any) => {\n        const aLabel = a.props.label;\n        const bLabel = b.props.label;\n        return aLabel === bLabel ? true : aLabel.localeCompare(bLabel);\n      },\n      hiddenHeadings: ['Favorite', 'Delete'],\n      iconColumns: ['Favorite', 'Delete']\n    }\n  };\n  return (\n    <DashboardPanel heading=\"Address Book\">\n      <CollapsibleTable breakpoint={450} {...addressBookTable} />\n      <BottomRow>\n        <AddAccountButton onClick={toggleFlipped} basic={true}>\n          + Add Address\n        </AddAccountButton>\n      </BottomRow>\n    </DashboardPanel>\n  );\n}\n","import React, { useState, useContext } from 'react';\nimport { Heading } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport translate from 'translations';\n\nimport { IS_MOBILE } from 'v2/utils';\nimport { BREAK_POINTS, MIN_CONTENT_PADDING } from 'v2/theme';\nimport { AddressBookContext, SettingsContext } from 'v2/services/Store';\nimport { AccountList, FlippablePanel, TabsNav } from 'v2/components';\nimport { AddressBookPanel, AddToAddressBook, GeneralSettings } from './components';\n\nimport settingsIcon from 'common/assets/images/icn-settings.svg';\n\nconst SettingsHeading = styled(Heading)`\n  display: flex;\n  align-items: center;\n  margin-bottom: 22px;\n  color: #163150;\n`;\n\nconst SettingsHeadingIcon = styled.img`\n  margin-right: 12px;\n`;\n\nconst StyledLayout = styled.div`\n  .Layout-content {\n    padding: 0;\n    @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n      margin-top: ${IS_MOBILE && '73px'};\n    }\n  }\n`;\n\nconst SettingsTabs = styled(TabsNav)`\n  margin-top: -44px;\n  margin-left: -${MIN_CONTENT_PADDING};\n  margin-right: -${MIN_CONTENT_PADDING};\n`;\n\nfunction renderAccountPanel() {\n  return (\n    <FlippablePanel>\n      {({ flipped }) =>\n        flipped ? <p>Add Account</p> : <AccountList deletable={true} copyable={true} />\n      }\n    </FlippablePanel>\n  );\n}\n\nfunction renderAddressPanel() {\n  const { createAddressBooks, addressBook, deleteAddressBooks } = useContext(AddressBookContext);\n  return (\n    <FlippablePanel>\n      {({ flipped, toggleFlipped }) =>\n        flipped ? (\n          <AddToAddressBook toggleFlipped={toggleFlipped} createAddressBooks={createAddressBooks} />\n        ) : (\n          <AddressBookPanel\n            addressBook={addressBook}\n            toggleFlipped={toggleFlipped}\n            deleteAddressBooks={deleteAddressBooks}\n          />\n        )\n      }\n    </FlippablePanel>\n  );\n}\n\nfunction renderGeneralSettingsPanel() {\n  const { updateSettings, settings } = useContext(SettingsContext);\n  return <GeneralSettings updateGlobalSettings={updateSettings} globalSettings={settings} />;\n}\n\ninterface TabOptions {\n  [key: string]: React.ReactNode;\n}\n\nfunction renderMobile() {\n  const [tab, setTab] = useState('accounts');\n  const tabOptions: TabOptions = {\n    ['accounts']: renderAccountPanel(),\n    ['addresses']: renderAddressPanel(),\n    ['general']: renderGeneralSettingsPanel()\n  };\n  const currentTab = tabOptions[tab];\n  return (\n    <>\n      <SettingsTabs>\n        <a href=\"#\" onClick={() => setTab('accounts')}>\n          Accounts\n        </a>\n        <a href=\"#\" onClick={() => setTab('addresses')}>\n          Addresses\n        </a>\n        <a href=\"#\" onClick={() => setTab('general')}>\n          General\n        </a>\n      </SettingsTabs>\n      <>{currentTab}</>\n    </>\n  );\n}\n\nfunction renderDesktop() {\n  return (\n    <>\n      <SettingsHeading>\n        <SettingsHeadingIcon src={settingsIcon} alt=\"Settings\" />\n        {translate('SETTINGS_HEADING')}\n      </SettingsHeading>\n      {renderAccountPanel()}\n      {renderAddressPanel()}\n      {renderGeneralSettingsPanel()}\n    </>\n  );\n}\n\n// @TODO: Use { Desktop, Mobile } components instead\nexport default function Settings() {\n  return <StyledLayout>{IS_MOBILE ? renderMobile() : renderDesktop()}</StyledLayout>;\n}\n","import React, { useState, useContext } from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport './NetworkSelectPanel.scss';\n\nimport { translate } from 'translations';\nimport { FormDataActionType as ActionType } from '../types';\nimport { FormData } from 'v2/types';\nimport { NetworkSelectDropdown } from 'v2/components';\nimport { NetworkContext } from 'v2/services/Store';\n\nconst NetworkForm = styled.div`\n  margin-top: 22px;\n`;\n\ninterface Props {\n  formData: FormData;\n  formDispatch: any;\n  goToNextStep(): void;\n}\n\nfunction NetworkSelectPanel({ formData, formDispatch, goToNextStep }: Props) {\n  const { networks } = useContext(NetworkContext);\n  const [network, setNetwork] = useState(formData.network);\n\n  const onSubmit = () => {\n    formDispatch({\n      type: ActionType.SELECT_NETWORK,\n      payload: { network }\n    });\n    goToNextStep();\n  };\n\n  const validNetwork = networks.some(n => n.id === network);\n\n  return (\n    <div className=\"Panel\">\n      <div className=\"Panel-title\">{translate('ADD_ACCOUNT_NETWORK_TITLE')}</div>\n      <div className=\"Panel-description\" id=\"NetworkPanel-description\">\n        {translate('ADD_ACCOUNT_NETWORK_SELCT')}\n      </div>\n      <NetworkForm>\n        <NetworkSelectDropdown\n          network={network}\n          accountType={formData.accountType!}\n          onChange={setNetwork}\n        />\n      </NetworkForm>\n      <div className=\"SelectNetworkPanel-button-container\">\n        <Button className=\"SelectNetworkPanel-button\" disabled={!validNetwork} onClick={onSubmit}>\n          {translate('ADD_ACCOUNT_NETWORK_ACTION')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default NetworkSelectPanel;\n","import React, { useContext, useState } from 'react';\nimport { Panel } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES, RatesContext } from 'v2/services';\nimport { SettingsContext, StoreContext, AccountContext } from 'v2/services/Store';\nimport { StoreAsset, TTicker } from 'v2/types';\nimport { weiToFloat, convertToFiatFromAsset } from 'v2/utils';\nimport { BREAK_POINTS } from 'v2/theme';\n\nimport { Balance, Fiat } from './types';\nimport AccountDropdown from './AccountDropdown';\nimport BalancesDetailView from './BalancesDetailView';\nimport WalletBreakdownView from './WalletBreakdownView';\nimport NoAccountsSelected from './NoAccountsSelected';\nimport {} from 'v2/utils/convert';\n\nconst { SCREEN_MD } = BREAK_POINTS;\n\nconst WalletBreakdownTop = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  @media (min-width: ${SCREEN_MD}) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-end;\n  }\n`;\n\nconst AccountDropdownWrapper = styled.div`\n  width: 100%;\n  max-width: 480px;\n  margin-bottom: 30px;\n`;\n\nconst WalletBreakdownPanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  margin-top: 5px;\n  padding: 0;\n\n  @media (min-width: ${SCREEN_MD}) {\n    flex-direction: row;\n    margin-top: 0;\n  }\n`;\n\n//TODO: Get fiat symbol and text\nconst fiat: Fiat = {\n  ticker: 'USD' as TTicker,\n  name: 'US Dollars',\n  symbol: '$'\n};\n\nlet wasNumOfAccountsTracked = false;\n\nexport function WalletBreakdown() {\n  const [showBalanceDetailView, setShowBalanceDetailView] = useState(false);\n  const { totals, currentAccounts } = useContext(StoreContext);\n  const { accounts } = useContext(AccountContext);\n  const { settings, updateSettingsAccounts } = useContext(SettingsContext);\n  const { getRate } = useContext(RatesContext);\n\n  // Track number of accounts that user has only once per session\n  if (!wasNumOfAccountsTracked) {\n    wasNumOfAccountsTracked = true;\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.WALLET_BREAKDOWN, `User has accounts`, {\n      numOfAccounts: accounts.length\n    });\n  }\n\n  const selectedAccounts = currentAccounts();\n\n  // Adds/updates an asset in array of balances, which are later displayed in the chart, balance list and in the secondary view\n  const balances: Balance[] = totals(selectedAccounts)\n    .map((asset: StoreAsset) => ({\n      name: asset.name || translateRaw('WALLET_BREAKDOWN_UNKNOWN'),\n      ticker: asset.ticker,\n      amount: weiToFloat(asset.balance, asset.decimal),\n      fiatValue: convertToFiatFromAsset(asset, getRate(asset.ticker as TTicker))\n    }))\n    .sort((a, b) => b.fiatValue - a.fiatValue);\n\n  const totalFiatValue = balances.reduce((sum, asset) => {\n    return (sum += asset.fiatValue);\n  }, 0);\n\n  const toggleShowChart = () => {\n    setShowBalanceDetailView(!showBalanceDetailView);\n  };\n\n  return (\n    <>\n      <WalletBreakdownTop>\n        <AccountDropdownWrapper>\n          <AccountDropdown\n            accounts={accounts}\n            selected={settings.dashboardAccounts}\n            onSubmit={(selected: string[]) => updateSettingsAccounts(selected)}\n          />\n        </AccountDropdownWrapper>\n      </WalletBreakdownTop>\n      <WalletBreakdownPanel>\n        {selectedAccounts.length === 0 ? (\n          <NoAccountsSelected />\n        ) : showBalanceDetailView ? (\n          <BalancesDetailView\n            balances={balances}\n            toggleShowChart={toggleShowChart}\n            totalFiatValue={totalFiatValue}\n            fiat={fiat}\n          />\n        ) : (\n          <WalletBreakdownView\n            balances={balances}\n            toggleShowChart={toggleShowChart}\n            totalFiatValue={totalFiatValue}\n            fiat={fiat}\n          />\n        )}\n      </WalletBreakdownPanel>\n    </>\n  );\n}\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Button, Typography } from '@mycrypto/ui';\n\nimport { isUrl } from 'v2/utils';\nimport { BREAK_POINTS } from 'v2/theme';\nimport { Action } from '../types';\n\nconst SContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 120px;\n\n  margin-bottom: 20px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n  border-radius: 3px;\n  background: #fff;\n  padding: 8px;\n\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    width: 110px;\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    width: 100%;\n    padding-left: 40px;\n    padding-right: 35px;\n  }\n`;\n\nconst SButton = styled(Button)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  word-wrap: word-break;\n  & > img {\n    width: 50px;\n    display: block;\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    flex-direction: row;\n    justify-content: space-between;\n    text-align: left;\n    & > img {\n      width: 54px;\n      order: 1;\n    }\n`;\n\nconst STitle = styled('div')`\n  margin: 0;\n  font-weight: bold;\n  color: #163150;\n\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    font-size: 14px;\n    padding-top: 2px;\n\n    // The link for 'Get Hardware Wallet' is too long to use a line per word.\n    word-spacing: ${({ isLonger }: { isLonger: boolean }) => (isLonger ? 'inherit' : '9999px')};\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_MD}) {\n    padding-top: 0px;\n    font-size: 16px;\n  }\n\n  @media (min-width: ${BREAK_POINTS.SCREEN_LG}) {\n    padding-top: 0px;\n    font-size: 24px;\n  }\n`;\n\nconst SDescription = styled('div')`\n  display: none;\n  font-size: 16px;\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    display: block;\n  }\n`;\n\ntype Props = RouteComponentProps<{}> & Action;\nfunction ActionTile({ icon, title, description, link, history }: Props) {\n  const goToExternalLink = (url: string) => window.open(url, '_blank');\n  const goToAppRouter = (path: string) => history.push(path);\n\n  const action = isUrl(link) ? goToExternalLink : goToAppRouter;\n\n  return (\n    <SContainer className=\"ActionTile\">\n      <SButton basic={true} className=\"ActionTile-button\" onClick={() => action(link)}>\n        <img className=\"ActionTile-button-icon\" src={icon} alt={title} />\n        <Typography as=\"div\">\n          <STitle isLonger={title.length > 15}>{title}</STitle>\n          <SDescription>{description}</SDescription>\n        </Typography>\n      </SButton>\n    </SContainer>\n  );\n}\n\nexport default withRouter(ActionTile);\n","import React, { useContext } from 'react';\nimport { Heading } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ROUTE_PATHS } from 'v2/config';\nimport { COLORS } from 'v2/theme';\nimport { useDevMode } from 'v2/services';\nimport { AccountContext, AddressBookContext } from 'v2/services/Store';\nimport { translate } from 'translations';\nimport { AccountList, RouterLink, Typography, BannerAd, Desktop, Mobile } from 'v2/components';\nimport { ActionTile, TokenPanel, WalletBreakdown, RecentTransactionList } from './components';\nimport { NotificationsPanel } from '../NotificationsPanel';\nimport { actions } from './constants';\nimport './Dashboard.scss';\n\nimport settingsIcon from 'common/assets/images/icn-settings.svg';\n\nconst AccountListFooterWrapper = styled.div`\n  & * {\n    color: ${COLORS.BRIGHT_SKY_BLUE};\n  }\n  & img {\n    height: 1.1em;\n    margin-right: 0.5em;\n  }s\n`;\n\nconst accountListFooter = () => (\n  <AccountListFooterWrapper>\n    <RouterLink to={ROUTE_PATHS.SETTINGS.path}>\n      <img src={settingsIcon} alt={'settings'} />\n      <Typography>{translate('SETTINGS_HEADING')}</Typography>\n    </RouterLink>\n  </AccountListFooterWrapper>\n);\n// Keep the same mobile width as an ActionTile\nconst EmptyTile = styled.div`\n  width: 110px;\n`;\n\nexport default function Dashboard() {\n  const { isDevelopmentMode } = useDevMode();\n  const { accounts } = useContext(AccountContext);\n  const { readAddressBook } = useContext(AddressBookContext);\n\n  return (\n    <div>\n      {/* Mobile only */}\n      <Mobile className=\"Dashboard-mobile\">\n        <NotificationsPanel accounts={accounts} />\n        <div className=\"Dashboard-mobile-actions\">\n          {actions.map(action => (\n            <ActionTile key={action.title} {...action} />\n          ))}\n          {/*In mobile we only have 5 tiles on 2 rows. To allow 'space-between' to handle the gaps, we\n          add a sixth tile with the same width.*/}\n          <EmptyTile />\n        </div>\n        <div className=\"Dashboard-mobile-divider\" />\n        <div className=\"Dashboard-mobile-group\">\n          <div className=\"Dashboard-mobile-walletBreakdown\">\n            <WalletBreakdown />\n          </div>\n          <div className=\"Dashboard-mobile-section Dashboard-mobile-tokenList\">\n            <TokenPanel />\n          </div>\n        </div>\n        <div className=\"Dashboard-mobile-section\">\n          <AccountList\n            currentsOnly={true}\n            className=\"Dashboard-mobile-modifiedPanel\"\n            footer={accountListFooter()}\n            copyable={true}\n          />\n        </div>\n        <BannerAd />\n        {isDevelopmentMode && (\n          <div className=\"Dashboard-mobile-section\">\n            <RecentTransactionList accountsList={accounts} readAddressBook={readAddressBook} />\n          </div>\n        )}\n      </Mobile>\n      {/* Desktop only */}\n      <Desktop className=\"Dashboard-desktop\">\n        <NotificationsPanel accounts={accounts} />\n        <div className=\"Dashboard-desktop-top\">\n          <div className=\"Dashboard-desktop-top-left\">\n            <Heading as=\"h2\" className=\"Dashboard-desktop-top-left-heading\">\n              Your Dashboard\n            </Heading>\n            <div className=\"Dashboard-desktop-top-left-actions\">\n              {actions.map(action => (\n                <ActionTile key={action.title} {...action} />\n              ))}\n            </div>\n            <div>\n              <TokenPanel />\n            </div>\n          </div>\n          <div className=\"Dashboard-desktop-top-right\">\n            <div>\n              <WalletBreakdown />\n            </div>\n            <div>\n              <AccountList\n                currentsOnly={true}\n                className=\"Dashboard-desktop-modifiedPanel\"\n                footer={accountListFooter()}\n                copyable={true}\n              />\n            </div>\n          </div>\n        </div>\n        <BannerAd />\n        {isDevelopmentMode && (\n          <div className=\"Dashboard-desktop-bottom\">\n            <RecentTransactionList\n              readAddressBook={readAddressBook}\n              accountsList={accounts}\n              className=\"Dashboard-desktop-modifiedPanel\"\n            />\n          </div>\n        )}\n      </Desktop>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, InputField, InlineErrorMsg } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\nconst ButtonsWrapper = styled.div`\n  margin-top: 48px;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  margin-bottom: 16px;\n  width: 100%;\n`;\n\nconst FormItemWrapper = styled.div`\n  font-size: 20px;\n  margin-top: 28px;\n`;\n\nconst Divider = styled.div`\n  margin-top: 28px;\n  margin-bottom: 22px;\n  width: 100%;\n  text-align: center;\n  font-size: 20px;\n  color: ${props => props.theme.headline};\n`;\n\nconst FileName = styled.div`\n  color: #999;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  font-size: 18px;\n`;\n\nconst UploadZone = styled.label`\n  width: 100%;\n  font-size: 13px;\n  text-transform: uppercase;\n  border: solid 1px #e5ecf3;\n  background-color: rgba(247, 247, 247, 0.4);\n  word-wrap: break-word;\n  padding: 16px 4px;\n  margin-top: 8px;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst HiddenUploadZone = styled.input`\n  &[type='file'] {\n    display: none;\n  }\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-top: 26px;\n`;\n\ninterface Props extends PanelProps {\n  privateKey: string;\n  verifyKeystore(keystore: string, password: string): Promise<boolean>;\n  verifyPrivateKey(key: string, password: string): boolean;\n  addCreatedAccountAndRedirectToDashboard(): void;\n}\n\nclass VerifyKeystorePanel extends Component<Props> {\n  public state = {\n    validating: false,\n    submited: false,\n    keystore: null,\n    password: '',\n    privateKey: '',\n    fileName: '',\n    passwordError: '',\n    privateKeyError: '',\n    emptyFormError: false\n  };\n\n  public validating = false;\n\n  public validate = async () => {\n    const {\n      verifyKeystore,\n      verifyPrivateKey,\n      privateKey: generatedPrivateKey,\n      addCreatedAccountAndRedirectToDashboard\n    } = this.props;\n    const { keystore, password, privateKey } = this.state;\n    this.validating = true;\n\n    this.setState({ passwordError: '', privateKeyError: '', emptyFormError: false });\n\n    if (!keystore && !privateKey) {\n      this.setState({ emptyFormError: true });\n      return;\n    }\n\n    if (keystore) {\n      const isValid = await verifyKeystore(keystore!, password);\n      if (!isValid) {\n        this.setState({ passwordError: 'Wrong password' });\n        return;\n      } else {\n        addCreatedAccountAndRedirectToDashboard();\n      }\n    } else if (privateKey) {\n      const isValid = verifyPrivateKey(privateKey, password) && generatedPrivateKey === privateKey;\n      if (!isValid) {\n        this.setState({ privateKeyError: 'Invalid private key' });\n        return;\n      } else {\n        addCreatedAccountAndRedirectToDashboard();\n      }\n    }\n    this.setState({ submited: true });\n    this.validating = false;\n  };\n\n  public handleFileSelection = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target || !e.target.files) {\n      return;\n    }\n\n    const fileReader = new FileReader();\n    fileReader.readAsText(e.target.files[0], 'UTF-8');\n    this.setState({ fileName: e.target.files[0].name });\n\n    fileReader.onload = () => {\n      this.setState({ keystore: fileReader.result });\n    };\n  };\n\n  public handlePasswordInputChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ password: e.target.value });\n  };\n\n  public handlePrivateKeyInputChanged = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ privateKey: e.target.value });\n  };\n\n  public render() {\n    const { onBack, totalSteps, currentStep } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('VERIFY_KEYSTORE_TITLE')}\n        description={translateRaw('VERIFY_KEYSTORE_DESCRIPTION')}\n      >\n        <FormItemWrapper>\n          <InputField\n            label={translateRaw('YOUR_PRIVATE_KEY_LABEL')}\n            value={this.state.privateKey}\n            onChange={this.handlePrivateKeyInputChanged}\n            inputError={this.state.privateKeyError}\n            textarea={true}\n          />\n        </FormItemWrapper>\n        <Divider>- {translateRaw('OR')} -</Divider>\n        <FormItemWrapper>\n          {translate('YOUR_KEYSTORE_LABEL')}\n          <UploadZone htmlFor=\"uploadZone\">{translateRaw('UPLOAD_KEYSTORE_LABEL')}</UploadZone>\n          {this.state.fileName && <FileName>{this.state.fileName}</FileName>}\n          <HiddenUploadZone type=\"file\" id=\"uploadZone\" onChange={this.handleFileSelection} />\n        </FormItemWrapper>\n        <FormItemWrapper>\n          <InputField\n            label={translateRaw('INPUT_PASSWORD_LABEL')}\n            value={this.state.password}\n            onChange={this.handlePasswordInputChanged}\n            inputError={this.state.passwordError}\n            showEye={true}\n            type={'password'}\n          />\n        </FormItemWrapper>\n\n        {this.state.emptyFormError && (\n          <ErrorWrapper>\n            <InlineErrorMsg>{translateRaw('VERIFY_KEYSTORE_EMPTY_FORM_ERROR')}</InlineErrorMsg>\n          </ErrorWrapper>\n        )}\n\n        <ButtonsWrapper>\n          <StyledButton onClick={this.validate}>{translate('DONE_AND_RETURN_LABEL')}</StyledButton>\n        </ButtonsWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n\nexport default VerifyKeystorePanel;\n","import React, { Component } from 'react';\nimport { Button, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport { IV3Wallet } from 'ethereumjs-wallet';\n\nimport { ExtendedContentPanel, PrintPaperWalletButton } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\nimport lockSafetyIcon from 'common/assets/images/icn-lock-safety.svg';\n\nconst DescriptionItem = styled(Typography)`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px !important;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst ButtonsWrapper = styled.div`\n  margin-top: 48px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:focus,\n  &:hover {\n    img {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 33px;\n  margin-bottom: 25px;\n`;\n\nconst PrivateKeyWrapper = styled.div`\n  font-size: 20px;\n  margin-top: 18px;\n`;\n\nconst PrivateKeyField = styled.div`\n  width: 100%;\n  font-size: 18px;\n  border: solid 1px #e5ecf3;\n  background-color: rgba(247, 247, 247, 0.4);\n  word-wrap: break-word;\n  padding: 8px 18px;\n  margin-top: 8px;\n  font-family: 'Roboto Mono', Menlo, Monaco, Consolas, 'Courier New', monospace;\n`;\n\ninterface Props extends PanelProps {\n  privateKey: string;\n  keystore: IV3Wallet;\n}\n\nexport default class MakeBackupPanel extends Component<Props> {\n  public render() {\n    const { onBack, onNext, totalSteps, currentStep, privateKey, keystore } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('MAKE_BACKUP_TITLE')}\n      >\n        <ImageWrapper>\n          <img src={lockSafetyIcon} />\n        </ImageWrapper>\n\n        <DescriptionItem>{translate('MAKE_BACKUP_DESCRIPTION_1')}</DescriptionItem>\n        <DescriptionItem>{translate('MAKE_BACKUP_DESCRIPTION_2')}</DescriptionItem>\n        <DescriptionItem>{translate('MAKE_BACKUP_DESCRIPTION_3')}</DescriptionItem>\n\n        <PrivateKeyWrapper>\n          {translate('YOUR_PRIVATE_KEY_LABEL')}\n          <PrivateKeyField>{privateKey}</PrivateKeyField>\n        </PrivateKeyWrapper>\n        <ButtonsWrapper>\n          <PrintPaperWalletButton\n            address={keystore.address}\n            privateKey={privateKey}\n            printText={translate('MAKE_BACKUP_PRINT_BUTTON')}\n          />\n          <StyledButton onClick={onNext}>{translate('ACTION_6')}</StyledButton>\n        </ButtonsWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, InlineErrorMsg } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\nimport keystoreIcon from 'common/assets/images/icn-keystore.svg';\nimport downloadIcon from 'common/assets/images/icn-download.svg';\n\nconst DownloadImage = styled.img`\n  width: 16px;\n  height: 16px;\n  margin-right: 10px;\n  pointer-events: none;\n  display: inline;\n`;\n\nconst DescriptionItem = styled(Typography)`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px !important;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst ButtonsWrapper = styled.div`\n  margin-top: 48px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst DownloadLink = styled.a`\n  margin-bottom: 16px;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:focus,\n  &:hover {\n    img {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 33px;\n  margin-bottom: 25px;\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-bottom: 26px;\n`;\n\ninterface Props extends PanelProps {\n  filename: string;\n  getKeystoreBlob(): string;\n}\n\ninterface State {\n  downloaded: boolean;\n  error: boolean;\n}\n\nexport default class SaveKeystorePanel extends Component<Props, State> {\n  public state: State = {\n    downloaded: false,\n    error: false\n  };\n\n  public handleNextClick = () => {\n    const { onNext } = this.props;\n\n    if (!this.state.downloaded) {\n      this.setState({ error: true });\n    } else {\n      onNext();\n    }\n  };\n\n  public render() {\n    const { onBack, totalSteps, currentStep, getKeystoreBlob, filename } = this.props;\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('SAVE_KEYSTORE_TITLE')}\n      >\n        <ImageWrapper>\n          <img src={keystoreIcon} />\n        </ImageWrapper>\n\n        <DescriptionItem>{translate('SAVE_KEYSTORE_DESCRIPTION_1')}</DescriptionItem>\n        <DescriptionItem>{translate('SAVE_KEYSTORE_DESCRIPTION_2')}</DescriptionItem>\n        <DescriptionItem>{translate('SAVE_KEYSTORE_DESCRIPTION_3')}</DescriptionItem>\n\n        <ButtonsWrapper>\n          {this.state.error && (\n            <ErrorWrapper>\n              <InlineErrorMsg>{translate('SAVE_KEYSTORE_ERROR')}</InlineErrorMsg>\n            </ErrorWrapper>\n          )}\n\n          <DownloadLink href={getKeystoreBlob()} download={filename}>\n            <StyledButton\n              onClick={() => this.setState({ downloaded: true, error: false })}\n              secondary={true}\n            >\n              <DownloadImage src={downloadIcon} />\n              {translate('SAVE_KEYSTORE_BUTTON')}\n            </StyledButton>\n          </DownloadLink>\n          <StyledButton onClick={this.handleNextClick}>{translate('ACTION_6')}</StyledButton>\n        </ButtonsWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\nimport zxcvbn from 'zxcvbn';\n\nimport { ExtendedContentPanel, InputField } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\n// Legacy\nimport Spinner from 'components/ui/Spinner';\n\nconst DescriptionItem = styled.div`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst PasswordForm = styled.form`\n  margin-top: 22px;\n`;\n\nconst FormItem = styled.fieldset`\n  margin-top: 15px;\n`;\n\nconst SubmitButton = styled(Button)`\n  width: 100%;\n  font-size: 18px;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-top: 30px;\n  width: 100%;\n  height: 51px;\n`;\n\nconst Description = () => {\n  return (\n    <React.Fragment>\n      <DescriptionItem>{translate('NEW_WALLET_KEYSTORE_DESCRIPTION_1')}</DescriptionItem>\n      <DescriptionItem>{translate('NEW_WALLET_KEYSTORE_DESCRIPTION_2')}</DescriptionItem>\n    </React.Fragment>\n  );\n};\n\ninterface Props extends PanelProps {\n  generateWalletAndContinue(password: string): void;\n}\n\nexport default class GenerateKeystoreFilePanel extends Component<Props> {\n  public state = {\n    password1: '',\n    password2: '',\n    password1Error: '',\n    password2Error: '',\n    generatingKeystore: false\n  };\n\n  public onPassword1Changed = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ password1: event.target.value });\n  };\n\n  public onPassword2Changed = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ password2: event.target.value });\n  };\n\n  public validateForm = (): boolean => {\n    const { password1, password2 } = this.state;\n    const minLength = 8;\n\n    if (password1.length < minLength) {\n      this.setState({\n        password1Error: translate('INPUT_ERROR_PASSWORD_TOO_SHORT'),\n        password2Error: ''\n      });\n      return false;\n    }\n\n    const passwordValidation = password1 ? zxcvbn(password1) : null;\n    if (passwordValidation && passwordValidation.score < 3) {\n      this.setState({\n        password1Error: `${translateRaw('WEAK_PASSWORD')} ${passwordValidation.feedback.warning}`,\n        password2Error: ''\n      });\n      return false;\n    }\n\n    if (password1 !== password2) {\n      this.setState({\n        password1Error: '',\n        password2Error: translate('INPUT_ERROR_PASSWORDS_DONT_MATCH')\n      });\n      return false;\n    }\n\n    this.setState({ password1Error: '', password2Error: '' });\n    return true;\n  };\n\n  public handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    const { generateWalletAndContinue } = this.props;\n\n    if (this.validateForm()) {\n      try {\n        this.setState({ generatingKeystore: true });\n        await generateWalletAndContinue(this.state.password1);\n      } catch (e) {\n        console.debug(e);\n      }\n    }\n  };\n\n  public render() {\n    const { onBack, totalSteps, currentStep } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('NEW_WALLET_KEYSTORE_TITLE')}\n        description={<Description />}\n      >\n        <PasswordForm onSubmit={this.handleFormSubmit}>\n          <FormItem>\n            <InputField\n              label={translateRaw('INPUT_PASSWORD_LABEL')}\n              value={this.state.password1}\n              onChange={this.onPassword1Changed}\n              inputError={this.state.password1Error}\n              showEye={true}\n              type={'password'}\n            />\n          </FormItem>\n          <FormItem>\n            <InputField\n              label={translateRaw('INPUT_CONFIRM_PASSWORD_LABEL')}\n              value={this.state.password2}\n              onChange={this.onPassword2Changed}\n              inputError={this.state.password2Error}\n              showEye={true}\n              type={'password'}\n            />\n          </FormItem>\n          <DescriptionItem>{translate('NEW_WALLET_KEYSTORE_DESCRIPTION_3')}</DescriptionItem>\n          <ButtonWrapper>\n            {this.state.generatingKeystore ? (\n              <Spinner size={'x2'} />\n            ) : (\n              <SubmitButton type=\"submit\">{translate('NEW_WALLET_KEYSTORE_BUTTON')}</SubmitButton>\n            )}\n          </ButtonWrapper>\n        </PasswordForm>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\n// Legacy\nimport reloadIcon from 'common/assets/images/icn-reload.svg';\nimport Spinner from 'components/ui/Spinner';\n\nconst DescriptionItem = styled(Typography)`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px !important;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst RegenerateImage = styled.img`\n  width: 16px;\n  height: 16px;\n  margin-right: 10px;\n  pointer-events: none;\n  display: inline;\n`;\n\nconst GeneratePhrasePanelWords = styled(Typography)`\n  padding: 29px;\n  border: 1px solid #e5ecf3;\n  line-height: 1.5;\n  text-align: center;\n  font-weight: 500;\n  word-spacing: 14px;\n  height: 140px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Label = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-top: 42px;\n`;\n\nconst ButtonsWrapper = styled.div`\n  margin-top: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 15px;\n  &:focus,\n  &:hover {\n    img {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 66px;\n`;\n\ninterface Props extends PanelProps {\n  words: string[];\n  generateWords(): void;\n  decryptMnemonic(): void;\n}\n\nexport default class GeneratePhrasePanel extends Component<Props> {\n  public state = { decrypting: false };\n\n  public componentDidMount() {\n    const { generateWords } = this.props;\n    generateWords();\n  }\n\n  public handleNextClick = () => {\n    const { onNext, decryptMnemonic } = this.props;\n\n    this.setState({ decrypting: true });\n    setTimeout(() => {\n      decryptMnemonic();\n      this.setState({ decrypting: false });\n      onNext();\n    }, 0);\n  };\n\n  public render() {\n    const { totalSteps, currentStep, words, generateWords, onBack } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('MNEMONIC_GENERATE_PHRASE_TITLE')}\n      >\n        <DescriptionItem>{translate('MNEMONIC_GENERATE_PHRASE_DESCRIPTION_1')}</DescriptionItem>\n        <DescriptionItem>{translate('MNEMONIC_GENERATE_PHRASE_DESCRIPTION_2')}</DescriptionItem>\n        <DescriptionItem>{translate('MNEMONIC_GENERATE_PHRASE_DESCRIPTION_3')}</DescriptionItem>\n\n        <Label>{translateRaw('MNEMONIC_YOUR_PHRASE_LABEL')}</Label>\n        <GeneratePhrasePanelWords>{words.join(' ')}</GeneratePhrasePanelWords>\n\n        <ButtonsWrapper>\n          <StyledButton onClick={generateWords} secondary={true}>\n            <RegenerateImage src={reloadIcon} /> {translateRaw('REGENERATE_MNEMONIC')}\n          </StyledButton>\n\n          <ButtonWrapper>\n            {this.state.decrypting ? (\n              <Spinner size={'x2'} />\n            ) : (\n              <StyledButton onClick={this.handleNextClick}>{translateRaw('ACTION_6')}</StyledButton>\n            )}\n          </ButtonWrapper>\n        </ButtonsWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport chunk from 'lodash/chunk';\nimport shuffle from 'lodash/shuffle';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, InlineErrorMsg } from 'v2/components';\nimport { PanelProps } from '../../CreateWallet';\nimport { translateRaw } from 'translations';\n\nconst ActiveWords = styled.div`\n  height: 200px;\n  margin-top: 10px;\n  margin-bottom: 15px;\n  padding: 15px;\n  border: 1px solid #e5ecf3;\n  background: rgba(247, 247, 247, 0.4);\n  margin-top: 36px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 9px;\n`;\n\nconst ActiveWordsRow = styled(Row)`\n  justify-content: flex-start;\n`;\n\nconst Word = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 90px;\n  height: 28px;\n  padding: 6px 14px;\n  border-radius: 1.4px;\n  background-color: rgba(122, 129, 135, 0.75);\n  color: #fff;\n\n  &:not(:last-of-type) {\n    margin-right: 9px;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  width: 100%;\n  margin-top: 10px;\n`;\n\ninterface SelectableWordProps {\n  confirmed: boolean;\n  wrong: boolean;\n}\n\nconst SelectableWord = styled(Word)`\n  cursor: pointer;\n  width: 100px;\n  transition: background-color 0.1s ease-in;\n  background-color: ${(props: SelectableWordProps) =>\n    props.wrong ? '#ef4747' : props.confirmed ? '#a682ff' : 'rgba(122, 129, 135, 0.75)'};\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-top: 24px;\n`;\n\ninterface Props extends PanelProps {\n  words: string[];\n  addCreatedAccountAndRedirectToDashboard(): void;\n}\n\ninterface State {\n  confirmedWords: string[];\n  shuffledWords: string[];\n  wrongWord: string;\n  doneClicked: boolean;\n  error: boolean;\n}\n\nexport default class ConfirmPhrasePanel extends Component<Props> {\n  public state: State = {\n    shuffledWords: shuffle(this.props.words),\n    confirmedWords: [],\n    wrongWord: '',\n    doneClicked: false,\n    error: false\n  };\n\n  public handleDoneClicked = () => {\n    const { addCreatedAccountAndRedirectToDashboard } = this.props;\n    const { confirmedWords, shuffledWords } = this.state;\n\n    this.setState({ doneClicked: true, error: false });\n\n    if (confirmedWords.length !== shuffledWords.length) {\n      this.setState({ error: true });\n    } else {\n      addCreatedAccountAndRedirectToDashboard();\n    }\n  };\n\n  public render() {\n    const { totalSteps, onBack, currentStep } = this.props;\n    const { confirmedWords, shuffledWords, wrongWord } = this.state;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('MNEMONIC_VERIFY_TITLE')}\n        description={translateRaw('MNEMONIC_VERIFY_DESCRIPTION')}\n      >\n        <ActiveWords>\n          {chunk(confirmedWords, 4).map((row, rowIndex) => (\n            <ActiveWordsRow key={rowIndex}>\n              {row.map((word, wordIndex) => (\n                <Word key={wordIndex}>{word}</Word>\n              ))}\n            </ActiveWordsRow>\n          ))}\n        </ActiveWords>\n        <div>\n          {chunk(shuffledWords, 4).map((row, rowIndex) => (\n            <Row key={rowIndex}>\n              {row.map((word, wordIndex) => (\n                <SelectableWord\n                  wrong={wrongWord === word}\n                  confirmed={confirmedWords.includes(word)}\n                  key={wordIndex}\n                  onClick={() => this.confirmWord(word)}\n                >\n                  {word}\n                </SelectableWord>\n              ))}\n            </Row>\n          ))}\n        </div>\n        {this.state.doneClicked && this.state.error && (\n          <ErrorWrapper>\n            <InlineErrorMsg>{translateRaw('MNEMONIC_VERIFY_ERROR')}</InlineErrorMsg>\n          </ErrorWrapper>\n        )}\n        <StyledButton onClick={this.handleDoneClicked}>\n          {translateRaw('DONE_AND_RETURN_LABEL')}\n        </StyledButton>\n      </ExtendedContentPanel>\n    );\n  }\n\n  private confirmWord = (word: string) => {\n    const { words } = this.props;\n    const { confirmedWords } = this.state;\n    const nextIndex = confirmedWords.length;\n    const correctWord = words[nextIndex];\n\n    if (confirmedWords.includes(word)) {\n      return;\n    } else if (word === correctWord) {\n      this.setState((prevState: State) => ({\n        confirmedWords: prevState.confirmedWords.concat(word),\n        wrongWord: ''\n      }));\n    } else {\n      this.setState({\n        wrongWord: word\n      });\n    }\n  };\n}\n","import React, { Component } from 'react';\nimport { Button, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { ExtendedContentPanel, InlineErrorMsg, PrintPaperWalletButton } from 'v2/components';\nimport lockSafetyIcon from 'common/assets/images/icn-lock-safety.svg';\nimport { PanelProps } from '../../CreateWallet';\nimport translate, { translateRaw } from 'translations';\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 33px;\n  margin-bottom: 25px;\n`;\n\nconst DescriptionItem = styled(Typography)`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px !important;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst GeneratePhrasePanelWords = styled(Typography)`\n  padding: 29px;\n  border: 1px solid #e5ecf3;\n  line-height: 1.5;\n  text-align: center;\n  font-weight: 500;\n  word-spacing: 14px;\n  height: 140px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Label = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-top: 42px;\n`;\n\nconst ButtonsWrapper = styled.div`\n  margin-top: 28px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:focus,\n  &:hover {\n    img {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-top: 24px;\n`;\n\ninterface Props extends PanelProps {\n  words: string[];\n  address: string;\n  path: string;\n}\n\ninterface State {\n  printed: boolean;\n  error: boolean;\n}\n\nexport default class BackUpPhrasePanel extends Component<Props, State> {\n  public state: State = {\n    printed: false,\n    error: false\n  };\n\n  public handleDoneClick = () => {\n    const { onNext } = this.props;\n\n    if (!this.state.printed) {\n      this.setState({ error: true });\n    } else {\n      onNext();\n    }\n  };\n\n  public handlePrintClick = () => {\n    this.setState({ printed: true, error: false });\n  };\n\n  public render() {\n    const { address, words, path, currentStep, totalSteps, onBack } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('MAKE_BACKUP_TITLE')}\n      >\n        <ImageWrapper>\n          <img src={lockSafetyIcon} />\n        </ImageWrapper>\n        <DescriptionItem>{translate('MNEMONIC_MAKE_BACKUP_DESCRIPTION')}</DescriptionItem>\n\n        <Label>{translateRaw('MNEMONIC_YOUR_PHRASE_LABEL')}</Label>\n        <GeneratePhrasePanelWords>{words.join(' ')}</GeneratePhrasePanelWords>\n\n        {this.state.error && (\n          <ErrorWrapper>\n            <InlineErrorMsg>{translateRaw('MNEMONIC_MAKE_BACKUP_ERROR')}</InlineErrorMsg>\n          </ErrorWrapper>\n        )}\n        <ButtonsWrapper>\n          <PrintPaperWalletButton\n            address={address}\n            mnemonic={words.join(' ')}\n            path={path}\n            printText={translate('X_PRINT')}\n            onPrintWalletClick={this.handlePrintClick}\n          />\n          <StyledButton onClick={this.handleDoneClick}>{translate('ACTION_6')}</StyledButton>\n        </ButtonsWrapper>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport translate, { translateRaw } from 'translations';\nimport { ExtendedContentPanel, InlineErrorMsg, NetworkSelectDropdown } from 'v2/components';\nimport { WalletId } from 'v2/types';\nimport { getNetworkByName } from 'v2/services/Store';\nimport { PanelProps } from '../CreateWallet';\n\ninterface Props extends PanelProps {\n  totalSteps: number;\n}\n\nconst NetworkForm = styled.div`\n  margin-top: 22px;\n`;\n\nconst SubmitButton = styled(Button)`\n  width: 100%;\n  margin-top: 30px;\n  font-size: 18px;\n`;\n\nconst ErrorWrapper = styled.div`\n  margin-top: 24px;\n`;\n\ninterface Props extends PanelProps {\n  network: string;\n  accountType: WalletId;\n  selectNetwork(network: string): void;\n}\n\nexport default class SelectNetworkPanel extends Component<Props> {\n  public state = { error: false };\n\n  public handleSubmitClick = () => {\n    const { network, onNext } = this.props;\n    if (getNetworkByName(network)) {\n      onNext();\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  public render() {\n    const { totalSteps, currentStep, network, accountType, onBack, selectNetwork } = this.props;\n\n    return (\n      <ExtendedContentPanel\n        onBack={onBack}\n        stepper={{\n          current: currentStep,\n          total: totalSteps\n        }}\n        heading={translateRaw('SELECT_NETWORK_TITLE')}\n        description={translate('SELECT_NETWORK_DESCRIPTION')}\n      >\n        <NetworkForm>\n          <NetworkSelectDropdown\n            network={network}\n            accountType={accountType}\n            onChange={selectNetwork}\n          />\n        </NetworkForm>\n\n        {this.state.error && (\n          <ErrorWrapper>\n            <InlineErrorMsg>{translateRaw('SELECT_NETWORK_ERROR')}</InlineErrorMsg>\n          </ErrorWrapper>\n        )}\n        <SubmitButton onClick={this.handleSubmitClick}>{translateRaw('ACTION_6')}</SubmitButton>\n      </ExtendedContentPanel>\n    );\n  }\n}\n","import React from 'react';\nimport { withRouter, Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { ExtendedContentPanel } from 'v2/components';\nimport { ROUTE_PATHS } from 'v2/config';\n\n// Legacy\nimport newWalletIcon from 'common/assets/images/icn-new-wallet.svg';\n\nconst DescriptionItem = styled(Typography)`\n  margin-top: 18px;\n  font-weight: normal;\n  font-size: 18px !important;\n\n  strong {\n    font-weight: 900;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 33px;\n  margin-bottom: 25px;\n`;\n\nconst WalletImage = styled.img`\n  width: 152px;\n  height: 163px;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 28px;\n  &:focus,\n  &:hover {\n    embed {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst BottomActions = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 30px;\n  line-height: 1.5;\n`;\n\nexport interface PanelProps {\n  totalSteps: number;\n  currentStep: number;\n  onBack(): void;\n  onNext(): void;\n}\n\nexport function CreateWallet({ history }: RouteComponentProps<{}>) {\n  return (\n    <ExtendedContentPanel\n      onBack={() => history.push(ROUTE_PATHS.ROOT.path)}\n      heading={translateRaw('CREATE_ACCOUNT_TITLE')}\n    >\n      <DescriptionItem>{translateRaw('CREATE_ACCOUNT_DESCRIPTION_1')}</DescriptionItem>\n      <DescriptionItem>{translateRaw('CREATE_ACCOUNT_DESCRIPTION_2')}</DescriptionItem>\n      <ImageWrapper>\n        <WalletImage src={newWalletIcon} alt=\"New wallet\" />\n      </ImageWrapper>\n\n      <DescriptionItem>{translateRaw('CREATE_ACCOUNT_DESCRIPTION_3')}</DescriptionItem>\n      <Link to=\"/create-wallet/mnemonic\">\n        <StyledButton>{translateRaw('CREATE_ACCOUNT_BUTTON')}</StyledButton>\n      </Link>\n      <BottomActions>\n        <div>\n          {translateRaw('CREATE_WALLET_WITH_KEYSTORE_BOTTOM_ACTION_1')}{' '}\n          <Link to=\"/create-wallet/keystore\">\n            {translateRaw('CREATE_WALLET_WITH_KEYSTORE_BOTTOM_ACTION_2')}\n          </Link>\n        </div>\n        <div>\n          {translateRaw('CREATE_WALLET_UNLOCK_WALLET_BOTTOM_ACTION_1')}{' '}\n          <Link to=\"#\">{translateRaw('CREATE_WALLET_UNLOCK_WALLET_BOTTOM_ACTION_2')}</Link>\n        </div>\n      </BottomActions>\n    </ExtendedContentPanel>\n  );\n}\n\nexport default withRouter(CreateWallet);\n","import React from 'react';\nimport { Panel } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\n\nimport bankIcon from 'common/assets/images/illo-bank.svg';\nimport myCryptoIcon from 'common/assets/images/illo-with-mycrypto.svg';\n\nconst { SCREEN_SM, SCREEN_MD, SCREEN_XXL } = BREAK_POINTS;\nconst { GREYISH_BROWN } = COLORS;\n\nconst MainPanel = styled(Panel)`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nflex: 1;\npadding: 120px;\nmax-width: ${SCREEN_XXL};\n\n@media (max-width: ${SCREEN_MD}}) {\n  padding: 88px 148px;\n}\n\n@media (max-width: ${SCREEN_SM}) {\n  padding: 42px 12px;\n}\n`;\n\nconst Title = styled.p`\n  font-size: 35px;\n  font-weight: bold;\n  color: ${GREYISH_BROWN};\n  line-height: normal;\n  text-align: center;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 23px;\n    padding: 0 90px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 96px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-direction: column;\n    margin-top: 0;\n  }\n`;\n\nconst ContentItemWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  margin: 0 50px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 44px;\n  }\n`;\n\nconst ContentItemImage = styled.img`\n  height: 212px;\n  width: auto;\n  object-fit: contain;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 32px;\n    height: 168px;\n    width: auto;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 0;\n    height: 128px;\n    width: auto;\n  }\n`;\n\nconst ContentItemDescription = styled.p`\n  font-size: 30px;\n  font-weight: normal;\n  line-height: 1.5;\n  white-space: pre-line;\n  min-width: 400px;\n  color: ${GREYISH_BROWN};\n\n  @media (max-width: ${SCREEN_MD}) {\n    font-size: 24px;\n    max-width: 300px;\n  }\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 18px;\n    max-width: 244px;\n  }\n`;\n\nconst ContentItemTitle = styled(ContentItemDescription)`\n  line-height: 1;\n  font-weight: bold;\n  margin-top: 32px;\n`;\n\ninterface ContentItemProps {\n  icon: string;\n  description: string;\n  title: string;\n}\n\nconst ContentItem: React.SFC<ContentItemProps> = props => {\n  const { icon, title, description } = props;\n  return (\n    <ContentItemWrapper>\n      <ContentItemImage src={icon} />\n      <ContentItemTitle>{title}</ContentItemTitle>\n      <ContentItemDescription>{description}</ContentItemDescription>\n    </ContentItemWrapper>\n  );\n};\n\nexport default function KeepYourAssetsSafePanel() {\n  return (\n    <MainPanel basic={true}>\n      <Title>{translateRaw('HOME_KEEP_SAFE_TITLE')}</Title>\n      <Content>\n        <ContentItem\n          icon={bankIcon}\n          title={translateRaw('HOME_KEEP_SAFE_BANKS_TITLE')}\n          description={translateRaw('HOME_KEEP_SAFE_BANKS_DESCRIPTION')}\n        />\n        <ContentItem\n          icon={myCryptoIcon}\n          title={translateRaw('HOME_KEEP_SAFE_MYCRYPTO_TITLE')}\n          description={translateRaw('HOME_KEEP_SAFE_MYCRYPTO_DESCRIPTION')}\n        />\n      </Content>\n    </MainPanel>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Panel } from '@mycrypto/ui';\n\nimport translate from 'translations';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\n\nimport manageWalletsImage from 'common/assets/images/manage-your-wallets.svg';\nimport viewDashboardImage from 'common/assets/images/view-dashboard.svg';\nimport yourCryptoImage from 'common/assets/images/control-crypto.svg';\n\nimport manageWalletsImageMobile from 'common/assets/images/manage-your-wallets-mobile.svg';\nimport viewDashboardImageMobile from 'common/assets/images/view-dashboard-mobile.svg';\nimport yourCryptoImageMobile from 'common/assets/images/control-crypto-mobile.svg';\n\nconst { SCREEN_SM, SCREEN_MD, SCREEN_LG, SCREEN_XL, SCREEN_XXL } = BREAK_POINTS;\nconst { DARK_SLATE_BLUE } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 88px 148px;\n  max-width: ${SCREEN_XXL};\n\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 42px 0;\n  }\n`;\n\nconst TitleArea = styled.div`\n  text-align: center;\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-bottom: 20px;\n    padding: 0 12px;\n  }\n`;\n\nconst Title = styled.p`\n  font-size: 35px;\n  font-weight: bold;\n  color: ${DARK_SLATE_BLUE};\n  line-height: 1.5;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 23px;\n  }\n`;\n\nconst Description = styled.p`\n  font-size: 30px;\n  line-height: 1.5;\n  margin-top: 8px;\n  font-weight: normal;\n  color: ${DARK_SLATE_BLUE};\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 16px;\n  }\n`;\n\nconst FeaturesSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 32px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 0;\n  }\n`;\n\ninterface FeatureWrapperProps {\n  captionRight: boolean;\n}\n\n// prettier-ignore\nconst FeatureWrapper = styled.div<FeatureWrapperProps>`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  margin-bottom: 80px;\n  ${props => props.captionRight && 'text-align: right;'}\n\n  @media (min-width: ${SCREEN_LG}) {\n    flex-direction: ${props => (props.captionRight ? 'row-reverse' : 'row')};\n  }\n\n  @media (max-width: ${SCREEN_LG}) {\n    flex-direction: column;\n    margin-bottom: 0;\n  }\n`;\n\nconst FeatureCaptions = styled.div`\n  max-width: 500px;\n  width: 50%;\n  @media (max-width: ${SCREEN_LG}) {\n    width: 100%;\n    order: 1;\n  }\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 0 12px;\n  }\n`;\n\nconst FeatureTitle = styled.p`\n  font-size: 30px;\n  font-weight: bold;\n  color: ${DARK_SLATE_BLUE};\n  line-height: normal;\n\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 30px;\n  }\n  @media (max-width: ${SCREEN_LG}) {\n    margin-top: 80px;\n    text-align: center;\n  }\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 30px;\n    font-size: 20px;\n    text-align: center;\n    width: 100%;\n  }\n`;\n\nconst FeatureDescription = styled.p`\n  font-size: 21px;\n  line-height: 1.5;\n  margin-top: 8px;\n  font-weight: normal;\n  color: ${DARK_SLATE_BLUE};\n\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 21px;\n  }\n  @media (max-width: ${SCREEN_LG}) {\n    text-align: center;\n  }\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 16px;\n  }\n`;\n\nconst FeatureImage = styled.img`\n  width: auto;\n  max-width: 70%;\n  max-height: 550px;\n\n  @media (max-width: ${SCREEN_LG}) {\n    margin-top: 24px;\n    order: 2;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst FeatureMobileImage = styled.img`\n  display: none;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: block;\n    order: 2;\n  }\n\n  @media (max-width: 420px) {\n    width: 100%;\n  }\n`;\n\ninterface FeatureProps {\n  name: React.ReactElement<any>;\n  description: React.ReactElement<any>;\n  image: string;\n  mobileImage: string;\n  captionRight: boolean;\n}\n\nconst Feature: React.SFC<FeatureProps> = props => {\n  const { name, description, image, mobileImage, captionRight } = props;\n  return (\n    <FeatureWrapper captionRight={captionRight}>\n      <FeatureCaptions>\n        <FeatureTitle>{name}</FeatureTitle>\n        <FeatureDescription>{description}</FeatureDescription>\n      </FeatureCaptions>\n      <FeatureImage src={image} />\n      <FeatureMobileImage src={mobileImage} />\n    </FeatureWrapper>\n  );\n};\n\nexport default function FeaturesPanel() {\n  return (\n    <MainPanel basic={true}>\n      <TitleArea>\n        <Title>{translate('HOME_FEATURES_TITLE')}</Title>\n        <Description>{translate('HOME_FEATURES_DESCRIPTION')}</Description>\n      </TitleArea>\n      <FeaturesSection>\n        <Feature\n          name={translate('HOME_FEATURES_MANAGE_TITLE')}\n          description={translate('HOME_FEATURES_MANAGE_DESCRIPTION')}\n          image={manageWalletsImage}\n          mobileImage={manageWalletsImageMobile}\n          captionRight={false}\n        />\n        <Feature\n          name={translate('HOME_FEATURES_VIEW_TITLE')}\n          description={translate('HOME_FEATURES_VIEW_DESCRIPTION')}\n          image={viewDashboardImage}\n          mobileImage={viewDashboardImageMobile}\n          captionRight={true}\n        />\n        <Feature\n          name={translate('HOME_FEATURES_CONTROL_TITLE')}\n          description={translate('HOME_FEATURES_CONTROL_DESCRIPTION')}\n          image={yourCryptoImage}\n          mobileImage={yourCryptoImageMobile}\n          captionRight={false}\n        />\n      </FeaturesSection>\n    </MainPanel>\n  );\n}\n","import React from 'react';\nimport { Panel, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport translate from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { Link } from 'react-router-dom';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\nimport ovalIcon from 'common/assets/images/icn-oval.svg';\nimport swooshIcon from 'common/assets/images/icn-purple-swoosh.svg';\nimport sparklesIcon from 'common/assets/images/icn-sparkles-4.svg';\n\nconst { SCREEN_SM } = BREAK_POINTS;\nconst { DARK_SLATE_BLUE, BRIGHT_SKY_BLUE } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  padding: 84px 84px 46px 84px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  font-size: 30px;\n  text-align: center;\n  font-weight: bold;\n  line-height: normal;\n  color: ${DARK_SLATE_BLUE};\n  position: relative;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 25px;\n  }\n`;\n\nconst Sparkles = styled.img`\n  width: 44px;\n  height: 132px;\n  position: absolute;\n  top: -40px;\n  right: -30px;\n`;\n\nconst GetStartedButton = styled(Button)`\n  font-size: 18px;\n  margin-top: 60px;\n  width: 300px;\n  max-width: 300px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 15px;\n  }\n`;\n\nconst SupportLink = styled.div`\n  font-size: 18px;\n  text-align: center;\n  margin-top: 18px;\n  color: ${BRIGHT_SKY_BLUE};\n  line-height: normal;\n`;\n\nconst GraphicsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  margin-bottom: -50px;\n\n  @media (min-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst Swoosh = styled.img`\n  width: 47px;\n  height: 48px;\n  margin-left: 35px;\n  margin-top: 40px;\n`;\n\nconst Oval = styled.img`\n  width: 145px;\n  height: 123px;\n`;\n\nexport default function BottomActionPanel() {\n  return (\n    <>\n      <MainPanel basic={true}>\n        <Title>\n          {translate('HOME_BOTTOM_TITLE')}\n          <Sparkles src={sparklesIcon} />\n        </Title>\n        <Link to=\"/add-account\">\n          <GetStartedButton onClick={() => trackButtonClick('Get Started')}>\n            {translate('HOME_BOTTOM_GET_STARTED')}\n          </GetStartedButton>\n        </Link>\n        <a href={KNOWLEDGE_BASE_URL} target=\"_blank\" rel=\"noreferrer\">\n          <SupportLink onClick={() => trackButtonClick('Have Questions?')}>\n            {translate('HOME_BOTTOM_HELP')}\n          </SupportLink>\n        </a>\n      </MainPanel>\n      <GraphicsWrapper>\n        <Swoosh src={swooshIcon} />\n        <Oval src={ovalIcon} />\n      </GraphicsWrapper>\n    </>\n  );\n}\n\nconst trackButtonClick = (button: string) => {\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HOME, `${button} button clicked`);\n};\n","import React from 'react';\nimport { Panel } from '@mycrypto/ui';\nimport Slider from 'react-slick';\nimport styled from 'styled-components';\n\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport './SliderImports.scss';\n\nimport sparkles1Icon from 'common/assets/images/icn-sparkles-1.svg';\nimport sparkles2Icon from 'common/assets/images/icn-sparkles-2.svg';\nimport sparkles3Icon from 'common/assets/images/icn-sparkles-3.svg';\n\nconst { SCREEN_XS, SCREEN_SM, SCREEN_XXL } = BREAK_POINTS;\nconst { GREYISH_BROWN } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  padding: 98px 120px 93px 120px;\n  max-width: ${SCREEN_XXL};\n  width: 100%;\n  @media (max-width: ${SCREEN_SM}) {\n    padding-left: 0px;\n    padding-right: 0px;\n    padding-top: 30px;\n    padding-bottom: 20px;\n  }\n\n  .slick-slider {\n    width: 100%;\n\n    .slick-disabled {\n      display: none !important;\n    }\n\n    .slick-prev {\n      z-index: 9999;\n      left: 0px;\n      background: url(/common/assets/images/icn-more.svg) top left;\n      background-size: cover;\n      background-repeat: no-repeat;\n      transform: translate(0, -50%) rotate(180deg);\n\n      @media (min-width: ${SCREEN_XS}) and (max-width: ${SCREEN_SM}) {\n        left: calc(50% - 250px);\n      }\n\n      @media (max-width: ${SCREEN_XS}) {\n        left: 5px;\n      }\n    }\n\n    .slick-next {\n      right: 0px;\n      background: url(/common/assets/images/icn-more.svg) top left;\n      background-size: cover;\n      background-repeat: no-repeat;\n\n      @media (min-width: ${SCREEN_XS}) and (max-width: ${SCREEN_SM}) {\n        left: calc(50% + 200px);\n      }\n\n      @media (max-width: ${SCREEN_XS}) {\n        right: 5px;\n      }\n    }\n\n    button {\n      width: 24px;\n      height: 24px;\n\n      &:before {\n        opacity: 1;\n        content: '';\n      }\n    }\n  }\n`;\n\nconst TestimonialCardWrapper = styled.div`\n  padding-right: 50px;\n  padding-left: 50px;\n  padding-top: 50px;\n  max-width: 420px;\n  margin: auto;\n  color: ${GREYISH_BROWN};\n\n  @media (max-width: ${SCREEN_XS}) {\n    height: auto;\n  }\n`;\n\nconst TestimonialCardTextWrapper = styled.div`\n  position: relative;\n`;\n\nconst TestimonialCardText = styled.p`\n  font-size: 21px;\n  line-height: 1.4;\n  font-weight: normal;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 16px;\n  }\n`;\n\nconst TestimonialCardAuthor = styled.p`\n  font-size: 30px;\n  font-weight: bold;\n  line-height: 45px;\n  margin-top: 31px;\n  margin-bottom: 35px;\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 20px;\n  }\n`;\n\nconst Sparkles1 = styled.img`\n  width: 82px;\n  height: 78px;\n  position: absolute;\n  top: -45px;\n  left: -55px;\n`;\n\nconst Sparkles2 = styled.img`\n  width: 57px;\n  height: 67px;\n  position: absolute;\n  top: 10px;\n  right: -55px;\n`;\n\nconst Sparkles3 = styled.img`\n  width: 41px;\n  height: 39px;\n  position: absolute;\n  bottom: -30px;\n  right: -15px;\n`;\n\ninterface TestimonialCardProps {\n  text: string;\n  author: string;\n  sparkles: JSX.Element;\n  sparklesPosition: string;\n}\n\nconst TestimonialCard: React.SFC<TestimonialCardProps> = ({\n  text,\n  author,\n  sparkles,\n  sparklesPosition\n}) => {\n  return (\n    <TestimonialCardWrapper>\n      <TestimonialCardTextWrapper>\n        {sparklesPosition === 'top' && sparkles}\n        <TestimonialCardText>{text}</TestimonialCardText>\n        {sparklesPosition === 'middle' && sparkles}\n      </TestimonialCardTextWrapper>\n      <TestimonialCardAuthor>\n        {author}\n        {sparklesPosition === 'bottom' && sparkles}\n      </TestimonialCardAuthor>\n    </TestimonialCardWrapper>\n  );\n};\n\nconst testimonials = [\n  {\n    author: 'AtLeastSignificant',\n    text:\n      'MyCrypto is the definition of a successful grass-roots movement for the community, by the community.'\n  },\n  {\n    author: 'Nick Johnson',\n    text:\n      'MyCrypto provides some of the best and most carefully thought-through tools available in the Ethereum community.'\n  },\n  {\n    author: 'Raymond Durk',\n    text:\n      'MyCrypto has consistently released the perfect balance between personal security, user experience, and new features.'\n  },\n  {\n    author: 'Andrew Coathup',\n    text:\n      'I love the MyCrypto team, with their focus on education and security for the entire community.  Friendly, responsive, passionate and generous.'\n  },\n  {\n    author: 'James Ryan Moreau',\n    text:\n      'MyCrypto is one of the most responsive teams in the entire blockchain space when it comes to thinking about users and their general well-being.'\n  },\n  {\n    author: 'Tim Coulter',\n    text:\n      'MyCrypto is the leader in blockchain wallets. Their watchful eye on security and their close proximity to users put them on the front lines, shepherding users through the new and exciting world of crypto.'\n  }\n];\n\nconst sparkleComponents = [\n  <Sparkles1 key={0} src={sparkles1Icon} />,\n  <Sparkles2 key={1} src={sparkles2Icon} />,\n  <Sparkles3 key={2} src={sparkles3Icon} />\n];\nconst sparklesPositions = ['top', 'bottom', 'middle'];\n\nexport default function TestimonialsPanel() {\n  const settings = {\n    dots: false,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    arrows: true,\n    swipe: true,\n    responsive: [\n      {\n        breakpoint: 1200,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2\n        }\n      },\n      {\n        breakpoint: 820,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1\n        }\n      }\n    ]\n  };\n\n  return (\n    <MainPanel basic={true}>\n      <Slider {...settings}>\n        {testimonials.map((testimonial, index) => (\n          <TestimonialCard\n            key={index}\n            text={`\"${testimonial.text}\"`}\n            author={`-${testimonial.author}`}\n            sparkles={sparkleComponents[index % 3]}\n            sparklesPosition={sparklesPositions[index % 3]}\n          />\n        ))}\n      </Slider>\n    </MainPanel>\n  );\n}\n","import React from 'react';\nimport { Panel, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport translate from 'translations';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\nimport { GITHUB_RELEASE_NOTES_URL as DEFAULT_LINK } from 'v2/config';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\n\nimport vaultIcon from 'common/assets/images/icn-vault2.svg';\nimport protectIcon from 'common/assets/images/icn-protect.svg';\nimport openSourceIcon from 'common/assets/images/icn-opensource.svg';\n\nconst { SCREEN_SM, SCREEN_MD, SCREEN_XL, SCREEN_XXL } = BREAK_POINTS;\nconst { GREYISH_BROWN } = COLORS;\n\nconst MainPanel = styled(Panel)`\npadding: 0;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nflex: 1;\npadding: 120px;\nmax-width: ${SCREEN_XXL};\n\n@media (max-width: ${SCREEN_MD}}) {\n  padding: 88px 148px;\n}\n\n@media (max-width: ${SCREEN_SM}) {\n  padding: 42px 12px;\n}\n`;\n\nconst TitleArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  order: 1;\n`;\n\nconst Title = styled.p`\n  font-size: 35px;\n  font-weight: bold;\n  color: ${GREYISH_BROWN};\n  line-height: normal;\n  max-width: 559px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 23px;\n  }\n`;\n\nconst Description = styled.p`\n  font-size: 30px;\n  line-height: 1;\n  margin-top: 2px;\n  font-weight: normal;\n  color: ${GREYISH_BROWN};\n  text-align: center;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 16px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 96px;\n  order: 2;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-direction: column;\n    margin-top: 18px;\n    order: 3;\n  }\n`;\n\nconst ContentItemWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  margin: 0 50px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 44px;\n  }\n`;\n\nconst ContentItemImage = styled.img`\n  height: 138px;\n  width: auto;\n  object-fit: contain;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 32px;\n    width: 150px;\n    height: 150px;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 0;\n    width: 112px;\n    height: 112px;\n  }\n`;\n\nconst ContentItemDescription = styled.p`\n  font-size: 2.2vw;\n  font-weight: normal;\n  line-height: 1.5;\n  margin-top: 25px;\n  color: ${GREYISH_BROWN};\n\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 30px;\n  }\n  @media (max-width: ${SCREEN_MD}) {\n    font-size: 24px;\n    max-width: 300px;\n  }\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 17px;\n    font-size: 18px;\n    max-width: 244px;\n  }\n`;\n\nconst Actions = styled.div`\n  margin-top: 90px;\n  display: flex;\n  order: 3;\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 20px;\n    flex-direction: column;\n    order: 2;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  font-size: 18px;\n  margin: 0 50px;\n  width: 300px;\n  max-width: 300px;\n\n  @media (max-width: ${SCREEN_MD}) {\n    margin-top: 15px;\n  }\n`;\n\ninterface ContentItemProps {\n  icon: string;\n  description: React.ReactElement<any>;\n}\n\nconst ContentItem: React.SFC<ContentItemProps> = props => {\n  const { icon, description } = props;\n  return (\n    <ContentItemWrapper>\n      <ContentItemImage src={icon} />\n      <ContentItemDescription>{description}</ContentItemDescription>\n    </ContentItemWrapper>\n  );\n};\n\ninterface PeaceOfMindPanelProps {\n  downloadLink: string;\n}\n\nexport default function PeaceOfMindPanel(props: PeaceOfMindPanelProps) {\n  const { downloadLink } = props;\n\n  return (\n    <MainPanel basic={true}>\n      <TitleArea>\n        <Title>{translate('HOME_PEACE_OF_MIND_HEADER')}</Title>\n        <Description>{translate('HOME_PEACE_OF_MIND_DESCRIPTION')}</Description>\n      </TitleArea>\n      <Content>\n        <ContentItem icon={vaultIcon} description={translate('HOME_PEACE_OF_MIND_VAULT')} />\n        <ContentItem icon={protectIcon} description={translate('HOME_PEACE_OF_MIND_PROTECT')} />\n        <ContentItem\n          icon={openSourceIcon}\n          description={translate('HOME_PEACE_OF_MIND_OPENSOURCE')}\n        />\n      </Content>\n      <Actions>\n        <Link to=\"/add-account\">\n          <ActionButton onClick={trackGetStartedClick}>\n            {translate('HOME_PEACE_OF_MIND_GET_STARTED')}\n          </ActionButton>\n        </Link>\n        <ActionButton onClick={() => openDownloadLink(downloadLink)}>\n          {translate('HOME_PEACE_OF_MIND_DOWNLOAD')}\n        </ActionButton>\n      </Actions>\n    </MainPanel>\n  );\n}\n\nconst trackGetStartedClick = () => {\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HOME, `Get Started on Web button clicked`);\n};\n\nconst openDownloadLink = (link: string) => {\n  const target = link === DEFAULT_LINK ? '_blank' : '_self';\n  window.open(link, target);\n  AnalyticsService.instance.track(\n    ANALYTICS_CATEGORIES.HOME,\n    `Download the Desktop App button clicked`\n  );\n};\n","import React from 'react';\nimport { Panel, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport { GITHUB_RELEASE_NOTES_URL as DEFAULT_LINK } from 'v2/config';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\n\nimport champagneIcon from 'common/assets/images/icn-champagne-2.svg';\n\nconst { SCREEN_SM, SCREEN_MD, SCREEN_XXL } = BREAK_POINTS;\n\nconst MainPanel = styled(Panel)`\n  padding: 0;\n  display: flex;\n  justify-content: space-between;\n  flex: 1;\n  padding: 148px;\n  max-width: ${SCREEN_XXL};\n\n  @media (max-width: ${SCREEN_MD}) {\n    padding: 88px 148px;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 50px 12px 42px 12px;\n  }\n`;\n\nconst CallToAction = styled.div`\n  display: flex;\n  flex-direction: column;\n  order: 1;\n\n  @media (max-width: ${SCREEN_MD}) {\n    order: 2;\n    align-items: center;\n    text-align: center;\n  }\n`;\n\nconst Title = styled.p`\n  font-size: 35px;\n  font-weight: bold;\n  color: white;\n  line-height: normal;\n  max-width: 559px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 23px;\n  }\n`;\n\nconst Description = styled.p`\n  max-width: 646px;\n  font-size: 30px;\n  line-height: 1.5;\n  margin-top: 8px;\n  color: white;\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 16px;\n  }\n`;\n\nconst DownloadButton = styled(Button)`\n  width: 100%;\n  max-width: 300px;\n  font-size: 18px;\n  font-weight: normal;\n  margin-top: 26px;\n`;\n\nconst Image = styled.img`\n  margin-left: 50px;\n  width: 244px;\n  height: 244px;\n  order: 2;\n\n  @media (max-width: ${SCREEN_MD}) {\n    order: 1;\n    margin: 0 42px 42px 0;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    width: 127px;\n    height: 127px;\n  }\n`;\n\ninterface Props {\n  OSName: string;\n  downloadLink: string;\n}\n\nexport default function DownloadAppPanel({ OSName, downloadLink }: Props) {\n  return (\n    <MainPanel basic={true}>\n      <CallToAction>\n        <Title>{translate('HOME_DOWNLOAD_TITLE')}</Title>\n        <Description>{translate('HOME_DOWNLOAD_DESCRIPTION')}</Description>\n        <DownloadButton onClick={() => openDownloadLink(downloadLink, OSName)}>\n          {translate('HOME_DOWNLOAD_BUTTON')} {OSName}\n        </DownloadButton>\n      </CallToAction>\n      <Image className=\"image\" src={champagneIcon} />\n    </MainPanel>\n  );\n}\n\nconst openDownloadLink = (link: string, os: string) => {\n  const target = link === DEFAULT_LINK ? '_blank' : '_self';\n  window.open(link, target);\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HOME, `${os} download button clicked`);\n};\n","import React, { Component } from 'react';\nimport { Panel } from '@mycrypto/ui';\nimport Slider from 'react-slick';\nimport styled from 'styled-components';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\n\nimport translate, { translateRaw } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { WalletId } from 'v2/types';\nimport './SliderImports.scss';\n\nimport metamaskIcon from 'common/assets/images/wallets/metamask-2.svg';\nimport trustIcon from 'common/assets/images/wallets/trust-2.svg';\nimport ledgerIcon from 'common/assets/images/wallets/ledger.svg';\nimport trezorIcon from 'common/assets/images/wallets/trezor.svg';\nimport paritySignerIcon from 'common/assets/images/wallets/parity-signer.svg';\nimport safeTIcon from 'common/assets/images/wallets/safe-t.png';\n\nconst { SCREEN_SM, SCREEN_LG, SCREEN_XXL } = BREAK_POINTS;\nconst { DARK_SLATE_BLUE, GREYISH_BROWN } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  padding: 25px 148px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  max-width: ${SCREEN_XXL};\n  width: 100%;\n\n  @media (max-width: ${SCREEN_LG}) {\n    flex-direction: column;\n    text-align: center;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 25px 12px 50px 12px;\n  }\n\n  .slick-dots {\n    bottom: -35px;\n\n    li {\n      margin: 0;\n      height: 0px;\n      width: 16px;\n    }\n\n    button:before {\n      font-size: 12px;\n      color: #ece8e8;\n      opacity: 1;\n      line-height: 12px;\n      width: 12px;\n      height: 12px;\n    }\n\n    .slick-active button:before {\n      color: #c5c2c2;\n      opacity: 1;\n    }\n  }\n\n  @media (min-width: ${SCREEN_SM}) {\n    .slick-dots {\n      display: none !important;\n    }\n\n    .slick-track {\n      min-width: 800px !important;\n    }\n  }\n`;\n\nconst Header = styled.div`\n  margin-right: 40px;\n  color: ${GREYISH_BROWN};\n\n  @media (max-width: ${SCREEN_LG}) {\n    margin-right: 0px;\n  }\n`;\n\nconst HeaderTitle = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 0;\n  line-height: normal;\n`;\n\nconst HeaderDescription = styled.p`\n  font-size: 16px;\n  font-weight: normal;\n  line-height: normal;\n\n  @media (max-width: ${SCREEN_LG}) {\n    margin-bottom: 40px;\n  }\n`;\n\nconst Wallets = styled.div`\n  max-width: 800px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    max-width: 100vw;\n  }\n`;\n\nconst WalletCardWrapper = styled.div`\n  background-color: white;\n  margin: 3px 9px;\n  border-radius: 3px;\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.03), 0 1px 0 0 rgba(0, 0, 0, 0.05),\n    0 1px 3px 0 rgba(0, 0, 0, 0.1);\n`;\n\ninterface WalletCardContentProps {\n  isMobile: boolean;\n  showMobile?: boolean;\n}\n\n// prettier-ignore\nconst WalletCardContent = styled.div<WalletCardContentProps>`\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 140px;\n  height: 140px;\n  cursor: pointer;\n  display: ${props => (props.showMobile ? 'none' : 'flex')};\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: ${props =>\n      (props.showMobile && props.isMobile) || !props.isMobile ? 'flex' : 'none'};\n  }\n\n  &:hover {\n    opacity: 0.7;\n  }\n`;\n\nconst WalletCardImg = styled.img`\n  width: auto;\n  max-width: 53px;\n  height: 53px;\n  display: inline;\n`;\n\nconst WalletCardDescription = styled.p`\n  font-size: 13px;\n  font-weight: normal;\n  color: ${DARK_SLATE_BLUE};\n  margin-top: 5px;\n`;\n\ninterface WalletCardProps {\n  src: string;\n  text: string;\n  mobileSrc?: string;\n  mobileText?: string;\n  walletName: string;\n}\n\nclass WalletCard extends Component<WalletCardProps & RouteComponentProps<{}>> {\n  public handleWalletClick = (wallet: string) => {\n    const { walletName, history } = this.props;\n    history.push(`/add-account/${walletName}`);\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HOME, `${wallet} wallet button clicked`);\n  };\n\n  public render() {\n    const { src, text, mobileSrc, mobileText } = this.props;\n    return (\n      <WalletCardWrapper>\n        <WalletCardContent isMobile={!!mobileSrc} onClick={() => this.handleWalletClick(text)}>\n          <WalletCardImg src={src} alt={text} />\n          <WalletCardDescription>{text}</WalletCardDescription>\n        </WalletCardContent>\n        {mobileSrc && (\n          <WalletCardContent\n            isMobile={!mobileSrc}\n            showMobile={true}\n            onClick={() => this.handleWalletClick(mobileText || text)}\n          >\n            <WalletCardImg src={mobileSrc} alt={mobileText} />\n            <WalletCardDescription>{mobileText}</WalletCardDescription>\n          </WalletCardContent>\n        )}\n      </WalletCardWrapper>\n    );\n  }\n}\nconst WalletCardWithRouter = withRouter(WalletCard);\n\nexport default function CompatibleWalletsPanel() {\n  const settings = {\n    dots: true,\n    infinite: false,\n    speed: 50,\n    slidesToShow: 5,\n    arrows: false,\n    swipe: false,\n    variableWidth: true,\n    initialSlide: 2,\n    responsive: [\n      {\n        breakpoint: 820,\n        settings: {\n          swipe: true,\n          slidesToShow: 1,\n          centerMode: true,\n          swipeToSlide: false,\n          initialSlide: 1\n        }\n      },\n      {\n        breakpoint: 470,\n        settings: {\n          swipe: true,\n          slidesToShow: 1,\n          centerMode: true,\n          swipeToSlide: true,\n          initialSlide: 0\n        }\n      }\n    ]\n  };\n\n  return (\n    <MainPanel basic={true}>\n      <Header>\n        <HeaderTitle>{translate('HOME_WALLETS_HEADER')}</HeaderTitle>\n        <HeaderDescription>{translate('HOME_WALLETS_DESCRIPTION')}</HeaderDescription>\n      </Header>\n      <Wallets>\n        <Slider {...settings}>\n          <WalletCardWithRouter\n            src={metamaskIcon}\n            text={translateRaw('X_METAMASK')}\n            mobileSrc={trustIcon}\n            mobileText={translateRaw('X_TRUST')}\n            walletName={WalletId.METAMASK}\n          />\n          <WalletCardWithRouter\n            src={ledgerIcon}\n            text={translateRaw('X_LEDGER')}\n            walletName={WalletId.LEDGER_NANO_S}\n          />\n          <WalletCardWithRouter\n            src={trezorIcon}\n            text={translateRaw('X_TREZOR')}\n            walletName={WalletId.TREZOR}\n          />\n          <WalletCardWithRouter\n            src={paritySignerIcon}\n            text={translateRaw('X_PARITYSIGNER')}\n            walletName={WalletId.PARITY_SIGNER}\n          />\n          <WalletCardWithRouter\n            src={safeTIcon}\n            text={translateRaw('X_SAFE_T')}\n            walletName={WalletId.SAFE_T_MINI}\n          />\n        </Slider>\n      </Wallets>\n    </MainPanel>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Panel } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport translate, { translateRaw } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { COLORS, BREAK_POINTS } from 'v2/theme';\nimport { ROUTE_PATHS } from 'v2/config';\n\n// Legacy\nimport titleIllustration from 'common/assets/images/title-illustration.svg';\nimport newWalletIcon from 'common/assets/images/icn-new-wallet.svg';\nimport existingWalletIcon from 'common/assets/images/icn-existing-wallet.svg';\nimport signInIcon from 'common/assets/images/returning.svg';\n\nconst { SCREEN_SM, SCREEN_LG, SCREEN_XL, SCREEN_XXL } = BREAK_POINTS;\nconst { GREYISH_BROWN, SILVER } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  padding-left: 148px;\n  padding-bottom: 24px;\n  display: flex;\n  width: 100%;\n  max-width: ${SCREEN_XXL};\n\n  @media (min-width: ${SCREEN_XXL}) {\n    padding: 0 148px 24px 148px;\n  }\n\n  @media (max-width: ${SCREEN_LG}) {\n    padding-left: 64px;\n  }\n\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 0 12px;\n  }\n`;\n\nconst TitleImageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  width: 60%;\n  background-color: white;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: none;\n  }\n\n  img {\n    max-width: 88%;\n    margin-right: 32px;\n  }\n`;\n\nconst ActionsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 40%;\n  background-color: white;\n  padding-top: 30px;\n  @media (max-width: ${SCREEN_SM}) {\n    flex: 1;\n    padding: 0 0 24px 0;\n    align-items: center;\n  }\n`;\n\nconst Title = styled.p`\n  font-weight: bold;\n  font-size: 3.1vw;\n  font-weight: 900;\n  line-height: normal;\n  color: ${GREYISH_BROWN};\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 25px;\n  }\n\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 45px;\n  }\n`;\n\nconst Description = styled.p`\n  font-size: 2vw;\n  letter-spacing: normal;\n  margin-top: 8px;\n  font-weight: normal;\n  max-width: 400px;\n  color: ${GREYISH_BROWN};\n  white-space: pre-line;\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 0;\n    font-size: 20px;\n    text-align: center;\n    max-width: 250px;\n  }\n\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 30px;\n  }\n`;\n\nconst MobileImage = styled.img`\n  max-width: 375px;\n  width: auto;\n\n  @media (min-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst ActionCardsWrapper = styled.div`\n  margin-top: 1.2vw;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: flex;\n    flex-direction: row;\n  }\n`;\n\nconst ActionCardWrapper = styled.div`\n  margin-bottom: 15px;\n  border-radius: 3px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n  border: solid 1px ${SILVER};\n  cursor: pointer;\n  width: 30vw;\n  max-width: 450px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin: 0 6px;\n    max-width: 105px;\n  }\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst LinkWrapper = styled(Link)`\n  padding: 1vw 2vw;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n\n  @media (max-width: ${SCREEN_SM}) {\n    flex-direction: column;\n    align-items: center;\n    padding: 14px 6px;\n  }\n`;\n\nconst ActionCaptions = styled.div`\n  order: 1;\n  @media (max-width: ${SCREEN_SM}) {\n    order: 2;\n    text-align: center;\n    margin-top: 9px;\n  }\n`;\n\nconst ActionName = styled.p`\n  font-size: 1.6vw;\n  font-weight: bold;\n  margin-bottom: 0;\n  color: ${GREYISH_BROWN};\n\n  @media (max-width: ${SCREEN_SM}) {\n    font-size: 16px;\n    line-height: normal;\n  }\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 26px;\n  }\n`;\n\nconst ActionDescription = styled.p`\n  font-size: 1.1vw;\n  font-weight: normal;\n  color: ${GREYISH_BROWN};\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-top: 5px;\n    font-size: 12px;\n    line-height: 1.2;\n  }\n  @media (min-width: ${SCREEN_XL}) {\n    font-size: 20px;\n  }\n`;\n\nconst ActionIcon = styled.img`\n  width: 4vw;\n  height: auto;\n  max-width: 60px;\n  max-height: 60px;\n  object-fit: contain;\n  order: 2;\n\n  @media (max-width: ${SCREEN_SM}) {\n    order: 1;\n    width: 50px;\n    height: 50px;\n  }\n`;\n\ninterface ActionCardProps {\n  name: string;\n  description: React.ReactElement<any>;\n  icon: string;\n  link: string;\n  eventAction: string;\n}\n\nconst trackButtonClick = (button: string) => {\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.HOME, `${button} button clicked`);\n};\n\nconst ActionCard: React.SFC<ActionCardProps> = props => {\n  const { name, description, icon, link, eventAction } = props;\n  return (\n    <ActionCardWrapper onClick={() => trackButtonClick(eventAction)}>\n      <LinkWrapper to={link}>\n        <ActionCaptions>\n          <ActionName>{name}</ActionName>\n          <ActionDescription>{description}</ActionDescription>\n        </ActionCaptions>\n        <ActionIcon src={icon} alt={name} className=\"icon\" />\n      </LinkWrapper>\n    </ActionCardWrapper>\n  );\n};\n\nexport default function GetStartedPanel() {\n  return (\n    <MainPanel basic={true}>\n      <ActionsWrapper>\n        <Title>{translate('HOME_GET_STARTED_TITLE')}</Title>\n        <Description>{translate('HOME_GET_STARTED_DESCRIPTION')}</Description>\n        <MobileImage src={titleIllustration} alt=\"Title Illustration\" />\n        <ActionCardsWrapper>\n          <ActionCard\n            name={translateRaw('HOME_GET_STARTED_NEED_WALLET_TITLE')}\n            description={translate('HOME_GET_STARTED_NEED_WALLET_DESCRIPTION')}\n            icon={newWalletIcon}\n            link={ROUTE_PATHS.CREATE_WALLET.path}\n            eventAction=\"I need a wallet\"\n          />\n          <ActionCard\n            name={translateRaw('HOME_GET_STARTED_HAVE_WALLET_TITLE')}\n            description={translate('HOME_GET_STARTED_HAVE_WALLET_DESCRIPTION')}\n            icon={existingWalletIcon}\n            link={ROUTE_PATHS.ADD_ACCOUNT.path}\n            eventAction=\"I have a wallet\"\n          />\n          <ActionCard\n            name={translateRaw('HOME_GET_STARTED_USED_TITLE')}\n            description={translate('HOME_GET_STARTED_USED_DESCRIPTION')}\n            icon={signInIcon}\n            link={ROUTE_PATHS.DASHBOARD.path}\n            eventAction=\"I've used MyCrypto\"\n          />\n        </ActionCardsWrapper>\n      </ActionsWrapper>\n      <TitleImageWrapper>\n        <img src={titleIllustration} alt=\"Title Illustration\" />\n      </TitleImageWrapper>\n    </MainPanel>\n  );\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport {\n  GetStartedPanel,\n  DownloadAppPanel,\n  CompatibleWalletsPanel,\n  PeaceOfMindPanel,\n  TestimonialsPanel,\n  BottomActionPanel,\n  FeaturesPanel,\n  KeepYourAssetsSafePanel\n} from './components';\nimport { getFeaturedOS } from 'v2/utils';\nimport { GithubService } from 'v2/services/ApiService';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { GITHUB_RELEASE_NOTES_URL as DEFAULT_LINK, OS } from 'v2/config';\n\nconst { SILVER, DARK_SLATE_BLUE, WHITE } = COLORS;\n\ninterface SectionProps {\n  color?: string;\n}\n\nconst HomeWrapper = styled.section`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Section = styled.section`\n  width: 100%;\n  background-color: ${(props: SectionProps) => props.color};\n  display: flex;\n  justify-content: center;\n`;\n\nconst BottomSection = styled(Section)`\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    flex-direction: column;\n    align-items: center;\n  }\n`;\n\nconst OSNames: { [key: string]: string } = {\n  [OS.WINDOWS]: 'Windows',\n  [OS.MAC]: 'macOS',\n  [OS.LINUX64]: 'Linux (64-bit)'\n};\n\nconst featuredOS = getFeaturedOS();\n\nexport default class Home extends Component {\n  public state = {\n    appDownloadLink: DEFAULT_LINK,\n    OSName: OSNames[featuredOS]\n  };\n\n  public componentDidMount = async () => {\n    try {\n      const { releaseUrls } = await GithubService.instance.getReleasesInfo();\n      const currentPlatformURL = releaseUrls[featuredOS] || DEFAULT_LINK;\n      this.setState({ appDownloadLink: currentPlatformURL });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  public render() {\n    return (\n      <HomeWrapper>\n        <Section>\n          <GetStartedPanel />\n        </Section>\n        <Section color={SILVER}>\n          <CompatibleWalletsPanel />\n        </Section>\n        <Section color={WHITE}>\n          <FeaturesPanel />\n        </Section>\n        <Section color={DARK_SLATE_BLUE}>\n          <DownloadAppPanel downloadLink={this.state.appDownloadLink} OSName={this.state.OSName} />\n        </Section>\n        <Section color={SILVER}>\n          <KeepYourAssetsSafePanel />\n        </Section>\n        <Section color={WHITE}>\n          <PeaceOfMindPanel downloadLink={this.state.appDownloadLink} />\n        </Section>\n        <Section color={SILVER}>\n          <TestimonialsPanel />\n        </Section>\n        <BottomSection>\n          <BottomActionPanel />\n        </BottomSection>\n      </HomeWrapper>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate, { translateRaw } from 'translations';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { KNOWLEDGE_BASE_URL, CRYPTOSCAMDB, DOWNLOAD_MYCRYPTO_LINK } from 'v2/config';\n\nimport privateIcon from 'common/assets/images/onboarding/icn-key-mnemonic.svg';\nimport phishingIcon from 'common/assets/images/onboarding/icn-phishing.svg';\nimport jsonIcon from 'common/assets/images/onboarding/icn-json.svg';\nimport myCryptoIcon from 'common/assets/images/onboarding/icn-mnycrpto-app.svg';\n\nconst { SCREEN_XS, SCREEN_MD } = BREAK_POINTS;\nconst { BRIGHT_SKY_BLUE } = COLORS;\n\nconst ResourceLink = styled.a`\n  @media (min-width: ${SCREEN_MD}) {\n    margin-top: 60px;\n  }\n`;\n\nconst ResourceItem = styled(Button)`\n  width: 200px;\n  padding-left: 0px;\n  padding-right: 0px;\n  font-weight: normal;\n  font-size: 17px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 15px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  text-align: left;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-direction: column;\n  }\n`;\n\nconst TipItem = styled.div`\n  flex-basis: 50%;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-basis: 100%;\n  }\n`;\n\nconst TipIconWrapper = styled.div`\n  min-width: 50px;\n  min-height: 50px;\n  margin-right: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface TipIconProps {\n  width: number;\n  height: number;\n}\n\nconst TipIcon = styled.img<TipIconProps>`\n  width: ${props => props.width}px;\n  height: ${props => props.height}px;\n`;\n\nconst TipText = styled.p`\n  font-weight: normal;\n  margin: 0;\n\n  a {\n    font-weight: bold;\n    color: ${BRIGHT_SKY_BLUE};\n  }\n`;\n\nexport default function OnboardingResponsibleNotification() {\n  return (\n    <NotificationWrapper\n      alignCenterOnSmallScreen={true}\n      tagline={translate('NOTIFICATIONS_ONBOARDING_TAGLINE')}\n      title={`${translateRaw('NOTIFICATIONS_ONBOARDING_RESPONSIBLE_TITLE')}:`}\n      resources={\n        <ResourceLink href={KNOWLEDGE_BASE_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n          <ResourceItem secondary={true}>{translate('NOTIFICATIONS_ONBOARDING_MORE')}</ResourceItem>\n        </ResourceLink>\n      }\n    >\n      <Content>\n        <TipItem>\n          <TipIconWrapper>\n            <TipIcon width={40} height={40} src={privateIcon} />\n          </TipIconWrapper>\n          <TipText>{translate('NOTIFICATIONS_ONBOARDING_RESPONSIBLE_PRIVATE')}</TipText>\n        </TipItem>\n        <TipItem>\n          <TipIconWrapper>\n            <TipIcon width={40} height={40} src={phishingIcon} />\n          </TipIconWrapper>\n          <TipText>\n            {translate('NOTIFICATIONS_ONBOARDING_RESPONSIBLE_PHISHING', {\n              $link: CRYPTOSCAMDB\n            })}\n          </TipText>\n        </TipItem>\n        <TipItem>\n          <TipIconWrapper>\n            <TipIcon width={30} height={40} src={jsonIcon} />\n          </TipIconWrapper>\n          <TipText>{translate('NOTIFICATIONS_ONBOARDING_RESPONSIBLE_JSON')}</TipText>\n        </TipItem>\n        <TipItem>\n          <TipIconWrapper>\n            <TipIcon width={50} height={40} src={myCryptoIcon} />\n          </TipIconWrapper>\n          <TipText>\n            {translate('NOTIFICATIONS_ONBOARDING_RESPONSIBLE_MYCRYPTO', {\n              $link: DOWNLOAD_MYCRYPTO_LINK\n            })}\n          </TipText>\n        </TipItem>\n      </Content>\n    </NotificationWrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate, { translateRaw } from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\nimport cantAccessIcon from 'common/assets/images/onboarding/icn-cant-access.svg';\nimport cantModifyIcon from 'common/assets/images/onboarding/icn-cant-modify.svg';\nimport cantReverseIcon from 'common/assets/images/onboarding/icn-cant-reverse.svg';\nimport cantFreezeIcon from 'common/assets/images/onboarding/icn-cant-freeze.svg';\n\nconst { SCREEN_XS, SCREEN_MD } = BREAK_POINTS;\n\nconst ResourceLink = styled.a`\n  @media (min-width: ${SCREEN_MD}) {\n    margin-top: 60px;\n  }\n`;\n\nconst ResourceItem = styled(Button)`\n  width: 200px;\n  padding-left: 0px;\n  padding-right: 0px;\n  font-weight: normal;\n  font-size: 17px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 15px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  text-align: left;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-direction: column;\n  }\n`;\n\nconst TipItem = styled.div`\n  flex-basis: 50%;\n  font-weight: normal;\n  margin-bottom: 10px;\n  display: flex;\n  align-items: center;\n\n  @media (max-width: ${SCREEN_MD}) {\n    flex-basis: 100%;\n  }\n`;\n\nconst TipIcon = styled.img`\n  width: 50px;\n  height: 50px;\n  margin-right: 10px;\n`;\n\nexport default function OnboardingPleaseUnderstandNotification() {\n  return (\n    <NotificationWrapper\n      alignCenterOnSmallScreen={true}\n      tagline={translate('NOTIFICATIONS_ONBOARDING_TAGLINE')}\n      title={`${translateRaw('NOTIFICATIONS_ONBOARDING_PLEASE_UNDERSTAND_TITLE')}:`}\n      resources={\n        <ResourceLink href={KNOWLEDGE_BASE_URL} target=\"_blank\" rel=\"noopener noreferrer\">\n          <ResourceItem secondary={true}>{translate('NOTIFICATIONS_ONBOARDING_MORE')}</ResourceItem>\n        </ResourceLink>\n      }\n    >\n      <Content>\n        <TipItem>\n          <TipIcon src={cantAccessIcon} />\n          {translate('NOTIFICATIONS_ONBOARDING_PLEASE_UNDERSTAND_ACCESS')}\n        </TipItem>\n        <TipItem>\n          <TipIcon src={cantModifyIcon} />\n          {translate('NOTIFICATIONS_ONBOARDING_PLEASE_UNDERSTAND_MODIFY')}\n        </TipItem>\n        <TipItem>\n          <TipIcon src={cantReverseIcon} />\n          {translate('NOTIFICATIONS_ONBOARDING_PLEASE_UNDERSTAND_REVERSE')}\n        </TipItem>\n        <TipItem>\n          <TipIcon src={cantFreezeIcon} />\n          {translate('NOTIFICATIONS_ONBOARDING_PLEASE_UNDERSTAND_FREEZE')}\n        </TipItem>\n      </Content>\n    </NotificationWrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\n// Legacy\nimport sadWalletIcon from 'common/assets/images/icn-sad-wallet.svg';\nimport howBuyIcon from 'common/assets/images/icn-how-do-i-buy-crypto.svg';\nimport dontLoseCryptoIcon from 'common/assets/images/icn-don-t-lose-crypto.svg';\nimport questionsIcon from 'common/assets/images/icn-questions.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItemWrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  width: 140px;\n  font-weight: normal;\n  font-size: 16px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 12px;\n    max-width: 105px;\n  }\n`;\n\nconst Image = styled.img`\n  width: 50px;\n  height: 51px;\n  margin-bottom: 10px;\n`;\n\ninterface ResourceItemProps {\n  src: string;\n  title: React.ReactElement<any>;\n  link: string;\n}\n\nconst ResourceItem: React.SFC<ResourceItemProps> = ({ src, title, link }) => {\n  return (\n    <ResourceItemWrapper href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Image src={src} />\n      {title}\n    </ResourceItemWrapper>\n  );\n};\n\nconst getResources = () => {\n  return (\n    <>\n      <ResourceItem\n        src={howBuyIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_BUY')}\n        link=\"/how-to-buy\"\n      />\n      <ResourceItem\n        src={dontLoseCryptoIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_LOSE')}\n        link=\"/dont-lose-crypto\"\n      />\n      <ResourceItem\n        src={questionsIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_SUPPORT')}\n        link={KNOWLEDGE_BASE_URL}\n      />\n    </>\n  );\n};\n\ninterface NotificationProps {\n  address: string;\n}\n\nexport default function WalletCreatedNotification({ address }: NotificationProps) {\n  return (\n    <NotificationWrapper\n      alignCenterOnSmallScreen={true}\n      leftImg={{\n        src: sadWalletIcon,\n        width: '71px',\n        height: '70px',\n        transform: 'rotateY(180deg)',\n        hideOnMobile: true\n      }}\n      title={translate('NOTIFICATIONS_WALLET_NOT_ADDED_TITLE')}\n      description={translate('NOTIFICATIONS_WALLET_NOT_ADDED_DESCRIPTION', {\n        $address: address\n      })}\n      additionalDescription={translate('NOTIFICATIONS_WALLET_DESCRIPTION_ADD')}\n      resources={getResources()}\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { ledgerReferralURL, trezorReferralURL } from 'config';\n\n// Legacy\nimport walletIcon from 'common/assets/images/icn-new-wallet.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItem = styled(Button)`\n  width: 200px;\n  font-weight: normal;\n  font-size: 17px;\n  padding-left: 0px;\n  padding-right: 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 5px;\n  margin-right: 5px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 15px;\n    width: 128px;\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n`;\n\ninterface ResourceItemWrapperProps {\n  title: React.ReactElement<any>;\n  link: string;\n}\n\nconst ResourceItemWrapper: React.SFC<ResourceItemWrapperProps> = ({ title, link }) => {\n  return (\n    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <ResourceItem secondary={true}>{title}</ResourceItem>\n    </a>\n  );\n};\n\nconst getResources = () => {\n  return (\n    <>\n      <ResourceItemWrapper\n        title={translate('NOTIFICATIONS_GET_WALLET_RESOURCE_TREZOR')}\n        link={trezorReferralURL}\n      />\n      <ResourceItemWrapper\n        title={translate('NOTIFICATIONS_GET_WALLET_RESOURCE_LEDGER')}\n        link={ledgerReferralURL}\n      />\n    </>\n  );\n};\n\nexport default function GetHardwareWalletNotification() {\n  return (\n    <NotificationWrapper\n      leftImg={{ src: walletIcon, width: '73px', height: '80px' }}\n      title={translate('NOTIFICATIONS_GET_WALLET_TITLE')}\n      description={translate('NOTIFICATIONS_GET_WALLET_DESCRIPTION')}\n      resources={getResources()}\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { PrintPaperWalletButton } from 'v2/components';\n\n// Legacy\nimport walletIcon from 'common/assets/images/icn-wallet.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItem = styled.div`\n  width: 200px;\n\n  button {\n    width: 100%;\n    font-weight: normal;\n    font-size: 17px;\n    padding-left: 0px;\n    padding-right: 0px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    @media (max-width: ${SCREEN_XS}) {\n      font-size: 15px;\n    }\n  }\n\n  a {\n    margin: 0;\n  }\n`;\n\ninterface Props {\n  address: string;\n  privateKey: string;\n}\n\nexport default function PrintPaperWalletNotification({ address, privateKey }: Props) {\n  return (\n    <NotificationWrapper\n      leftImg={{ src: walletIcon, width: '100px', height: '81px', marginRight: '18px' }}\n      title={translate('NOTIFICATIONS_PRINT_WALLET_TITLE')}\n      description={translate('NOTIFICATIONS_PRINT_WALLET_DESCRIPTION')}\n      resources={\n        <ResourceItem>\n          <PrintPaperWalletButton\n            address={address}\n            privateKey={privateKey}\n            printText={translate('NOTIFICATIONS_PRINT_WALLET_RESOURCE')}\n          />\n        </ResourceItem>\n      }\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\n\n// Legacy\nimport saveIcon from 'common/assets/images/icn-save-dash-board-settings.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItem = styled(Button)`\n  width: 200px;\n  padding-left: 0px;\n  padding-right: 0px;\n  font-weight: normal;\n  font-size: 17px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 15px;\n  }\n`;\n\nexport default function SaveDashboardNotification() {\n  return (\n    <NotificationWrapper\n      leftImg={{ src: saveIcon, width: '68px', height: '77px' }}\n      title={translate('NOTIFICATIONS_SAVE_DASHBOARD_TITLE')}\n      description={translate('NOTIFICATIONS_SAVE_DASHBOARD_DESCRIPTION')}\n      resources={\n        <ResourceItem secondary={true}>\n          {translate('NOTIFICATIONS_SAVE_DASHBOARD_RESOURCE')}\n        </ResourceItem>\n      }\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\n// Legacy\nimport champagneIcon from 'common/assets/images/icn-champagne-2.svg';\nimport howBuyIcon from 'common/assets/images/icn-how-do-i-buy-crypto.svg';\nimport dontLoseCryptoIcon from 'common/assets/images/icn-don-t-lose-crypto.svg';\nimport questionsIcon from 'common/assets/images/icn-questions.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItemWrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  width: 140px;\n  font-weight: normal;\n  font-size: 16px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 12px;\n    max-width: 105px;\n  }\n`;\n\nconst Image = styled.img`\n  width: 50px;\n  height: 51px;\n  margin-bottom: 10px;\n`;\n\ninterface ResourceItemProps {\n  src: string;\n  title: React.ReactElement<any>;\n  link: string;\n}\n\nconst ResourceItem: React.SFC<ResourceItemProps> = ({ src, title, link }) => {\n  return (\n    <ResourceItemWrapper href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Image src={src} />\n      {title}\n    </ResourceItemWrapper>\n  );\n};\n\nconst getResources = () => {\n  return (\n    <>\n      <ResourceItem\n        src={howBuyIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_BUY')}\n        link=\"/how-to-buy\"\n      />\n      <ResourceItem\n        src={dontLoseCryptoIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_LOSE')}\n        link=\"/dont-lose-crypto\"\n      />\n      <ResourceItem\n        src={questionsIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_SUPPORT')}\n        link={KNOWLEDGE_BASE_URL}\n      />\n    </>\n  );\n};\n\ninterface NotificationProps {\n  address: string;\n}\n\nexport default function WalletCreatedNotification({ address }: NotificationProps) {\n  return (\n    <NotificationWrapper\n      alignCenterOnSmallScreen={true}\n      leftImg={{\n        src: champagneIcon,\n        width: '71px',\n        height: '70px',\n        transform: 'rotateY(180deg)',\n        hideOnMobile: true\n      }}\n      title={translate('NOTIFICATIONS_WALLET_ADDED_TITLE')}\n      description={translate('NOTIFICATIONS_WALLET_ADDED_DESCRIPTION', {\n        $address: address\n      })}\n      additionalDescription={translate('NOTIFICATIONS_WALLET_DESCRIPTION_ADD')}\n      resources={getResources()}\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\nimport { BREAK_POINTS } from 'v2/theme';\nimport NotificationWrapper from './NotificationWrapper';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\n// Legacy\nimport champagneIcon from 'common/assets/images/icn-champagne-2.svg';\nimport howBuyIcon from 'common/assets/images/icn-how-do-i-buy-crypto.svg';\nimport dontLoseCryptoIcon from 'common/assets/images/icn-don-t-lose-crypto.svg';\nimport questionsIcon from 'common/assets/images/icn-questions.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nconst ResourceItemWrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  width: 140px;\n  font-weight: normal;\n  font-size: 16px;\n\n  @media (max-width: ${SCREEN_XS}) {\n    font-size: 12px;\n    max-width: 105px;\n  }\n`;\n\nconst Image = styled.img`\n  width: 50px;\n  height: 51px;\n  margin-bottom: 10px;\n`;\n\ninterface ResourceItemProps {\n  src: string;\n  title: React.ReactElement<any>;\n  link: string;\n}\n\nconst ResourceItem: React.SFC<ResourceItemProps> = ({ src, title, link }) => {\n  return (\n    <ResourceItemWrapper href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Image src={src} />\n      {title}\n    </ResourceItemWrapper>\n  );\n};\n\nconst getResources = () => {\n  return (\n    <>\n      <ResourceItem\n        src={howBuyIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_BUY')}\n        link=\"/how-to-buy\"\n      />\n      <ResourceItem\n        src={dontLoseCryptoIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_LOSE')}\n        link=\"/dont-lose-crypto\"\n      />\n      <ResourceItem\n        src={questionsIcon}\n        title={translate('NOTIFICATIONS_WALLET_RESOURCE_SUPPORT')}\n        link={KNOWLEDGE_BASE_URL}\n      />\n    </>\n  );\n};\n\ninterface NotificationProps {\n  address: string;\n}\n\nexport default function WalletCreatedNotification({ address }: NotificationProps) {\n  return (\n    <NotificationWrapper\n      alignCenterOnSmallScreen={true}\n      leftImg={{\n        src: champagneIcon,\n        width: '71px',\n        height: '70px',\n        transform: 'rotateY(180deg)',\n        hideOnMobile: true\n      }}\n      title={translate('NOTIFICATIONS_WALLET_CREATED_TITLE')}\n      description={translate('NOTIFICATIONS_WALLET_CREATED_DESCRIPTION', {\n        $address: address\n      })}\n      additionalDescription={translate('NOTIFICATIONS_WALLET_DESCRIPTION_ADD')}\n      resources={getResources()}\n    />\n  );\n}\n","import React, { useContext } from 'react';\nimport { Panel, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { BREAK_POINTS } from 'v2/theme';\nimport { ExtendedAccount } from 'v2/types';\nimport { NotificationsContext } from './NotificationsProvider';\nimport { notificationsConfigs, NotificationTemplates } from './constants';\n\n// Legacy\nimport closeIcon from 'common/assets/images/icn-close.svg';\n\nconst { SCREEN_MD } = BREAK_POINTS;\n\nconst MainPanel = styled(Panel)`\n  position: relative;\n  margin-left: 15px;\n  margin-right: 15px;\n  padding-left: 25px;\n  padding-right: 25px;\n\n  @media (min-width: ${SCREEN_MD}) {\n    margin: 0 0 50px 0;\n  }\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  right: 17px;\n  top: 6px;\n  img {\n    width: 13px;\n    height: 13px;\n  }\n`;\n\ninterface Props {\n  accounts: ExtendedAccount[];\n}\n\nconst NotificationsPanel = ({ accounts }: Props) => {\n  const {\n    notifications,\n    displayNotification,\n    currentNotification,\n    dismissCurrentNotification\n  } = useContext(NotificationsContext);\n\n  const handleCloseClick = () => {\n    if (!currentNotification) {\n      return;\n    }\n\n    switch (currentNotification.template) {\n      case NotificationTemplates.onboardingResponsible: {\n        /*  Trigger \"please understand\" notification after \"onboarding responsible\" notification.\n            \"previousNotificationClosedDate\" is later used to show the \"please understand\" notification\n             with a delay after the current one has been dismissed.\n        */\n        dismissCurrentNotification();\n        displayNotification(NotificationTemplates.onboardingPleaseUnderstand, {\n          previousNotificationClosedDate: new Date()\n        });\n        break;\n      }\n      default: {\n        dismissCurrentNotification();\n        break;\n      }\n    }\n  };\n\n  if (\n    !notifications.find(x => x.template === NotificationTemplates.onboardingResponsible) &&\n    accounts.length > 0\n  ) {\n    displayNotification(NotificationTemplates.onboardingResponsible, {\n      firstDashboardVisitDate: new Date()\n    });\n  }\n\n  const getNotificationBody = () => {\n    const template = currentNotification!.template;\n    const templateData = currentNotification!.templateData;\n    const NotificationComponent = notificationsConfigs[template].layout;\n    return <NotificationComponent {...templateData} />;\n  };\n\n  return (\n    <React.Fragment>\n      {currentNotification && (\n        <MainPanel>\n          <CloseButton basic={true} onClick={handleCloseClick}>\n            <img src={closeIcon} alt=\"Close\" />\n          </CloseButton>\n          {getNotificationBody()}\n        </MainPanel>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default NotificationsPanel;\n","import React, { useContext } from 'react';\nimport { Formik, Field, Form, FieldProps } from 'formik';\nimport { Panel, Button, Input } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { DEFAULT_NETWORK } from 'v2/config';\nimport { AccountContext, getLabelByAccount, AddressBookContext } from 'v2/services/Store';\nimport { Account, AddressBook, ExtendedAccount, WalletId } from 'v2/types';\n\nimport ToolsNotifications from './ToolsNotifications';\nimport ToolsAccountList from './ToolsAccountList';\n\nconst DevToolsContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 99;\n  border: 1px solid gray;\n`;\n\nconst DevToolsInput = styled(Input)`\n  font-size: 1em;\n`;\n\nconst DevTools = () => {\n  const { addressBook } = useContext(AddressBookContext);\n  return (\n    <AccountContext.Consumer>\n      {({ accounts, createAccount, deleteAccount }) => (\n        <React.Fragment>\n          <DevToolsContainer>\n            <Panel>\n              <ToolsNotifications />\n              <ToolsAccountList accounts={accounts} deleteAccount={deleteAccount} />\n              <div className=\"Settings-heading\">Enter a new Account</div>\n              <Formik\n                initialValues={{\n                  label: 'Foo',\n                  address: '0x80200997f095da94E404F7E0d581AAb1fFba9f7d',\n                  networkId: DEFAULT_NETWORK,\n                  assets: [\n                    {\n                      uuid: '12d3cbf2-de3a-4050-a0c6-521592e4b85a',\n                      balance: '0',\n                      mtime: Date.now()\n                    }\n                  ],\n                  wallet: WalletId.METAMASK,\n                  mtime: Date.now(),\n                  transactions: [],\n                  uuid: '61d84f5e-0efa-46b9-915c-aed6ebe5a4dc',\n                  dPath: `m/44'/60'/0'/0/0`,\n                  favorite: false\n                }}\n                onSubmit={(values: ExtendedAccount, { setSubmitting }) => {\n                  createAccount(values);\n                  setSubmitting(false);\n                }}\n              >\n                {({ values, handleChange, handleBlur, isSubmitting }) => {\n                  const detectedLabel: AddressBook | undefined = getLabelByAccount(\n                    values,\n                    addressBook\n                  );\n                  const label = detectedLabel ? detectedLabel.label : 'Unknown Account';\n                  return (\n                    <Form>\n                      <fieldset>\n                        Address:{' '}\n                        <Field\n                          name=\"address\"\n                          render={({ field }: FieldProps<Account>) => (\n                            <DevToolsInput\n                              {...field}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.address}\n                            />\n                          )}\n                        />\n                      </fieldset>\n                      <br />\n                      <fieldset>\n                        Label:{' '}\n                        <Field\n                          name=\"label\"\n                          render={({ field }: FieldProps<Account>) => (\n                            <DevToolsInput\n                              {...field}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={label}\n                            />\n                          )}\n                        />\n                      </fieldset>\n                      <br />\n                      <fieldset>\n                        Network:{' '}\n                        <Field\n                          name=\"network\"\n                          render={({ field }: FieldProps<Account>) => (\n                            <DevToolsInput\n                              {...field}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.networkId}\n                            />\n                          )}\n                        />\n                      </fieldset>\n                      Current dev-mode only features\n                      <br />\n                      Current dev-mode only features\n                      <ul>\n                        <li>Recent Transactions panel (Dashboard)</li>\n                        <li>Error page disabled</li>\n                      </ul>\n                      <Button type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                      </Button>\n                    </Form>\n                  );\n                }}\n              </Formik>\n            </Panel>\n          </DevToolsContainer>\n        </React.Fragment>\n      )}\n    </AccountContext.Consumer>\n  );\n};\n\nexport default DevTools;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { languages } from 'config';\nimport { translateRaw } from 'translations';\nimport { AppState } from 'features/reducers';\nimport { configMetaActions, configMetaSelectors } from 'features/config';\n\nconst LanguagesList = styled.ul`\n  flex-grow: 1;\n  margin: 0;\n  padding: 0 0 21px 0;\n  list-style-type: none;\n`;\n\ninterface LanguageProps {\n  isSelected: boolean;\n}\n\nconst Language = styled.li<LanguageProps>`\n  margin: 0;\n  padding: 15px 20px;\n  border-top: 1px solid #e9e9e9;\n  cursor: pointer;\n  transition: background 0.3s ease-in;\n\n  &:hover {\n    background: #f2f2f2;\n  }\n\n  ${props => props.isSelected && 'background: #f2f2f2;'};\n`;\n\ninterface StateProps {\n  languageSelection: ReturnType<typeof configMetaSelectors.getLanguageSelection>;\n}\n\ninterface DispatchProps {\n  changeLanguage: configMetaActions.TChangeLanguage;\n  onClose(): void;\n}\n\nconst handleLanguageSelect = (\n  code: string,\n  languageSelection: ReturnType<typeof configMetaSelectors.getLanguageSelection>,\n  changeLanguage: configMetaActions.TChangeLanguage,\n  onClose: () => void\n) => {\n  if (code !== languageSelection) {\n    changeLanguage(code);\n    AnalyticsService.instance.track(ANALYTICS_CATEGORIES.SIDEBAR, 'Language changed', {\n      lang: code\n    });\n  }\n\n  onClose();\n};\n\ntype Props = StateProps & DispatchProps;\n\nfunction LanguageSelect({ languageSelection, changeLanguage, onClose }: Props) {\n  return (\n    <LanguagesList>\n      {Object.entries(languages).map(([code, language]: [string, string]) => (\n        <Language\n          isSelected={languageSelection === code}\n          key={code}\n          onClick={() => handleLanguageSelect(code, languageSelection, changeLanguage, onClose)}\n        >\n          {language}\n        </Language>\n      ))}\n    </LanguagesList>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  languageSelection: configMetaSelectors.getLanguageSelection(state)\n});\n\nconst mapDispatchToProps = {\n  changeLanguage: configMetaActions.changeLanguage\n};\n\nexport default {\n  title: translateRaw('NEW_SIDEBAR_TEXT_1'),\n  content: connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(LanguageSelect)\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { BannerType } from 'v2/types';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { default as Typography } from './Typography';\nimport announcementSVG from 'assets/images/icn-announcement.svg';\n\ninterface Props {\n  value: string;\n  type: BannerType;\n}\n\ninterface Config {\n  bgColor: string;\n  color: string;\n  icon: string;\n}\n\nconst Container = styled.div`\n  background-color: ${(p: { config: Config }) => p.config.bgColor || 'transparent'};\n  color: ${p => p.config.color || 'inherit'};\n  padding: 15px 10px;\n  padding-right: 30px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  & > img {\n    vertical-align: top;\n    margin-right: 15px;\n    margin-top: 5px;\n  }\n\n  // In mobile we let the icon stay top-aligned with the text\n  // as screen grows we remove the arbitray value used to align the icon.\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    align-items: center;\n    & > img {\n      margin-top: 0;\n    }\n  }\n`;\n\nconst bannerConfig = (type: BannerType): Config => {\n  switch (type) {\n    default:\n    case BannerType.ANNOUNCEMENT:\n      return {\n        color: COLORS.WHITE,\n        bgColor: COLORS.BRIGHT_SKY_BLUE,\n        icon: announcementSVG\n      };\n  }\n};\n\nexport const Banner = ({ value, type, ...props }: Props) => {\n  const config = bannerConfig(type);\n  return (\n    <Container config={config} {...props}>\n      <img src={config.icon} alt=\"Announcmenent\" />\n      <Typography value={value} style={{ color: config.color }} />\n    </Container>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { size } from 'polished';\n\nimport { scale } from '@mycrypto/ui';\nimport { default as Typography } from './Typography';\n\nconst Color = styled.div`\n  background: ${props => props.color};\n\n  border-radius: 50%;\n  display: inline-block;\n  margin-right: ${scale(-1)};\n  ${size(scale(-1))};\n`;\n\nexport function Network({ children, color }: { children: ReactNode; color: string }) {\n  return (\n    <>\n      <Color color={color} />\n      <Typography as=\"span\">{children}</Typography>\n    </>\n  );\n}\n\nexport default Network;\n","/*\n  Imported and modified from @mycrypto/ui to style headers\n  In order to style the headers particularyly the Icon caret\n*/\n\nimport React, { Component, DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react';\nimport throttle from 'lodash.throttle';\nimport styled, { StyledComponentClass } from 'styled-components';\n\nimport { Theme, scale, Icon, StackedCardData, Typography } from '@mycrypto/ui';\n\nimport { Table, TableData, TableConfig } from './Table';\nimport { StackedCard } from './StackedCard';\n\nexport enum CollapsibleTableModes {\n  Mobile,\n  Desktop\n}\n\nexport interface CollapsibleTableConfig extends TableConfig {\n  primaryColumn: string;\n  iconColumns?: string[];\n}\n\nexport interface CollapsibleTableData extends TableData {\n  config: CollapsibleTableConfig;\n}\n\ninterface CollapsedGroups {\n  [title: string]: boolean;\n}\n\ntype StyledHTMLElement = StyledComponentClass<\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\n  Theme\n>;\n\ninterface Flippable {\n  isFlipped?: boolean;\n}\n\ninterface Props extends CollapsibleTableData {\n  breakpoint: number;\n}\n\ninterface State {\n  mode: CollapsibleTableModes;\n  collapsedGroups: CollapsedGroups;\n}\n\nexport const transformRowToCards = (\n  row: ReactNode[],\n  head: (string | JSX.Element)[],\n  primaryColumnIndex: number,\n  iconColumns: string[] = []\n): StackedCardData =>\n  row.reduce(\n    (prev: StackedCardData, next, index) => {\n      const label = head[index];\n\n      if (index === primaryColumnIndex) {\n        prev.heading = next;\n      } else if (iconColumns.includes(label as string)) {\n        prev.icons!.push(next);\n      } else {\n        prev.entries.push([label, next]);\n      }\n\n      return prev;\n    },\n    {\n      heading: '',\n      entries: [],\n      icons: []\n    }\n  );\n\nexport const transformTableToCards = (\n  { head, body, groups = [], config }: CollapsibleTableData,\n  collapsedGroups: CollapsedGroups = {}\n): (StackedCardData | string)[] => {\n  const { primaryColumn, iconColumns } = config;\n  const primaryColumnIndex = head.indexOf(primaryColumn);\n  const cards: (StackedCardData | string)[] = body.map(row =>\n    transformRowToCards(row, head, primaryColumnIndex, iconColumns)\n  );\n\n  groups.forEach(({ title, entries }) =>\n    cards.push(\n      title,\n      ...(collapsedGroups[title]\n        ? []\n        : entries.map(row => transformRowToCards(row, head, primaryColumnIndex, iconColumns)))\n    )\n  );\n\n  return cards;\n};\n\nexport const screenIsMobileSized = (breakpoint: number): boolean =>\n  window.matchMedia(`(max-width: ${breakpoint}px)`).matches;\n\nconst GroupHeading = styled(Typography)`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  padding: 0.9375rem;\n  border-bottom: 0.0625rem solid #dde3ee;\n  background: ${props => props.theme.tableHeadBackground};\n  text-transform: uppercase;\n  font-size: ${scale(2)};\n  cursor: pointer;\n  background-color: red;\n` as StyledHTMLElement;\n\nGroupHeading.defaultProps = {\n  as: 'section',\n  role: 'button'\n};\n\nconst GroupHeadingCaret = styled(Icon)<Flippable>`\n  margin-left: 0.5em;\n  ${props =>\n    props.isFlipped &&\n    `\n    svg {\n      transform: rotateX(180deg)\n    }\n  `};\n`;\n\nexport class CollapsibleTable extends Component<Props, State> {\n  public static defaultProps = {\n    head: [],\n    body: [],\n    groups: [],\n    config: {},\n    breakpoint: 450\n  };\n\n  public constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      mode: screenIsMobileSized(props.breakpoint)\n        ? CollapsibleTableModes.Mobile\n        : CollapsibleTableModes.Desktop,\n      collapsedGroups: {}\n    };\n\n    this.checkWindowSize = throttle(this.checkWindowSize, 200);\n  }\n\n  public componentDidMount() {\n    window.addEventListener('resize', this.checkWindowSize);\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('resize', this.checkWindowSize);\n  }\n\n  public render() {\n    const { mode, collapsedGroups } = this.state;\n\n    return mode === CollapsibleTableModes.Mobile ? (\n      transformTableToCards(this.props, collapsedGroups).map((cardData, index) =>\n        typeof cardData === 'string' ? (\n          // The element being iterated on is a group heading.\n          <GroupHeading key={index} onClick={this.toggleCollapseGroup.bind(this, cardData)}>\n            {cardData}\n            <GroupHeadingCaret icon=\"navDownCaret\" isFlipped={collapsedGroups[cardData]} />\n          </GroupHeading>\n        ) : (\n          // The element being iterated on is table data.\n          <StackedCard key={index} {...cardData} />\n        )\n      )\n    ) : (\n      <Table {...this.props} />\n    );\n  }\n\n  private readonly checkWindowSize = () => {\n    const { breakpoint } = this.props;\n    const { mode } = this.state;\n    const wasMobile = mode === CollapsibleTableModes.Mobile;\n    const isMobile = screenIsMobileSized(breakpoint);\n\n    if (wasMobile && !isMobile) {\n      // Mobile-to-Desktop\n      this.setState({\n        mode: CollapsibleTableModes.Desktop,\n        collapsedGroups: {}\n      });\n    }\n\n    if (!wasMobile && isMobile) {\n      // Desktop-to-Mobile\n      this.setState({\n        mode: CollapsibleTableModes.Mobile,\n        collapsedGroups: {}\n      });\n    }\n  };\n\n  private readonly toggleCollapseGroup = (title: string) =>\n    this.setState(prevState => ({\n      collapsedGroups: {\n        ...prevState.collapsedGroups,\n        [title]: !prevState.collapsedGroups[title]\n      }\n    }));\n}\n\nexport default CollapsibleTable;\n","import React, { Children, Component, ReactNode } from 'react';\n\nimport styled from 'styled-components';\nimport { Typography } from '@mycrypto/ui';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst TabsContainer = styled.ul`\n  display: flex;\n  text-align: center;\n  margin: 0;\n  background-color: #163150;\n`;\n\nconst Tab = styled.li`\n  list-style: none;\n  flex: 1;\n  padding-top: 1.3125em;\n  padding-bottom: 1.5em;\n  p {\n    margin: 0;\n    /* stylelint-disable max-nesting-depth */\n    a {\n      color: white;\n      letter-spacing: 1.1px; /* stylelint-disable-line unit-whitelist */\n      padding-bottom: 0.15625em;\n\n      :hover,\n      :focus {\n        color: white;\n        border-bottom: ${props => '.125em solid' + props.theme.primary};\n      }\n    }\n  }\n`;\n\nexport default class TabsNav extends Component<Props, {}> {\n  public render() {\n    const { children } = this.props;\n\n    return (\n      <TabsContainer {...this.props}>\n        {Children.map(children, child => (\n          <Tab>\n            <Typography>{child}</Typography>\n          </Tab>\n        ))}\n      </TabsContainer>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nimport translate, { translateRaw } from 'translations';\nimport { WalletButton } from './WalletButton';\nimport { WalletId, IStory } from 'v2/types';\nimport { WALLETS_CONFIG, ROUTE_PATHS } from 'v2/config';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { IS_ELECTRON } from 'v2/utils';\n\nconst { SCREEN_XS } = BREAK_POINTS;\nconst { BRIGHT_SKY_BLUE } = COLORS;\n\nconst Heading = styled.p`\n  font-size: 34px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  text-align: center;\n  color: ${props => props.theme.headline};\n`;\n\nconst Description = styled.p`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: normal;\n  color: ${props => props.theme.text};\n  white-space: pre-line;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst WalletsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin-top: 12px;\n`;\n\nconst InfoWrapper = styled.div`\n  margin-top: 30px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media screen and (max-width: ${SCREEN_XS}) {\n    padding: 0 15px;\n  }\n`;\n\ninterface InfoProps {\n  showInOneLine?: boolean;\n}\n\nconst Info = styled.div<InfoProps>`\n  justify-content: center;\n  font-family: Lato;\n  font-size: 16px;\n  text-align: center;\n  color: #093053;\n  white-space: pre-line;\n  width: 100%;\n  flex-direction: column;\n  margin-bottom: 15px;\n  display: ${props => (props.showInOneLine ? 'block' : 'grid')};\n\n  @media screen and (max-width: ${SCREEN_XS}) {\n    display: grid;\n  }\n\n  a {\n    color: ${BRIGHT_SKY_BLUE};\n  }\n`;\n\ninterface Props {\n  wallets: any[];\n  showHeader?: boolean;\n  onSelect(name: WalletId): void;\n}\n\nexport default class WalletList extends PureComponent<Props> {\n  public render() {\n    const { wallets, onSelect, showHeader } = this.props;\n    const validWallets = wallets.filter(w => !w.hideFromWalletList);\n    return (\n      <div>\n        {showHeader && (\n          <>\n            <Heading>{translate('DECRYPT_ACCESS')}</Heading>\n            <Description>{translate('ADD_ACCOUNT_DESCRIPTION')}</Description>\n          </>\n        )}\n        <WalletsContainer>\n          {validWallets.map((wallet: IStory) => {\n            const walletInfo = WALLETS_CONFIG[wallet.name];\n            return (\n              <WalletButton\n                key={`wallet-icon-${wallet.name}`}\n                name={translateRaw(walletInfo.lid)}\n                icon={walletInfo.icon}\n                description={translateRaw(walletInfo.description)}\n                onClick={() => onSelect(wallet.name)}\n              />\n            );\n          })}\n        </WalletsContainer>\n        <InfoWrapper>\n          <Info showInOneLine={true}>\n            {translateRaw('ADD_ACCOUNT_FOOTER_LABEL')}{' '}\n            <Link to={ROUTE_PATHS.CREATE_WALLET.path}>\n              {translateRaw('ADD_ACCOUNT_FOOTER_LINK')}\n            </Link>\n          </Info>\n          {!IS_ELECTRON && (\n            <Info>\n              {translateRaw('DOWNLOAD_APP_FOOTER_LABEL')}{' '}\n              <Link to={ROUTE_PATHS.DOWNLOAD_DESKTOP_APP.path}>\n                {translateRaw('DOWNLOAD_APP_FOOTER_LINK')}\n              </Link>\n            </Info>\n          )}\n        </InfoWrapper>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { COLORS } from 'v2/theme';\n\nconst { DARK_GREY } = COLORS;\n\nconst CodeBlockWrapper = styled.div`\n  font-weight: 400;\n  font-size: 1rem;\n  border: 1px solid ${DARK_GREY};\n  padding: 0.75rem 1rem;\n  margin: 0;\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  border-radius: 2px;\n  overflow: auto;\n`;\n\nconst Code = styled.div`\n  display: block;\n  text-align: left;\n  max-height: 320px;\n  border: none;\n  background-color: inherit;\n  font-size: 14px;\n  white-space: pre;\n  font-family: 'Roboto Mono';\n`;\n\ninterface Props {\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst CodeBlock = ({ children }: Props) => (\n  <CodeBlockWrapper>\n    <Code>{children}</Code>\n  </CodeBlockWrapper>\n);\n\nexport default CodeBlock;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Tab } from 'v2/types';\nimport { COLORS } from 'v2/theme';\n\nconst { WHITE, BRIGHT_SKY_BLUE } = COLORS;\n\nconst TabsWrapper = styled.div`\n  border: 1px solid ${BRIGHT_SKY_BLUE};\n  display: flex;\n  font-size: 16px;\n  color: ${BRIGHT_SKY_BLUE};\n  font-weight: normal;\n  border-radius: 2px;\n  background-color: ${WHITE};\n  cursor: pointer;\n`;\n\ninterface TabWrapperProps {\n  selected: boolean;\n}\n\nconst TabWrapper = styled.div<TabWrapperProps>`\n  ${props =>\n    props.selected &&\n    `background-color: ${BRIGHT_SKY_BLUE};\n     color: ${WHITE};`}\n  padding: 12px 20px;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:not(:first-child) {\n    border-left: 1px solid ${BRIGHT_SKY_BLUE};\n  }\n`;\n\ninterface TabsProps {\n  tabs: Tab[];\n  selectedIndex: number;\n}\n\nexport default function Tabs({ tabs, selectedIndex }: TabsProps) {\n  return (\n    <TabsWrapper>\n      {tabs.map((tab, index: number) => (\n        <TabWrapper key={index} selected={index === selectedIndex} onClick={tab.onClick}>\n          {tab.title}\n        </TabWrapper>\n      ))}\n    </TabsWrapper>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled, { css } from 'styled-components';\n\ninterface RouterLinkProps {\n  fullWidth?: boolean;\n}\n\nconst StyledRouterLink = styled(Link)<RouterLinkProps>`\n  ${props =>\n    props.fullWidth === true &&\n    css`\n      width: 100%;\n    `}\n`;\n\nexport default StyledRouterLink;\n","import React, { Component } from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport { addHexPrefix, toChecksumAddress } from 'ethereumjs-util';\n\nimport PaperWallet from './PaperWallet';\nimport Spinner from 'components/ui/Spinner';\n\n// Legacy\nimport printerIcon from 'common/assets/images/icn-printer.svg';\n\nconst PrinterImage = styled.img`\n  width: 24px;\n  height: 24px;\n  margin-right: 10px;\n  pointer-events: none;\n  display: inline;\n`;\n\nconst StyledButton = styled(Button)`\n  font-size: 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 16px;\n\n  &:focus,\n  &:hover {\n    img {\n      filter: brightness(0) invert(1);\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 66px;\n`;\n\ninterface Props {\n  address: string;\n  printText: React.ReactElement<any>;\n  privateKey?: string;\n  mnemonic?: string;\n  path?: string;\n  onPrintWalletClick?(): void;\n}\n\ninterface State {\n  paperWalletPdf: string;\n  loading: boolean;\n}\n\nexport default class PrintPaperWalletButton extends Component<Props, State> {\n  public state: State = {\n    paperWalletPdf: '',\n    loading: false\n  };\n\n  private paperWallet: PaperWallet | null;\n\n  public render() {\n    const { address, path, printText, mnemonic, privateKey } = this.props;\n    const prefixedAddress = toChecksumAddress(addHexPrefix(address));\n\n    return (\n      <>\n        <ButtonWrapper>\n          {this.state.loading ? (\n            <Spinner size={'x2'} />\n          ) : (\n            <StyledButton secondary={true} onClick={this.handlePrintClick}>\n              <PrinterImage src={printerIcon} />\n              {printText}\n            </StyledButton>\n          )}\n        </ButtonWrapper>\n        <PaperWallet\n          address={prefixedAddress}\n          mnemonic={mnemonic}\n          privateKey={privateKey}\n          path={path}\n          ref={c => (this.paperWallet = c)}\n          isHidden={true}\n        />\n      </>\n    );\n  }\n\n  private handlePrintClick = async () => {\n    const { onPrintWalletClick } = this.props;\n    if (!this.paperWallet) {\n      return;\n    }\n\n    this.setState({ loading: true });\n    await this.paperWallet.toPDF();\n    this.setState({ loading: false });\n\n    if (onPrintWalletClick) {\n      onPrintWalletClick();\n    }\n  };\n}\n","import React, { useContext, useEffect } from 'react';\n\nimport { OptionComponentProps } from 'react-select';\nimport styled from 'styled-components';\nimport { translate } from 'translations';\nimport { NetworkContext, isWalletFormatSupportedOnNetwork } from 'v2/services/Store';\nimport { NetworkId, WalletId } from 'v2/types';\nimport { DEFAULT_NETWORK } from 'v2/config';\nimport { Typography, Dropdown } from 'v2/components';\n\ninterface Props {\n  network: string | undefined;\n  accountType?: WalletId;\n  onChange(network: NetworkId): void;\n}\n\nconst DropdownContainer = styled('div')`\n  .is-open > .Select-control > .Select-multi-value-wrapper > .Select-input:only-child {\n    transform: translateY(0%);\n    padding: 16px 15px 16px 15px;\n    position: inherit;\n  }\n`;\n\nconst SContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  padding: 16px 15px 16px 15px;\n\n  &:hover {\n    background-color: var(--color-gray-lighter);\n  }\n`;\n\nclass NetworkOption extends React.PureComponent<OptionComponentProps> {\n  public render() {\n    const { option, onSelect } = this.props;\n    return (\n      <SContainer onClick={() => onSelect && onSelect(option, null)}>\n        <Typography value={option.label} />\n      </SContainer>\n    );\n  }\n}\n\nfunction NetworkSelectDropdown({ network, accountType, onChange }: Props) {\n  const { networks } = useContext(NetworkContext);\n\n  // set default network if none selected\n  useEffect(() => {\n    if (!network) {\n      onChange(DEFAULT_NETWORK);\n    }\n  }, []);\n\n  // @ADD_ACCOUNT_TODO: The difference in accountType is likely causing\n  // the absence of list.\n  const validNetworks = networks\n    // @ts-ignore CHANGE IN WALLETYPE OBJECT CAUSING accountType to error -> TODO: FIX accountType\n    .filter(options => isWalletFormatSupportedOnNetwork(options, accountType))\n    .map(n => ({ label: n.name, value: n }));\n\n  return (\n    <div>\n      <label>{translate('SELECT_NETWORK_LABEL')}</label>\n      <DropdownContainer>\n        <Dropdown\n          value={{ label: network }}\n          options={validNetworks.sort()}\n          placeholder={DEFAULT_NETWORK}\n          searchable={true}\n          onChange={option => onChange(option.value.id)}\n          optionComponent={NetworkOption}\n          valueComponent={({ value: option }) => <NetworkOption option={option} />}\n        />\n      </DropdownContainer>\n    </div>\n  );\n}\n\nexport default NetworkSelectDropdown;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Icon } from '@mycrypto/ui';\n\nimport { COLORS } from 'v2/theme';\nimport { InlineErrorMsg } from 'v2/components';\n\nconst { PASTEL_RED, BRIGHT_SKY_BLUE, DARK_SILVER } = COLORS;\n\nconst MainWrapper = styled.div`\n  margin-bottom: 15px;\n  width: 100%;\n`;\n\nconst Label = styled.p`\n  font-size: 18px;\n  width: 100%;\n  line-height: 1;\n  text-align: left;\n  font-weight: normal;\n  margin-bottom: 9px;\n  color: ${props => props.theme.text};\n`;\n\ninterface CustomInputProps {\n  inputError?: string;\n  showEye?: boolean;\n  height?: string;\n}\n\nconst CustomInput = styled.input<CustomInputProps>`\n  width: 100%;\n  background: ${props => props.theme.controlBackground};\n  border: 0.125em solid ${props => props.theme.controlBorder};\n  border-radius: 0.125em;\n  padding: ${props => (props.showEye ? '12px 36px 12px 12px' : '12px 12px')};\n  display: flex;\n  :focus-within {\n    outline: none;\n    box-shadow: ${props => props.theme.outline};\n  }\n  ::placeholder {\n    color: ${DARK_SILVER};\n    opacity: 1;\n  }\n  border-color: ${props => (props.inputError ? PASTEL_RED : '')};\n  ${props => props.height && `height: ${props.height}`}\n`;\n\nconst CustomTextArea = styled.textarea<CustomInputProps>`\n  width: 100%;\n  background: ${props => props.theme.controlBackground};\n  border: 0.125em solid ${props => props.theme.controlBorder};\n  border-radius: 0.125em;\n  padding: ${props => (props.showEye ? '12px 36px 12px 12px' : '12px 12px')}\n  display: flex;\n  :focus-within {\n    outline: none;\n    box-shadow: ${props => props.theme.outline};\n  }\n  ::placeholder {\n    color: ${DARK_SILVER};\n    opacity: 1;\n  }\n  border-color: ${props => (props.inputError ? PASTEL_RED : '')};\n  resize: none;\n  ${props => props.height && `height: ${props.height}`}\n`;\n\nconst InputWrapper = styled.div`\n  position: relative;\n  width: 100%;\n`;\n\ninterface CustomIconProps {\n  showPassword?: boolean;\n}\n\nconst CustomIcon = styled(Icon)`\n  svg {\n    margin-top: 6px;\n    width: 23px;\n    height: 23px;\n    color: ${(props: CustomIconProps) => (props.showPassword ? BRIGHT_SKY_BLUE : '')};\n    cursor: pointer;\n    user-select: none;\n  }\n`;\n\nconst CustomIconWrapper = styled.div`\n  display: flex;\n  height: 100%;\n  align-items: center;\n  position: absolute;\n  right: 10px;\n  top: 0;\n`;\n\ninterface Props {\n  type?: string;\n  label?: string | JSX.Element;\n  value: string;\n  inputError?: string | undefined;\n  showEye?: boolean;\n  textarea?: boolean;\n  placeholder?: string;\n  height?: string;\n  onChange(event: any): void;\n  onBlur?(event: any): void;\n  validate?(): void | undefined;\n}\n\nexport class InputField extends Component<Props> {\n  public state = { showPassword: false };\n  private validatorTimeout: any = null;\n\n  public handleEyeClick = () => {\n    this.setState({ showPassword: !this.state.showPassword });\n  };\n\n  public render() {\n    const {\n      value,\n      label,\n      onChange,\n      onBlur,\n      inputError,\n      type,\n      showEye,\n      textarea,\n      placeholder,\n      height\n    } = this.props;\n    return (\n      <MainWrapper>\n        {label && <Label>{label}</Label>}\n        <InputWrapper>\n          {textarea ? (\n            <CustomTextArea\n              value={value}\n              onChange={onChange}\n              onBlur={onBlur}\n              inputError={inputError}\n              onKeyUp={this.handleKeyUp}\n              placeholder={placeholder ? placeholder : ''}\n              height={height}\n            />\n          ) : (\n            <CustomInput\n              value={value}\n              onChange={onChange}\n              onBlur={onBlur}\n              inputError={inputError}\n              onKeyUp={this.handleKeyUp}\n              showEye={showEye}\n              type={this.state.showPassword ? 'text' : type ? type : 'text'}\n              placeholder={placeholder ? placeholder : ''}\n              height={height}\n            />\n          )}\n\n          {showEye && (\n            <CustomIconWrapper onClick={this.handleEyeClick}>\n              <CustomIcon icon={'showNetworks'} showPassword={this.state.showPassword} />\n            </CustomIconWrapper>\n          )}\n        </InputWrapper>\n\n        {inputError && <InlineErrorMsg>{inputError}</InlineErrorMsg>}\n      </MainWrapper>\n    );\n  }\n\n  public handleKeyUp = () => {\n    const { validate } = this.props;\n    if (!validate) {\n      return;\n    }\n\n    clearTimeout(this.validatorTimeout);\n\n    // Call validation function 500ms after the user stops typing\n    this.validatorTimeout = setTimeout(() => {\n      validate();\n    }, 500);\n  };\n}\n\nexport default InputField;\n","import React from 'react';\nimport { Panel, Button, Icon, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport semver from 'semver';\n\nimport Modal from './Modal';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { GITHUB_RELEASE_NOTES_URL, OS } from 'v2/config';\nimport { getFeaturedOS } from 'v2/utils';\nimport { AnalyticsService, ANALYTICS_CATEGORIES, GithubService } from 'v2/services/ApiService';\nimport { VERSION as currentVersion } from 'config';\nimport translate from 'translations';\n\n// Legacy\nimport closeIcon from 'common/assets/images/icn-close.svg';\nimport updateIcon from 'common/assets/images/icn-update.svg';\nimport updateImportantIcon from 'common/assets/images/icn-important-update.svg';\n\nconst { SCREEN_SM } = BREAK_POINTS;\nconst { PASTEL_RED } = COLORS;\n\nconst MainPanel = styled(Panel)`\n  background-color: white;\n  padding: 50px 65px;\n  max-width: 770px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  position: relative;\n  max-height: 90%;\n  overflow: auto;\n\n  @media (max-width: ${SCREEN_SM}) {\n    padding: 40px 20px;\n    width: 90%;\n  }\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  right: 17px;\n  top: 9px;\n\n  img {\n    width: 14px;\n    height: 14px;\n  }\n`;\n\nconst UpdateImg = styled.img`\n  width: 60px;\n  height: 60px;\n  margin-bottom: 15px;\n`;\n\nconst Header = styled(Typography)`\n  font-size: 32px;\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: ${props => props.theme.headline};\n`;\n\ninterface DescriptionProps {\n  warning?: boolean;\n  noMargin?: boolean;\n}\n\n// prettier-ignore\nconst Description = styled(Typography)<DescriptionProps>`\n  margin-top: 5px;\n  font-weight: normal;\n  padding: ${props => (props.warning ? '0 30px 20px 30px' : '0 30px')};\n  color: ${props => (props.warning ? PASTEL_RED : props.theme.text)};\n  ${props => props.noMargin && 'margin: 0;'};\n`;\n\ninterface ActionsWrapperProps {\n  marginTop?: string;\n}\n\n// prettier-ignore\nconst ActionsWrapper = styled.div<ActionsWrapperProps>`\n  margin-top: ${props => (props.marginTop ? props.marginTop : '54px')};\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n\n  @media (max-width: ${SCREEN_SM}) {\n    flex-direction: column;\n  }\n`;\n\nconst ActionButton = styled(Button)`\n  font-size: 18px;\n  font-weight: normal;\n  margin-bottom: 15px;\n`;\n\nconst SecondaryActionButton = styled(ActionButton)`\n  margin-right: 50px;\n\n  @media (max-width: ${SCREEN_SM}) {\n    margin-right: 0px;\n  }\n`;\n\nconst ReleaseLink = styled(Typography)`\n  word-break: break-all;\n`;\n\nconst WarningIcon = styled(Icon)`\n  margin-right: 5px;\n  vertical-align: middle;\n\n  svg {\n    color: ${PASTEL_RED};\n  }\n`;\n\nconst OSNames: { [key: string]: string } = {\n  [OS.WINDOWS]: 'Windows',\n  [OS.MAC]: 'macOS',\n  [OS.LINUX64]: 'Linux'\n};\n\nconst featuredOS = getFeaturedOS();\n\ninterface State {\n  isOpen: boolean;\n  OSName: string;\n  newVersion?: string;\n  newVersionUrl?: string;\n  isCritical?: boolean;\n}\n\nexport default class NewAppReleaseModal extends React.PureComponent<{}, State> {\n  public state: State = {\n    isOpen: false,\n    OSName: OSNames[featuredOS]\n  };\n\n  public async componentDidMount() {\n    try {\n      const releasesInfo = await GithubService.instance.getReleasesInfo();\n      const { version: newVersion, name, releaseUrls } = releasesInfo;\n\n      const isCritical = name.toLowerCase().includes('[critical]');\n      const newVersionUrl = releaseUrls[featuredOS];\n      if (semver.lt(currentVersion, newVersion)) {\n        this.setState({\n          isOpen: true,\n          newVersion,\n          newVersionUrl,\n          isCritical\n        });\n      }\n    } catch (err) {\n      console.error('Failed to fetch latest release from GitHub:', err);\n    }\n  }\n\n  public render() {\n    const { isOpen, isCritical } = this.state;\n\n    return (\n      isOpen && (\n        <Modal>\n          <MainPanel>{isCritical ? this.getCriticalModal() : this.getNonCriticalModal()}</MainPanel>\n        </Modal>\n      )\n    );\n  }\n\n  private getNonCriticalModal = () => {\n    const { OSName, newVersion } = this.state;\n\n    return (\n      <>\n        <CloseButton basic={true} onClick={this.onClose}>\n          <img src={closeIcon} alt=\"Close\" />\n        </CloseButton>\n        <UpdateImg src={updateIcon} />\n        <Header as=\"h2\">{translate('APP_UPDATE_TITLE')}</Header>\n        <Description>{translate('APP_UPDATE_BODY')}</Description>\n        <ActionsWrapper>\n          <SecondaryActionButton secondary={true} onClick={this.onClose}>\n            {translate('APP_UPDATE_CANCEL')}\n          </SecondaryActionButton>\n          <ActionButton onClick={this.downloadRelease}>\n            {translate('APP_UPDATE_CONFIRM', { $osName: OSName, $appVersion: `v${newVersion}` })}\n          </ActionButton>\n        </ActionsWrapper>\n      </>\n    );\n  };\n\n  private getCriticalModal = () => {\n    const { OSName, newVersion } = this.state;\n\n    return (\n      <>\n        <UpdateImg src={updateImportantIcon} />\n        <Header as=\"h2\">{translate('APP_UPDATE_TITLE_CRITICAL')}</Header>\n        <Description warning={true}>\n          <WarningIcon icon=\"warning\" /> {translate('APP_UPDATE_WARNING')}\n        </Description>\n        <Description noMargin={true}>{translate('APP_UPDATE_BODY_CRITICAL')}</Description>\n        <ReleaseLink>\n          <a href={GITHUB_RELEASE_NOTES_URL} target=\"_blank\" rel=\"noreferrer\">\n            {GITHUB_RELEASE_NOTES_URL}.\n          </a>\n        </ReleaseLink>\n        <ActionsWrapper marginTop=\"41px\">\n          <ActionButton onClick={this.downloadRelease}>\n            {translate('APP_UPDATE_CONFIRM', { $osName: OSName, $appVersion: `v${newVersion}` })}\n          </ActionButton>\n        </ActionsWrapper>\n      </>\n    );\n  };\n\n  private onClose = () => {\n    const { OSName, newVersion } = this.state;\n    this.setState({ isOpen: false });\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.UPDATE_DESKTOP,\n      'Not Right Now button clicked',\n      { current_version: currentVersion, new_version: newVersion, os: OSName }\n    );\n  };\n\n  private downloadRelease = () => {\n    const { OSName, newVersion, newVersionUrl } = this.state;\n    window.open(newVersionUrl, '_self');\n    AnalyticsService.instance.track(\n      ANALYTICS_CATEGORIES.UPDATE_DESKTOP,\n      'Get New Version button clicked',\n      { current_version: currentVersion, new_version: newVersion, os: OSName }\n    );\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface ModalWrapperProps {\n  backgroundOpacity?: string;\n}\n\n// prettier-ignore\nconst ModalWrapper = styled.section<ModalWrapperProps>`\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, ${props => props.backgroundOpacity || '0.66'});\n  z-index: 9999;\n  top: 0px;\n`;\n\ninterface Props {\n  children: any;\n  backgroundOpacity?: string;\n}\n\nexport default function Modal({ backgroundOpacity, children }: Props) {\n  return <ModalWrapper backgroundOpacity={backgroundOpacity}>{children}</ModalWrapper>;\n}\n","import styled, { css } from 'styled-components';\n\ninterface LinkProps {\n  fullWidth?: boolean;\n}\n\nconst StyledLink = styled.a<LinkProps>`\n  ${props =>\n    props.fullWidth === true &&\n    css`\n      width: 100%;\n    `}\n`;\n\nexport default StyledLink;\n","import React from 'react';\nimport { Button, Panel } from '@mycrypto/ui';\nimport styled from 'styled-components';\nimport Stepper from './Stepper';\n\n// Legacy\nimport backArrowIcon from 'common/assets/images/icn-back-arrow.svg';\n\ninterface ContentPanelWrapperProps {\n  centered: boolean | undefined;\n  width?: string;\n}\n\nconst ContentPanelWrapper = styled.div`\n  text-align: ${(props: ContentPanelWrapperProps) => (props.centered ? 'center' : 'left')};\n  width: ${(props: ContentPanelWrapperProps) => (props.width ? props.width : 'auto')};\n  @media (min-width: 700px) {\n    max-width: ${(props: ContentPanelWrapperProps) => (props.width ? props.width : '560px')};\n  }\n  @media (max-width: 700px) {\n    max-width: 100%;\n  }\n`;\n\nconst BackButton = styled(Button)`\n  color: #007a99;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  img {\n    margin-right: 13px;\n  }\n`;\n\ninterface ContentPanelHeadingProps {\n  centered: boolean | undefined;\n}\n\nconst ContentPanelHeading = styled.p<ContentPanelHeadingProps>`\n  font-size: 36px;\n  width: 100%;\n  display: flex;\n  justify-content: ${props => (props.centered ? 'center' : 'space-between')};\n  font-weight: bold;\n  line-height: normal;\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: ${props => props.theme.headline};\n`;\n\nconst ContentPanelHeadingIcon = styled.img`\n  width: 45px;\n  height: 45px;\n`;\n\nconst ContentPanelDescription = styled.p`\n  font-size: 18px;\n  line-height: 1.5;\n  font-weight: normal;\n  color: ${props => props.theme.text};\n  white-space: pre-line;\n\n  strong {\n    font-weight: 900;\n  }\n\n  @media (max-width: 700px) {\n    padding: 0 8px;\n  }\n`;\n\nconst ImgIcon = styled.img`\n  width: 125px;\n  height: auto;\n  margin-bottom: 28px;\n`;\n\ninterface ContentPanelTopProps {\n  stepperOnly: boolean;\n}\n\nconst ContentPanelTop = styled.div<ContentPanelTopProps>`\n  display: flex;\n  align-items: center;\n  justify-content: ${props => (props.stepperOnly ? 'flex-end' : 'space-between')};\n  margin-bottom: 10px;\n  padding: 0 30px;\n\n  @media (min-width: 700px) {\n    padding: 0;\n  }\n`;\n\nconst StyledPanel = styled(Panel)`\n  padding: 42px 70px;\n\n  @media (max-width: 700px) {\n    padding-left: 15px;\n    padding-right: 15px;\n  }\n`;\n\ninterface Props {\n  children: any;\n  className?: string;\n  heading?: string | JSX.Element;\n  icon?: string;\n  image?: string;\n  showImageOnTop?: boolean;\n  description?: string | JSX.Element;\n  stepper?: {\n    current: number;\n    total: number;\n  };\n  centered?: boolean;\n  width?: string;\n  onBack?(): void;\n}\n\nexport default function ExtendedContentPanel({\n  onBack,\n  stepper,\n  heading,\n  icon,\n  image,\n  showImageOnTop,\n  description,\n  centered,\n  children,\n  className = '',\n  width,\n  ...rest\n}: Props) {\n  return (\n    <ContentPanelWrapper centered={centered} width={width}>\n      {(onBack || stepper) && (\n        <ContentPanelTop stepperOnly={stepper !== undefined && !onBack}>\n          {onBack && (\n            <BackButton basic={true} onClick={onBack}>\n              <img src={backArrowIcon} alt=\"Back arrow\" /> Back\n            </BackButton>\n          )}\n          {stepper && <Stepper current={stepper.current} total={stepper.total} />}\n        </ContentPanelTop>\n      )}\n      <StyledPanel className={className} {...rest}>\n        {image && showImageOnTop && <ImgIcon src={image} alt=\"Image\" />}\n        {heading && (\n          <ContentPanelHeading centered={centered}>\n            {heading}\n            {icon && <ContentPanelHeadingIcon src={icon} alt=\"Icon\" />}\n          </ContentPanelHeading>\n        )}\n        {description && <ContentPanelDescription>{description}</ContentPanelDescription>}\n        {image && !showImageOnTop && <ImgIcon src={image} alt=\"Image\" />}\n        {children}\n      </StyledPanel>\n    </ContentPanelWrapper>\n  );\n}\n","import React from 'react';\nimport Select, { OptionComponentProps } from 'react-select';\nimport styled from 'styled-components';\n\n// Give a height to the input when value is defined\n// Overide custom styles common/sass/styles/overrides/react-select.scss\ninterface SProps {\n  value?: string;\n}\n\nconst SSelect = styled(Select)`\n  height: ${(props: SProps) => (props.value ? 'auto' : '3rem')};\n`;\n\ninterface Props<T> {\n  options: T[];\n  value: T;\n  placeholder?: string;\n  searchable?: boolean;\n  name?: string;\n  optionComponent?:\n    | React.ComponentClass<OptionComponentProps<T>>\n    | React.StatelessComponent<OptionComponentProps<T>>;\n  valueComponent?: React.ComponentClass<T> | React.StatelessComponent<T>;\n  onChange(option: T): void;\n}\n\nexport default function Dropdown({\n  onChange,\n  options,\n  optionComponent,\n  value,\n  valueComponent,\n  placeholder,\n  searchable,\n  name // field name for hidden input. Important for Formik\n}: Props<any>) {\n  return (\n    <SSelect\n      clearable={false}\n      menuContainerStyle={{ maxHeight: '65vh', borderTop: '1px solid #ececec' }}\n      menuStyle={{ maxHeight: '65vh' }}\n      name={name}\n      onChange={onChange}\n      options={options}\n      optionComponent={optionComponent}\n      placeholder={placeholder}\n      searchable={searchable}\n      value={value} //!! value must be an expression or an object !?\n      valueComponent={valueComponent}\n    />\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\ninterface Props {\n  height?: string;\n  color?: string;\n  padding?: string;\n}\n\nconst SDivider = styled('div')`\n  height: ${(p: Props) => (p.height ? p.height : '1px')};\n  background-color: ${(p: Props) => (p.color ? p.color : 'var(--color-gray-lighter)')};\n  width: 100%;\n  background-clip: content-box;\n  padding-left: ${(p: Props) => (p.padding ? p.padding : 0)};\n  padding-right: ${(p: Props) => (p.padding ? p.padding : 0)};\n`;\nfunction Divider({ color, height, padding, ...props }: Props) {\n  return <SDivider padding={padding} color={color} height={height} {...props} />;\n}\n\nexport default Divider;\n","import React from 'react';\nimport { Button, Panel, Typography } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { BREAK_POINTS } from 'v2/theme';\nimport Stepper from './Stepper';\nimport backArrowIcon from 'common/assets/images/icn-back-arrow.svg';\n\ninterface ContentPanelProps {\n  width?: string;\n  mobileMaxWidth?: string;\n}\n\nconst ContentPanelWrapper = styled.div`\n  width: ${(props: ContentPanelProps) => props.width};\n  max-width: ${(props: ContentPanelProps) => props.width};\n  @media (max-width: ${BREAK_POINTS.SCREEN_SM}) {\n    width: ${(props: ContentPanelProps) => props.mobileMaxWidth};\n    padding-left: 0px;\n    margin-bottom: 1em;\n  }\n`;\n\nconst BackButton = styled(Button)`\n  color: #007a99;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  img {\n    margin-right: 13px;\n  }\n`;\n\nconst ContentPanelHeading = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  color: #303030;\n  font-family: Lato;\n  font-size: 32px;\n  font-weight: bold;\n`;\n\nconst ContentPanelHeadingIcon = styled.img`\n  width: 45px;\n  height: 45px;\n`;\n\nconst ContentPanelDescription = styled(Typography)`\n  margin: 0;\n  margin-bottom: 15px;\n`;\n\ninterface ContentPanelTopProps {\n  stepperOnly: boolean;\n}\n\nconst ContentPanelTop = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: ${(props: ContentPanelTopProps) =>\n    props.stepperOnly ? 'flex-end' : 'space-between'};\n  margin-bottom: 10px;\n  padding: 0;\n`;\n\ninterface Props {\n  children: any;\n  className?: string;\n  heading?: string;\n  icon?: string;\n  description?: string;\n  stepper?: {\n    current: number;\n    total: number;\n  };\n  width?: string;\n  mobileMaxWidth?: string;\n  onBack?(): void | null;\n}\n\nexport default function ContentPanel({\n  onBack,\n  stepper,\n  heading,\n  icon,\n  description,\n  children,\n  className = '',\n  width = '550px',\n  mobileMaxWidth = '100%',\n  ...rest\n}: Props) {\n  return (\n    <ContentPanelWrapper width={width} mobileMaxWidth={mobileMaxWidth}>\n      {(onBack || stepper) && (\n        <ContentPanelTop stepperOnly={stepper !== undefined && !onBack}>\n          {onBack && (\n            <BackButton basic={true} onClick={onBack}>\n              <img src={backArrowIcon} alt=\"Back arrow\" /> Back\n            </BackButton>\n          )}\n          {stepper && <Stepper current={stepper.current} total={stepper.total} />}\n        </ContentPanelTop>\n      )}\n      <Panel className={className} {...rest}>\n        {heading && (\n          <ContentPanelHeading>\n            {heading}\n            {icon && <ContentPanelHeadingIcon src={icon} alt=\"Icon\" />}\n          </ContentPanelHeading>\n        )}\n        {description && <ContentPanelDescription>{description}</ContentPanelDescription>}\n        {children}\n      </Panel>\n    </ContentPanelWrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Copyable } from '@mycrypto/ui';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nconst truncate = (_: string) => {\n  return '';\n};\n\nconst CopyableCodeBlockWrapper = styled('div')`\n  font-weight: 400;\n  font-size: 1rem;\n  margin: 0;\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  box-shadow: inset 0 1px 0 0 rgba(63, 63, 68, 0.05);\n  border: 1px solid #e5ecf3;\n  display: flex;\n`;\n\nconst CodeDisplay = styled('pre')`\n  font-weight: 400;\n  font-size: 1rem;\n  background-color: #ffffff;\n  padding: 0.75rem 1rem;\n  margin: 0;\n  font-size: 1rem;\n  border: none;\n  overflow: hidden;\n  & > code {\n    display: block;\n    border: none;\n    text-align: left;\n    max-height: 320px;\n    font-size: 14px;\n    white-space: pre;\n  }\n  &.wrap {\n    & > code {\n      white-space: normal;\n    }\n  }\n`;\n\nconst CodeCopyButton = styled('div')`\n  display: block;\n  align-content: center;\n  justify-items: center;\n  position: relative;\n  line-height: 0px;\n  right: 0px;\n  max-height: 320px;\n  padding: 9px 6px 9px 6px;\n  font-size: 14px;\n  white-space: pre;\n`;\n\nconst CopyableCodeBlock = ({ children }: Props) => (\n  <CopyableCodeBlockWrapper>\n    <CodeDisplay>\n      <code>{children}</code>\n    </CodeDisplay>\n    <CodeCopyButton>\n      <Copyable text={`${children}`} truncate={truncate} />\n    </CodeCopyButton>\n  </CopyableCodeBlockWrapper>\n);\n\nexport default CopyableCodeBlock;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Typography } from '@mycrypto/ui';\n\ninterface CheckboxProps {\n  name: string;\n  label: string;\n  checked: boolean;\n  icon?: any;\n  onChange(): void;\n}\n\nconst SContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 31px;\n  margin-bottom: 15px;\n  font-size: 1em;\n`;\n\n// Styling Checkbox Starts\n// Adapted from: https://appitventures.com/blog/styling-checkbox-css-tips/\nconst checkboxSize = '20px';\nconst borderRadius = '2px';\nconst SLabel = styled('label')`\n  display: block;\n  position: relative;\n  cursor: pointer;\n  font-size: 18px;\n  line-height: ${checkboxSize};\n  height: ${checkboxSize};\n  width: ${checkboxSize};\n  clear: both;\n  margin: 0;\n\n  & > input {\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n  }\n\n  & > input:checked ~ span {\n    background-color: transparent;\n    border-radius: ${borderRadius};\n    transform: rotate(0deg) scale(1);\n    opacity: 1;\n    border: ${props => `1px solid ${props.theme.GAU.COLORS.borderColor}`};\n  }\n\n  & > span {\n    position: absolute;\n    height: ${checkboxSize};\n    width: ${checkboxSize};\n    background-color: transparent;\n    border-radius: ${borderRadius};\n    border: ${props => `1px solid ${props.theme.GAU.COLORS.borderColor}`};\n    transition: all 0.2s ease-out;\n  }\n\n  // Create the pseudo content element and place it in the center\n  // Hide it by setting the scale(0)\n  // This will be the origin of the transition.\n  & > span::after {\n    position: absolute;\n    content: '';\n    left: 50%;\n    top: 50%;\n    margin-top: -1px;\n    margin-left: -1px;\n    height: 0px;\n    width: 0px;\n    border: ${props => `1px solid ${props.theme.GAU.COLORS.brightSkyBlue}`};\n    opacity: 1;\n    transform: rotate(0deg) scale(0);\n    transition: all 0.2s ease-out;\n  }\n\n  // When the checkbox is selected we transform to show half the borders\n  // of a rotated rectangle which provides the swoosh effect.\n  // 'top' & 'left' are used to position the swoosh with the container.\n  // 'width' & 'height' serve as the size.\n  & > input:checked ~ span::after {\n    opacity: 1;\n    left: 35%;\n    top: 15%;\n    width: 7px;\n    height: 12px;\n    border: ${props => `solid ${props.theme.GAU.COLORS.brightSkyBlue}`};\n    border-radius: 1px;\n    border-width: 0 2px 2px 0;\n    background-color: transparent;\n    transform: rotate(45deg) scale(1);\n  }\n`;\n\nconst SIconContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-right: 15px;\n  & img {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nconst SLabelContainer = styled('div')`\n  padding: 7px 0;\n`;\n\nexport default function Checkbox({ name, label, checked, onChange, icon }: CheckboxProps) {\n  return (\n    <SContainer onClick={onChange}>\n      <SLabel key={name} htmlFor={name}>\n        <input\n          data-for=\"hidden-checkbox\"\n          type=\"checkbox\"\n          name={name}\n          checked={checked}\n          onChange={onChange}\n        />\n        <span data-for=\"custom-checkbox\" />\n      </SLabel>\n      <div style={{ display: 'flex', flexDirection: 'row', marginLeft: '15px' }}>\n        {icon && <SIconContainer>{icon()}</SIconContainer>}\n        <SLabelContainer>\n          <Typography style={{ fontSize: '1em', margin: 0 }}>{label}</Typography>\n        </SLabelContainer>\n      </div>\n    </SContainer>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ads } from './constants';\nimport { BREAK_POINTS } from 'v2/theme';\nimport { ANALYTICS_CATEGORIES, AnalyticsService } from 'v2/services';\n\nconst { SCREEN_SM } = BREAK_POINTS;\n\nconst AdWrapper = styled.div`\n  margin-bottom: 14px;\n  cursor: pointer;\n`;\n\nconst BannerImageDesktop = styled.img`\n  width: 100%;\n  height: auto;\n\n  @media (max-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst BannerImageMobile = styled.img`\n  width: 100%;\n  height: auto;\n\n  @media (min-width: ${SCREEN_SM}) {\n    display: none;\n  }\n`;\n\nconst onAdClick = (ad: string) => {\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.AD, `${ad} ad clicked`);\n};\n\nexport default function BannerAd() {\n  const randomIndex = Math.floor(Math.random() * ads.length);\n  const ad = ads[randomIndex];\n  const isExternalLink = ad.url.startsWith('http');\n\n  return (\n    <AdWrapper onClick={() => onAdClick(ad.name)}>\n      {isExternalLink ? (\n        <a href={ad.url} target=\"_blank\" rel=\"noreferrer\">\n          <BannerImageDesktop src={ad.srcDesktop} />\n          <BannerImageMobile src={ad.srcMobile} />\n        </a>\n      ) : (\n        <Link to={ad.url}>\n          <BannerImageDesktop src={ad.srcDesktop} />\n          <BannerImageMobile src={ad.srcMobile} />\n        </Link>\n      )}\n    </AdWrapper>\n  );\n}\n","import styled, { css } from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\ninterface ButtonProps {\n  fullWidth?: boolean;\n}\n\nconst StyledButton = styled(Button)<ButtonProps>`\n  ${props =>\n    props.fullWidth === true &&\n    css`\n      width: 100%;\n      margin-top: 1rem;\n    `}\n`;\n\nexport default StyledButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport manifest from 'cryptocurrency-icons/manifest.json';\n\nimport { IAsset, TSymbol } from 'v2/types';\n// Relies on https://github.com/atomiclabs/cryptocurrency-icons using fixed version number through CDN\n// @TODO: We should be using our own sprite served over a trusted CDN\nconst baseURL = 'https://cdn.mycryptoapi.com/v1/icons';\n\nfunction buildUrl(symbol: TSymbol) {\n  return `${baseURL}/${symbol.toLowerCase()}.svg`;\n}\n\nfunction getIconUrl(symbol: TSymbol) {\n  const curr = manifest.find((c: IAsset) => c.symbol === symbol);\n  return curr ? buildUrl(symbol) : buildUrl('generic' as TSymbol);\n}\n\nconst SImg = styled('img')`\n  height: ${(p: { size: string }) => p.size};\n`;\n\ninterface Props {\n  symbol: TSymbol;\n  size?: string;\n  className?: string;\n}\n\nfunction AssetIcon({ symbol, size = '32px', className }: Props) {\n  const iconUrl = getIconUrl(symbol);\n\n  return <SImg src={iconUrl} size={size} className={className} />;\n}\n\nexport default AssetIcon;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { TSymbol } from 'v2/types';\nimport { AssetIcon, Typography } from 'v2/components';\n\nconst SContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  padding: 16px 15px 16px 15px;\n\n  &:hover {\n    background-color: ${(p: { selectable: boolean }) =>\n      p.selectable ? 'var(--color-gray-lighter)' : 'inherit'};\n  }\n`;\n\nfunction AssetSummary({ symbol, name, onClick, selectable = false }: Props) {\n  return (\n    <SContainer {...(onClick ? { onPointerDown: onClick } : null)} selectable={selectable}>\n      <AssetIcon symbol={symbol} size={'1.5rem'} />\n      <Typography bold={true} value={symbol} style={{ marginLeft: '16px' }} />\n      {name && <span>&nbsp; - &nbsp;</span>}\n      <Typography value={name} />\n    </SContainer>\n  );\n}\n\ninterface Props {\n  symbol: TSymbol;\n  name?: string;\n  selectable?: boolean;\n  onClick?(): void;\n}\n\nexport default AssetSummary;\n","import React, { useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport styled, { css } from 'styled-components';\nimport { Button, Copyable, Identicon } from '@mycrypto/ui';\n\nimport { translateRaw } from 'translations';\nimport { ROUTE_PATHS, Fiats } from 'v2/config';\nimport { CollapsibleTable, Network } from 'v2/components';\nimport { default as Typography } from 'v2/components/Typography'; // @TODO solve Circular Dependency issue\nimport { truncate, IS_MOBILE } from 'v2/utils';\nimport { BREAK_POINTS, COLORS, breakpointToNumber } from 'v2/theme';\nimport { ExtendedAccount, AddressBook, StoreAccount } from 'v2/types';\nimport {\n  AccountContext,\n  getLabelByAccount,\n  StoreContext,\n  SettingsContext,\n  AddressBookContext\n} from 'v2/services/Store';\nimport { DashboardPanel } from './DashboardPanel';\nimport './AccountList.scss';\nimport { RatesContext } from 'v2/services';\nimport { default as Currency } from './Currency';\n\nconst Label = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nconst SIdenticon = styled(Identicon)`\n  img {\n    height: 2em;\n  }\n  margin-right: 10px;\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    margin-right: 27px;\n  }\n`;\n\nconst STypography = styled(Typography)`\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    font-weight: inherit;\n  }\n`;\n\n// On mobile screen the CollapisableTable becomes a Stacked card.\n// We provide better styles for desktop screens\nconst CurrencyContainer = styled(Currency)`\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    float: right;\n  }\n`;\n\nconst HeaderAlignment = styled.div`\n  ${(props: { align?: string }) => css`\n    @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n      text-align: ${props.align || 'inherit'};\n    }\n  `};\n`;\n\ninterface IFavoriteProps {\n  favorited: boolean;\n}\n\nconst FavoriteButton = styled(Button)`\n  span {\n    span {\n      svg {\n        path {\n          fill: ${(props: IFavoriteProps) => (props.favorited ? COLORS.GOLD : 'white')};\n          stroke: ${(props: IFavoriteProps) => (props.favorited ? COLORS.GOLD : '#7b8695')};\n        }\n      }\n    }\n  }\n  align-self: flex-start;\n  margin-left: 1em;\n`;\n\nconst DeleteButton = styled(Button)`\n  align-self: flex-end;\n  font-size: 0.7em;\n  width: 20px;\n`;\n\nconst TableContainer = styled.div`\n  display: block;\n  max-height: 394px;\n  overflow: auto;\n`;\n\ntype DeleteAccount = (uuid: string) => void;\ntype UpdateAccount = (uuid: string, accountData: ExtendedAccount) => void;\ninterface AccountListProps {\n  className?: string;\n  currentsOnly?: boolean;\n  deletable?: boolean;\n  favoritable?: boolean;\n  footer?: JSX.Element;\n  copyable?: boolean;\n}\n\nexport default function AccountList(props: AccountListProps) {\n  const { className, currentsOnly, deletable, favoritable, footer, copyable } = props;\n  const { currentAccounts, accounts, deleteAccountFromCache } = useContext(StoreContext);\n  const { updateAccount } = useContext(AccountContext);\n  const shouldRedirect = accounts === undefined || accounts === null || accounts.length === 0;\n  if (shouldRedirect) {\n    return <Redirect to=\"/no-accounts\" />;\n  }\n\n  return (\n    <DashboardPanel\n      heading={translateRaw('ACCOUNT_LIST_TABLE_ACCOUNTS')}\n      headingRight={`+ ${\n        IS_MOBILE ? translateRaw('ACCOUNT_LIST_TABLE_ADD') : translateRaw('ACCOUNT_LIST_TABLE_ADD')\n      }`}\n      actionLink={ROUTE_PATHS.ADD_ACCOUNT.path}\n      className={`AccountList ${className}`}\n      footer={footer}\n    >\n      <TableContainer>\n        <CollapsibleTable\n          breakpoint={breakpointToNumber(BREAK_POINTS.SCREEN_XS)}\n          {...buildAccountTable(\n            currentsOnly ? currentAccounts() : accounts,\n            deleteAccountFromCache,\n            updateAccount,\n            deletable,\n            favoritable,\n            copyable\n          )}\n        />\n      </TableContainer>\n    </DashboardPanel>\n  );\n}\n\nfunction buildAccountTable(\n  accounts: StoreAccount[],\n  deleteAccount: DeleteAccount,\n  updateAccount: UpdateAccount,\n  deletable?: boolean,\n  favoritable?: boolean,\n  copyable?: boolean\n) {\n  const { totalFiat } = useContext(StoreContext);\n  const { getRate } = useContext(RatesContext);\n  const { settings } = useContext(SettingsContext);\n  const { addressBook } = useContext(AddressBookContext);\n  const columns = [\n    translateRaw('ACCOUNT_LIST_LABEL'),\n    translateRaw('ACCOUNT_LIST_ADDRESS'),\n    translateRaw('ACCOUNT_LIST_NETWORK'),\n    <HeaderAlignment key={'ACCOUNT_LIST_VALUE'} align=\"center\">\n      {translateRaw('ACCOUNT_LIST_VALUE')}\n    </HeaderAlignment>\n  ];\n\n  return {\n    head: deletable ? [...columns, translateRaw('ACCOUNT_LIST_DELETE')] : columns,\n    body: accounts.map((account, index) => {\n      const addressCard: AddressBook | undefined = getLabelByAccount(account, addressBook);\n      const total = totalFiat([account])(getRate);\n      const label = addressCard ? addressCard.label : 'Unknown Account';\n      const bodyContent = [\n        <Label key={index}>\n          <SIdenticon address={account.address} />\n          <STypography bold={true} value={label} />\n        </Label>,\n        <Copyable key={index} text={account.address} truncate={truncate} isCopyable={copyable} />,\n        <Network key={index} color=\"#a682ff\">\n          {account.networkId}\n        </Network>,\n        <CurrencyContainer\n          key={index}\n          amount={total.toString()}\n          symbol={Fiats[settings.fiatCurrency].symbol}\n          prefix={Fiats[settings.fiatCurrency].prefix}\n          decimals={2}\n        />\n      ];\n      return deletable\n        ? [\n            ...bodyContent,\n            <DeleteButton\n              key={index}\n              onClick={handleAccountDelete(deleteAccount, account.uuid)}\n              icon=\"exit\"\n            />\n          ]\n        : favoritable\n        ? [\n            <FavoriteButton\n              key={index}\n              icon=\"star\"\n              favorited={account.favorite ? account.favorite : false}\n              onClick={() =>\n                updateAccount(account.uuid, {\n                  ...account,\n                  favorite: !account.favorite\n                })\n              }\n            />,\n            ...bodyContent\n          ]\n        : bodyContent;\n    }),\n    config: {\n      primaryColumn: translateRaw('ACCOUNT_LIST_LABEL'),\n      sortableColumn: translateRaw('ACCOUNT_LIST_LABEL'),\n      sortFunction: (a: any, b: any) => {\n        const aLabel = a.props.label;\n        const bLabel = b.props.label;\n        return aLabel === bLabel ? true : aLabel.localeCompare(bLabel);\n      },\n      hiddenHeadings: deletable ? [translateRaw('ACCOUNT_LIST_DELETE')] : undefined,\n      iconColumns: deletable ? [translateRaw('ACCOUNT_LIST_DELETE')] : undefined\n    }\n  };\n}\n\n/**\n * A higher order function that binds to an account uuid, which returns a handler that will\n * delete the bound account onClick\n */\nfunction handleAccountDelete(deleteAccount: DeleteAccount, uuid: string) {\n  return () => deleteAccount(uuid);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Address } from '@mycrypto/ui';\n\nimport { truncate } from 'v2/utils';\nimport { TSymbol } from 'v2/types';\nimport Currency from './Currency';\n\ninterface Props {\n  address: string;\n  balance: string;\n  baseAssetSymbol?: string;\n  label?: string;\n  selectable?: boolean;\n  onClick?(): void;\n}\n\ninterface SProps {\n  selectable: boolean;\n}\n\nconst SCurrency = styled(Currency)`\n  margin-left: 58px;\n`;\n// To change the hover behavior on Address, we need it to be a SC.\n// https://www.styled-components.com/docs/advanced#caveat\nconst SAddress = styled(Address)``;\n\nconst SAccountWrapper = styled('div')`\n  display: flex;\n  padding: 16px 15px 16px 19px;\n  flex-direction: column;\n  & > div {\n    line-height: 1.2;\n    color: var(--greyish-brown);\n  }\n  & > ${SAddress} {\n    pointer-events: none;\n  }\n  &:hover {\n    background-color: ${(p: SProps) => (p.selectable ? 'var(--color-gray-lighter)' : 'inherit')};\n  }\n`;\n\n// Display an address with it's balance\nfunction AccountSummary({\n  address,\n  balance,\n  baseAssetSymbol,\n  label,\n  selectable = true,\n  onClick\n}: Props) {\n  return (\n    <SAccountWrapper onPointerDown={onClick} selectable={selectable}>\n      <SAddress title={label} truncate={truncate} address={address} />\n      <SCurrency\n        amount={balance}\n        symbol={(baseAssetSymbol as TSymbol) || ('ETH' as TSymbol)}\n        decimals={4}\n        icon={true}\n      />\n    </SAccountWrapper>\n  );\n}\n\nexport default AccountSummary;\n","import React from 'react';\nimport html2canvas from 'html2canvas';\nimport { addHexPrefix, toChecksumAddress } from 'ethereumjs-util';\nimport styled from 'styled-components';\n\nimport notesBg from 'assets/images/notes-bg.png';\nimport sidebarImg from 'assets/images/print-sidebar.png';\nimport { Identicon, QRCode } from 'components/ui';\nimport './index.scss';\n\nconst HiddenPaperWallet = styled.div`\n  position: absolute;\n  top: -1000px;\n`;\n\ninterface Props {\n  address: string;\n  privateKey: string;\n  isHidden?: boolean;\n}\n\nexport default class PaperWallet extends React.Component<Props, {}> {\n  private container: HTMLElement | null;\n\n  public render() {\n    const { privateKey, isHidden } = this.props;\n    const address = toChecksumAddress(addHexPrefix(this.props.address));\n    const paperWallet = (\n      <div className=\"PaperWallet\" ref={el => (this.container = el)}>\n        <img src={sidebarImg} className=\"PaperWallet-sidebar\" alt=\"MyCrypto Logo\" />\n\n        <div className=\"PaperWallet-block\">\n          <div className=\"PaperWallet-block-box\">\n            <QRCode data={address} />\n          </div>\n          <p className=\"PaperWallet-block-text\">YOUR ADDRESS</p>\n        </div>\n\n        <div className=\"PaperWallet-block\">\n          <img src={notesBg} className=\"PaperWallet-block-box is-shaded\" aria-hidden={true} />\n          <p className=\"PaperWallet-block-text\">AMOUNT / NOTES</p>\n        </div>\n\n        <div className=\"PaperWallet-block\">\n          <div className=\"PaperWallet-block-box\">\n            <QRCode data={privateKey} />\n          </div>\n          <p className=\"PaperWallet-block-text\">YOUR PRIVATE KEY</p>\n        </div>\n\n        <div className=\"PaperWallet-info\">\n          <p className=\"PaperWallet-info-text\">\n            <strong className=\"PaperWallet-info-text-label\">Your Address:</strong>\n            <br />\n            {address}\n          </p>\n          <p className=\"PaperWallet-info-text\">\n            <strong className=\"PaperWallet-info-text-label\">Your Private Key:</strong>\n            <br />\n            {privateKey}\n          </p>\n        </div>\n\n        <div className=\"PaperWallet-identicon\">\n          <div className=\"PaperWallet-identicon-left\">\n            <Identicon address={address} size={'42px'} />\n          </div>\n          <p className=\"PaperWallet-identicon-text\">\n            Always look for this icon when sending to this wallet\n          </p>\n        </div>\n      </div>\n    );\n\n    return isHidden ? <HiddenPaperWallet>{paperWallet}</HiddenPaperWallet> : paperWallet;\n  }\n\n  public toPNG = async (scale: number = 1) => {\n    if (!this.container) {\n      return '';\n    }\n    const canvas = await html2canvas(this.container, { scale });\n    return canvas.toDataURL('image/png');\n  };\n}\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport { InputField } from 'v2/components';\nimport { verifySignedMessage } from 'v2/services/EthService';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\nimport { translate, translateRaw } from 'translations';\nimport { ISignedMessage } from 'v2/types';\n\nconst { SCREEN_XS } = BREAK_POINTS;\nconst { WHITE, SUCCESS_GREEN } = COLORS;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface VerifyButtonProps {\n  disabled?: boolean;\n}\nconst VerifyButton = styled(Button)<VerifyButtonProps>`\n  ${props => props.disabled && 'opacity: 0.4;'}\n\n  @media (max-width: ${SCREEN_XS}) {\n    width: 100%;\n  }\n`;\n\nconst SignedMessage = styled.div`\n  margin-top: 15px;\n  padding: 15px;\n  color: ${WHITE};\n  font-size: 16px;\n  background-color: ${SUCCESS_GREEN};\n  width: 100%;\n  overflow: auto;\n`;\n\nconst signatureExample: ISignedMessage = {\n  address: '0x7cB57B5A97eAbe94205C07890BE4c1aD31E486A8',\n  msg: 'asdfasdfasdf',\n  sig: '0x4771d78f13ba...',\n  version: '2'\n};\nconst signaturePlaceholder = JSON.stringify(signatureExample, null, 2);\n\nexport default function VerifyMessage() {\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [signedMessage, setSignedMessage] = useState<ISignedMessage | null>(null);\n\n  const handleVerifySignedMessage = () => {\n    try {\n      const parsedSignature: ISignedMessage = JSON.parse(message);\n      const isValid = verifySignedMessage(parsedSignature);\n\n      if (!isValid) {\n        throw Error();\n      }\n\n      setError(undefined);\n      setSignedMessage(parsedSignature);\n    } catch (err) {\n      setError(translateRaw('ERROR_38'));\n      setSignedMessage(null);\n    }\n  };\n\n  const handleOnChange = (msg: string) => {\n    setMessage(msg);\n    setError(undefined);\n    setSignedMessage(null);\n  };\n\n  return (\n    <Content>\n      <InputField\n        value={message}\n        label={translate('MSG_SIGNATURE')}\n        placeholder={signaturePlaceholder}\n        textarea={true}\n        onChange={event => handleOnChange(event.target.value)}\n        height=\"150px\"\n        inputError={error}\n      />\n      <VerifyButton disabled={!message} onClick={handleVerifySignedMessage}>\n        {translate('MSG_VERIFY')}\n      </VerifyButton>\n      {signedMessage && (\n        <SignedMessage>\n          {translate('VERIFY_MESSAGE_SIGNED', {\n            $address: signedMessage.address,\n            $msg: signedMessage.msg\n          })}\n        </SignedMessage>\n      )}\n    </Content>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport { InputField, CodeBlock, WalletList } from 'v2/components';\nimport { BREAK_POINTS } from 'v2/theme';\nimport { translate, translateRaw } from 'translations';\nimport { ISignedMessage, INode, FormData, WalletId } from 'v2/types';\nimport { STORIES } from './stories';\nimport { WALLETS_CONFIG } from 'v2/config';\nimport { AppState } from 'features/reducers';\nimport { setupWeb3Node } from 'v2/services/EthService';\nimport { IFullWallet } from 'v2/services/WalletService';\nimport { messageToData } from 'features/message/sagas';\nimport { paritySignerActions } from 'features/paritySigner';\n\nimport backArrowIcon from 'common/assets/images/icn-back-arrow.svg';\n\nconst { SCREEN_XS } = BREAK_POINTS;\n\nexport const defaultFormData: FormData = {\n  network: 'Ethereum',\n  accountType: undefined,\n  account: '',\n  label: 'New Account',\n  derivationPath: ''\n};\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface SignButtonProps {\n  disabled?: boolean;\n}\nconst SignButton = styled(Button)<SignButtonProps>`\n  ${props => props.disabled && 'opacity: 0.4;'}\n\n  @media (max-width: ${SCREEN_XS}) {\n    width: 100%;\n  }\n`;\n\nconst SignedMessage = styled.div`\n  margin-top: 10px;\n  width: 100%;\n`;\n\nconst SignedMessageLabel = styled.p`\n  font-size: 18px;\n  width: 100%;\n  line-height: 1;\n  text-align: left;\n  font-weight: normal;\n  margin-bottom: 9px;\n  color: ${props => props.theme.text};\n`;\n\nconst CodeBlockWrapper = styled.div`\n  width: 100%;\n`;\n\ninterface BackButtonProps {\n  marginBottom: boolean;\n}\n\nconst BackButton = styled(Button)<BackButtonProps>`\n  align-self: flex-start;\n  color: #007a99;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n  ${props => props.marginBottom && 'margin-bottom: 40px;'}\n\n  img {\n    margin-right: 8px;\n  }\n`;\n\ninterface DispatchProps {\n  requestParityMessageSignature: paritySignerActions.TRequestMessageSignature;\n}\n\ninterface StateProps {\n  paritySig: string;\n  setShowSubtitle(show: boolean): void;\n}\n\ntype Props = DispatchProps & StateProps;\n\nfunction SignMessage(props: Props) {\n  const [walletName, setWalletName] = useState<WalletId | undefined>(undefined);\n  const [wallet, setWallet] = useState<IFullWallet | null>(null);\n  const [unlocked, setUnlocked] = useState(false);\n  const [isSigned, setIsSigned] = useState(false);\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState<string | undefined>(undefined);\n  const [signedMessage, setSignedMessage] = useState<ISignedMessage | null>(null);\n\n  const { setShowSubtitle } = props;\n\n  useEffect(() => {\n    if (props.paritySig && signedMessage && walletName === WalletId.PARITY_SIGNER) {\n      setSignedMessage({ ...signedMessage, sig: props.paritySig });\n      setIsSigned(true);\n    }\n  }, [props.paritySig]);\n\n  const handleSignMessage = async () => {\n    try {\n      if (!wallet) {\n        throw Error;\n      }\n\n      const address = wallet.getAddressString();\n      let sig = '';\n\n      if (walletName === WalletId.PARITY_SIGNER) {\n        const data = messageToData(message);\n        props.requestParityMessageSignature(address, data);\n      } else {\n        let lib: INode = {} as INode;\n        if (walletName === WalletId.METAMASK) {\n          lib = (await setupWeb3Node()).lib;\n        }\n        sig = await wallet.signMessage(message, lib);\n      }\n\n      const combined = {\n        address,\n        msg: message,\n        sig,\n        version: '2'\n      };\n      setError(undefined);\n      setSignedMessage(combined);\n      setIsSigned(!!sig);\n    } catch (err) {\n      setError(translateRaw('ERROR_38'));\n      setSignedMessage(null);\n    }\n  };\n\n  const handleOnChange = (msg: string) => {\n    setMessage(msg);\n    setError(undefined);\n    setSignedMessage(null);\n  };\n\n  const onSelect = (selectedWalletName: WalletId) => {\n    setWalletName(selectedWalletName);\n    setShowSubtitle(false);\n  };\n\n  const onUnlock = (selectedWallet: any) => {\n    setWallet(selectedWallet);\n    setUnlocked(true);\n  };\n\n  const resetWalletSelectionAndForm = () => {\n    setMessage('');\n    setError(undefined);\n    setSignedMessage(null);\n    setWalletName(undefined);\n    setUnlocked(false);\n    setIsSigned(false);\n    setShowSubtitle(true);\n  };\n\n  const story = STORIES.find(x => x.name === walletName);\n  const Step = story && story.steps[0];\n\n  return (\n    <Content>\n      {walletName ? (\n        <>\n          <BackButton marginBottom={unlocked} basic={true} onClick={resetWalletSelectionAndForm}>\n            <img src={backArrowIcon} alt=\"Back arrow\" />\n            {translateRaw('CHANGE_WALLET_BUTTON')}\n          </BackButton>\n          {!unlocked && Step && (\n            <Step\n              wallet={WALLETS_CONFIG[walletName]}\n              onUnlock={onUnlock}\n              formData={defaultFormData}\n            />\n          )}\n        </>\n      ) : (\n        <WalletList wallets={STORIES} onSelect={onSelect} />\n      )}\n\n      {unlocked && walletName && (\n        <>\n          <InputField\n            value={message}\n            label={translate('MSG_MESSAGE')}\n            placeholder={translateRaw('SIGN_MSG_PLACEHOLDER')}\n            textarea={true}\n            onChange={event => handleOnChange(event.target.value)}\n            height=\"150px\"\n            inputError={error}\n          />\n          <SignButton disabled={!message} onClick={handleSignMessage}>\n            {translate('NAV_SIGNMSG')}\n          </SignButton>\n          {signedMessage && isSigned && (\n            <SignedMessage>\n              <SignedMessageLabel>{translate('MSG_SIGNATURE')}</SignedMessageLabel>\n              <CodeBlockWrapper>\n                <CodeBlock>{JSON.stringify(signedMessage, null, 2)}</CodeBlock>\n              </CodeBlockWrapper>\n            </SignedMessage>\n          )}\n        </>\n      )}\n    </Content>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  paritySig: state.paritySigner.sig\n});\n\nconst mapDispatchToProps = {\n  requestParityMessageSignature: paritySignerActions.requestMessageSignature\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SignMessage);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport translate from 'translations';\n\nimport sadWallet from 'common/assets/images/icn-sad-wallet.svg';\n\nconst NoAccountsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 450px;\n  text-align: center;\n  padding: 0 15px;\n`;\n\nconst Header = styled.p`\n  font-size: 24px;\n  font-weight: bold;\n  line-height: normal;\n  color: ${props => props.theme.headline};\n`;\n\nconst Description = styled.p`\n  height: 48px;\n  font-size: 16px;\n  font-weight: normal;\n  padding: 0 30px;\n  color: ${props => props.theme.text};\n\n  @media (min-width: 700px) {\n    font-size: 18px;\n  }\n`;\n\nconst ImgIcon = styled.img`\n  width: 130px;\n  height: 99px;\n  margin: 21px 0 28px 0;\n`;\n\nexport default function NoAccountsSelected() {\n  return (\n    <NoAccountsWrapper>\n      <ImgIcon src={sadWallet} />\n      <Header>{translate('NO_ACCOUNTS_SELECTED_HEADER')}</Header>\n      <Description>{translate('NO_ACCOUNTS_SELECTED_DESCRIPTION')}</Description>\n    </NoAccountsWrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { translate } from 'translations';\nimport { AnalyticsService, ANALYTICS_CATEGORIES } from 'v2/services';\nimport { COLORS } from 'v2/theme';\n\nimport addIcon from 'common/assets/images/icn-add-assets.svg';\n\nconst { BRIGHT_SKY_BLUE } = COLORS;\n\nconst NoAssetsWrapper = styled.div`\n  width: 100%;\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst NoAssetsCenter = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst PlusIcon = styled.img`\n  width: 75px;\n  height: 75px;\n`;\n\nconst NoAssetsHeading = styled.div`\n  font-size: 24px;\n  font-weight: bold;\n  color: #b5bfc7;\n`;\n\nconst NoAssetsDescription = styled.div`\n  color: #b5bfc7;\n  text-align: center;\n  font-weight: normal;\n\n  > a {\n    color: ${BRIGHT_SKY_BLUE};\n  }\n`;\n\nconst openLinkBuyMyCrypto = () => {\n  const url = 'buy.mycrypto.com';\n  window.open(`https://${url}`, '_blank');\n  AnalyticsService.instance.track(ANALYTICS_CATEGORIES.WALLET_BREAKDOWN, `Link ${url} clicked`);\n};\n\nexport default function NoAssets() {\n  return (\n    <NoAssetsWrapper>\n      <NoAssetsCenter onClick={openLinkBuyMyCrypto}>\n        <PlusIcon src={addIcon} />\n        <NoAssetsHeading>{translate('WALLET_BREAKDOWN_NO_ASSETS')}</NoAssetsHeading>\n        <NoAssetsDescription>{translate('WALLET_BREAKDOWN_NO_ASSETS_MORE')}</NoAssetsDescription>\n      </NoAssetsCenter>\n    </NoAssetsWrapper>\n  );\n}\n","import React, { Component, SetStateAction, Dispatch } from 'react';\nimport styled from 'styled-components';\nimport { PieChart, Pie, Sector, Cell } from 'recharts';\n\nimport { Balance } from './types';\nimport { SMALLEST_CHART_SHARE_SUPPORTED } from './WalletBreakdownView';\n\nconst MainWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  font-size: 14px;\n  font-weight: bold;\n  padding-right: 24px;\n`;\n\ninterface BreakdownChartProps {\n  balances: Balance[];\n  selectedAssetIndex: number;\n  setSelectedAssetIndex: Dispatch<SetStateAction<number>>;\n}\ninterface CustomLabelProps {\n  cx: number;\n  cy: number;\n  midAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  percent: number;\n  name: string;\n  ticker: string;\n  index: number;\n}\ninterface ActiveSectionProps {\n  cx: number;\n  cy: number;\n  innerRadius: number;\n  outerRadius: number;\n  startAngle: number;\n  endAngle: number;\n  percent: number;\n  fill: string;\n  activeIndex: number;\n}\n\nexport default class BreakdownChart extends Component<BreakdownChartProps> {\n  public isChartAnimating = false;\n\n  // Make active section bigger than the rest\n  public ActiveSection = (props: ActiveSectionProps) => {\n    const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill } = props;\n    return (\n      <g>\n        <Sector\n          cx={cx}\n          cy={cy}\n          innerRadius={innerRadius}\n          outerRadius={outerRadius + 20}\n          startAngle={startAngle}\n          endAngle={endAngle}\n          fill={fill}\n        />\n      </g>\n    );\n  };\n\n  public CustomLabel = (labelProps: CustomLabelProps) => {\n    const { cx, cy, midAngle, innerRadius, outerRadius, percent, ticker, index } = labelProps;\n    const { selectedAssetIndex } = this.props;\n\n    const isActiveSection = selectedAssetIndex === index;\n    const centerOffset = isActiveSection ? 0.7 : 0.6;\n\n    // Position the label in the center of the pie section\n    const radian = Math.PI / 180;\n    const radius = (innerRadius + (outerRadius - innerRadius)) * centerOffset;\n    const x = percent < 1 ? cx + radius * Math.cos(-midAngle * radian) : cx;\n    const y = percent < 1 ? cy + radius * Math.sin(-midAngle * radian) : cy;\n\n    // Don't show the label if percent is 3%\n    return percent > SMALLEST_CHART_SHARE_SUPPORTED ? (\n      <text x={x} y={y} fill=\"white\" textAnchor={'middle'} dominantBaseline=\"central\">\n        {ticker}\n      </text>\n    ) : (\n      <text />\n    );\n  };\n\n  // Generate colors for all sections of the pie\n  public generateColors = (length: number) => {\n    const startColor = { r: 223, g: 215, b: 245 };\n    const endColor = { r: 166, g: 130, b: 255 };\n\n    const colors = [];\n    const step = length > 1 ? 1 / (length - 1) : 0;\n\n    for (let i = 0; i < length; i++) {\n      const ratio = i * step;\n      const r = Math.ceil(startColor.r * ratio + endColor.r * (1 - ratio));\n      const g = Math.ceil(startColor.g * ratio + endColor.g * (1 - ratio));\n      const b = Math.ceil(startColor.b * ratio + endColor.b * (1 - ratio));\n      colors.push('#' + r.toString(16) + g.toString(16) + b.toString(16));\n    }\n    return colors;\n  };\n\n  public handleMouseEnter = (_: any, index: number) => {\n    // Ignore mouse enter while animating the chart\n    if (this.isChartAnimating) {\n      return;\n    }\n\n    this.props.setSelectedAssetIndex(index);\n  };\n\n  public render() {\n    const { balances, selectedAssetIndex } = this.props;\n    const COLORS = this.generateColors(balances.length);\n    return (\n      <MainWrapper>\n        <PieChart width={400} height={350}>\n          <Pie\n            activeIndex={selectedAssetIndex}\n            activeShape={this.ActiveSection}\n            data={balances}\n            cx={200}\n            cy={200}\n            innerRadius={0}\n            outerRadius={110}\n            label={this.CustomLabel}\n            labelLine={false}\n            dataKey=\"fiatValue\"\n            onMouseEnter={this.handleMouseEnter}\n            animationDuration={800}\n            onAnimationStart={() => (this.isChartAnimating = true)}\n            onAnimationEnd={() => (this.isChartAnimating = false)}\n          >\n            {balances.map((entry, index) => (\n              <Cell fill={COLORS[index]} stroke={COLORS[index]} key={entry.name} />\n            ))}\n          </Pie>\n        </PieChart>\n      </MainWrapper>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { DashboardPanel, CollapsibleTable, AssetIcon } from 'v2/components';\nimport { WalletBreakdownProps } from './types';\nimport { BREAK_POINTS } from 'v2/theme';\nimport { TSymbol } from 'v2/types';\n\nimport backArrowIcon from 'common/assets/images/icn-back-arrow.svg';\n\nconst { SCREEN_MD } = BREAK_POINTS;\n\nconst BalancesOnly = styled.div`\n  width: 100%;\n\n  > section {\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nconst BackButton = styled(Button)`\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n\n  img {\n    margin-right: 13px;\n    margin-top: 3px;\n  }\n`;\n\nconst BalancesOnlyTotal = styled.div`\n  margin: 0;\n  font-size: 20px;\n  font-weight: bold;\n\n  @media (min-width: ${SCREEN_MD}) {\n    font-size: 24px;\n  }\n`;\n\nconst HeaderAlignment = styled.div`\n  @media (min-width: ${BREAK_POINTS.SCREEN_SM}) {\n    text-align: ${(props: { align?: string }) => props.align || 'inherit'};\n  }\n`;\n\nconst RowAlignment = styled.div`\n  float: ${(props: { align?: string }) => props.align || 'inherit'};\n`;\n\nconst Label = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\nconst Icon = styled(AssetIcon)`\n  margin-right: 10px;\n`;\n\nexport default function BalancesDetailView({\n  balances,\n  toggleShowChart,\n  totalFiatValue,\n  fiat\n}: WalletBreakdownProps) {\n  const TOKEN = translateRaw('WALLET_BREAKDOWN_TOKEN');\n  const AMOUNT = translateRaw('WALLET_BREAKDOWN_AMOUNT');\n  const BALANCE = translateRaw('WALLET_BREAKDOWN_BALANCE');\n  const balancesTable = {\n    head: [\n      TOKEN,\n      <HeaderAlignment key={AMOUNT} align=\"center\">\n        {AMOUNT}\n      </HeaderAlignment>,\n      <HeaderAlignment key={BALANCE} align=\"center\">\n        {BALANCE}\n      </HeaderAlignment>\n    ],\n    body: balances.map((balance, index) => {\n      return [\n        <Label key={index}>\n          <Icon symbol={balance.ticker as TSymbol} size={'2rem'} />\n          {balance.name}\n        </Label>,\n        <RowAlignment key={index} align=\"right\">\n          {`${balance.amount.toFixed(6)} ${balance.ticker}`}\n        </RowAlignment>,\n        <RowAlignment key={index} align=\"right\">\n          {`${fiat.symbol}${balance.fiatValue.toFixed(2)}`}\n        </RowAlignment>\n      ];\n    }),\n    config: {\n      primaryColumn: TOKEN,\n      sortableColumn: TOKEN,\n      sortFunction: (a: any, b: any) => {\n        const aLabel = a.props.children[1];\n        const bLabel = b.props.children[1];\n        return aLabel === bLabel ? true : aLabel.localeCompare(bLabel);\n      },\n      hiddenHeadings: []\n    }\n  };\n\n  return (\n    <BalancesOnly>\n      <DashboardPanel\n        heading={\n          <BackButton basic={true} onClick={toggleShowChart}>\n            <img src={backArrowIcon} alt=\"Back arrow\" /> {BALANCE}\n          </BackButton>\n        }\n        headingRight={\n          <BalancesOnlyTotal>\n            {fiat.symbol}\n            {totalFiatValue.toFixed(2)}\n          </BalancesOnlyTotal>\n        }\n      >\n        <CollapsibleTable {...balancesTable} />\n      </DashboardPanel>\n    </BalancesOnly>\n  );\n}\n","import React, { useEffect, useRef, useState, useContext } from 'react';\nimport { Icon, Identicon } from '@mycrypto/ui';\nimport styled, { StyledFunction } from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { Checkbox } from 'v2/components';\nimport { useOnClickOutside, truncate } from 'v2/utils';\nimport { getLabelByAccount, AddressBookContext } from 'v2/services/Store';\nimport { COLORS } from 'v2/theme';\nimport { ExtendedAccount, ExtendedAddressBook } from 'v2/types';\n\nconst { BRIGHT_SKY_BLUE } = COLORS;\n\ninterface AccountDropdownProps {\n  accounts: ExtendedAccount[];\n  selected: string[];\n  onSubmit(selected: string[]): void;\n}\n\ninterface SDropdownProps {\n  isOpen: boolean;\n  ref: SCref;\n}\n\nconst Divider = styled('div')`\n  border-bottom: ${props => `1px solid ${props.theme.GAU.COLORS.dividerColor}`};\n  margin-bottom: 15px;\n`;\n\nconst dropdown: StyledFunction<SDropdownProps & React.HTMLProps<HTMLInputElement>> = styled('div');\nconst SDropdown = dropdown`\n  display: flex;\n  align-items: center;\n  position: relative;\n  height: 48px;\n  padding: 9px 15px;\n  border: ${props => `1px solid ${props.theme.GAU.COLORS.dividerColor}`};\n  border-radius: 2px;\n  background-color: #ffffff;\n  cursor: pointer;\n\n  ${props =>\n    props.isOpen\n      ? `{\n    box-shadow: 0 7px 10px 5px rgba(50, 50, 93, 0.1), 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }`\n      : ''}\n\n  & > div {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    left: -1px;                 // border-box isn't satisfying so we increase width and\n    width: calc(100% + 2px);    // move to left to align the trigger and the dropdown.\n    position: absolute;\n    top: 100%;\n    z-index: 2;\n    padding: 15px 20px 14px 20px;\n    background: #ffffff;\n    border: 1px solid #e5ecf3;\n    border-top: none;\n    box-shadow: 0 7px 10px 5px rgba(50, 50, 93, 0.1);\n  }\n`;\n\nconst LabelRow = styled.span`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst IconWrapper = styled(Icon)`\n  margin: 0;\n  margin-left: 6px;\n  font-size: 0.75rem;\n\n  svg {\n    color: ${BRIGHT_SKY_BLUE};\n  }\n`;\n\nconst renderAccounts = (\n  accounts: ExtendedAccount[],\n  selected: string[],\n  addressBook: ExtendedAddressBook[],\n  handleChange: (uuid: string) => void\n) =>\n  accounts.map((account: ExtendedAccount) => {\n    const addressCard = getLabelByAccount(account, addressBook);\n    const addressLabel = addressCard ? addressCard.label : 'Unknown Account';\n    return (\n      <Checkbox\n        key={account.uuid}\n        name={`account-${account.uuid}`}\n        checked={selected.includes(account.uuid)}\n        onChange={() => handleChange(account.uuid)}\n        label={`${truncate(account.address)} - ${addressLabel}`}\n        icon={() => (\n          <Identicon className=\"AccountDropdown-menu-identicon\" address={account.address} />\n        )}\n      />\n    );\n  });\n\nconst AccountDropdown = ({ accounts = [], selected = [], onSubmit }: AccountDropdownProps) => {\n  const { addressBook } = useContext(AddressBookContext);\n  const ref = useRef<HTMLElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const [draftSelected, setDraftSelected] = useState<string[]>([]);\n\n  useOnClickOutside(ref, () => setIsOpen(false));\n\n  // Only update our draft if the prop changed.\n  // https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\n  useEffect(() => setDraftSelected(selected), [selected, accounts]);\n\n  const allVisible = accounts.length !== 0 && accounts.length === draftSelected.length;\n\n  const label = allVisible\n    ? translateRaw('ACCOUNTS_DROPDOWN_ALL_ACCOUNTS')\n    : translateRaw('ACCOUNTS_DROPDOWN_SOME_WALLETS', {\n        $current: `${draftSelected.length}`,\n        $total: `${accounts.length}`\n      });\n\n  const toggleOpen = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const toggleAllAccounts = () => {\n    const changed = draftSelected.length < accounts.length ? accounts.map(a => a.uuid) : [];\n    setDraftSelected(changed);\n    onSubmit(changed);\n  };\n\n  const toggleSingleAccount = (uuid: string) => {\n    const changed = draftSelected.includes(uuid)\n      ? draftSelected.filter(entry => entry !== uuid)\n      : draftSelected.concat(uuid);\n    setDraftSelected(changed);\n    onSubmit(changed);\n  };\n\n  return (\n    <SDropdown ref={ref as SCref} role=\"button\" onClick={toggleOpen} isOpen={isOpen}>\n      <LabelRow>\n        <span>{label}</span>\n        <IconWrapper icon=\"navDownCaret\" />\n      </LabelRow>\n\n      {isOpen && (\n        <div onClick={e => e.stopPropagation()}>\n          <Checkbox\n            name=\"all-accounts\"\n            checked={allVisible}\n            onChange={toggleAllAccounts}\n            label={`${translateRaw('ACCOUNTS_DROPDOWN_ALL_ACCOUNTS')}`}\n          />\n          <Divider />\n          {renderAccounts(accounts, draftSelected, addressBook, toggleSingleAccount)}\n          <Divider />\n        </div>\n      )}\n    </SDropdown>\n  );\n};\n\nexport default AccountDropdown;\n","import React, { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@mycrypto/ui';\n\nimport { generateUUID } from 'v2/utils';\nimport { InputField, NetworkSelectDropdown, DashboardPanel } from 'v2/components';\nimport { translateRaw } from 'translations';\nimport { getNetworkByName, AssetContext } from 'v2/services/Store';\nimport { ExtendedAsset, NetworkId } from 'v2/types';\nimport { DEFAULT_NETWORK, DEFAULT_ASSET_DECIMAL } from 'v2/config';\nimport { isValidAddress } from 'v2/services';\n\nimport backArrowIcon from 'common/assets/images/icn-back.svg';\n\nconst ActionsWrapper = styled.div`\n  margin-top: 52px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst NetworkSelectorWrapper = styled.div`\n  margin-bottom: 15px;\n\n  label {\n    font-weight: normal;\n  }\n`;\n\nconst Icon = styled.img`\n  cursor: pointer;\n`;\n\nconst BackIcon = styled(Icon)`\n  margin-right: 16px;\n`;\n\ninterface Props {\n  setShowDetailsView(setShowDetailsView: boolean): void;\n  setShowAddToken(setShowAddToken: boolean): void;\n  scanTokens(asset?: ExtendedAsset): Promise<void>;\n}\n\nexport function AddToken(props: Props) {\n  const [symbol, setSymbol] = useState('');\n  const [address, setAddress] = useState('');\n  const [decimals, setDecimals] = useState('');\n  const [symbolError, setSymbolError] = useState('');\n  const [addressError, setAddressError] = useState('');\n  const [decimalsError, setDecimalsError] = useState('');\n  const [networkId, setNetworkId] = useState<NetworkId>(DEFAULT_NETWORK);\n\n  const { createAssetWithID } = useContext(AssetContext);\n\n  const { setShowAddToken, scanTokens, setShowDetailsView } = props;\n\n  const validateForm = () => {\n    setSymbolError('');\n    setAddressError('');\n    setDecimalsError('');\n\n    let isValid = true;\n\n    const network = getNetworkByName(networkId);\n\n    if (symbol.length === 0) {\n      setSymbolError(translateRaw('ADD_TOKEN_NO_SYMBOL'));\n      isValid = false;\n    }\n    if (!network || !isValidAddress(address, network.chainId)) {\n      setAddressError(translateRaw('ADD_TOKEN_INVALID_ADDRESS'));\n      isValid = false;\n    }\n    if (decimals.length === 0) {\n      setDecimalsError(translateRaw('ADD_TOKEN_NO_DECIMALS'));\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const handleAddTokenClick = () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    const uuid = generateUUID();\n\n    const newAsset: ExtendedAsset = {\n      name: symbol,\n      networkId,\n      ticker: symbol,\n      type: 'erc20',\n      contractAddress: address,\n      decimal: parseInt(decimals, 10),\n      uuid\n    };\n\n    createAssetWithID(newAsset, uuid);\n    scanTokens(newAsset);\n    setShowAddToken(false);\n  };\n\n  const handleCancelClick = () => {\n    setShowAddToken(false);\n  };\n\n  return (\n    <DashboardPanel\n      heading={\n        <div>\n          <BackIcon\n            src={backArrowIcon}\n            onClick={() => {\n              setShowDetailsView(false);\n              setShowAddToken(false);\n            }}\n          />\n          {translateRaw('ADD_CUSTOM_TOKEN')}\n        </div>\n      }\n      padChildren={true}\n    >\n      <NetworkSelectorWrapper>\n        <NetworkSelectDropdown network={networkId} onChange={setNetworkId} />\n      </NetworkSelectorWrapper>\n      <InputField\n        label={translateRaw('SYMBOL')}\n        placeholder={'ETH'}\n        onChange={e => setSymbol(e.target.value)}\n        value={symbol}\n        inputError={symbolError}\n      />\n      <InputField\n        label={translateRaw('ADDRESS')}\n        placeholder={translateRaw('ADD_TOKEN_ADDRESS_PLACEHOLDER')}\n        onChange={e => setAddress(e.target.value)}\n        value={address}\n        inputError={addressError}\n      />\n      <InputField\n        label={translateRaw('TOKEN_DEC')}\n        placeholder={`${DEFAULT_ASSET_DECIMAL}`}\n        onChange={e => setDecimals(e.target.value)}\n        value={decimals}\n        inputError={decimalsError}\n        type=\"number\"\n      />\n      <ActionsWrapper>\n        <Button onClick={handleCancelClick} secondary={true}>\n          {translateRaw('ACTION_2')}\n        </Button>\n        <Button onClick={handleAddTokenClick}>{translateRaw('ADD_TOKEN')}</Button>\n      </ActionsWrapper>\n    </DashboardPanel>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { translateRaw } from 'translations';\nimport { AssetWithDetails, TSymbol } from 'v2/types';\nimport { DashboardPanel, AssetIcon } from 'v2/components';\nimport { NETWORKS_CONFIG } from 'v2/config';\n\nimport socialTelegram from 'common/assets/images/social-icons/social-telegram.svg';\nimport socialTwitter from 'common/assets/images/social-icons/social-twitter.svg';\nimport socialReddit from 'common/assets/images/social-icons/social-reddit.svg';\nimport socialGithub from 'common/assets/images/social-icons/social-github.svg';\nimport socialFacebook from 'common/assets/images/social-icons/social-facebook.svg';\nimport socialSlack from 'common/assets/images/social-icons/social-slack.svg';\nimport socialCmc from 'common/assets/images/social-icons/social-cmc.svg';\nimport websiteIcon from 'common/assets/images/icn-website.svg';\nimport whitepaperIcon from 'common/assets/images/icn-whitepaper.svg';\nimport backArrowIcon from 'common/assets/images/icn-back.svg';\nimport expandIcon from 'common/assets/images/icn-expand.svg';\nimport { weiToFloat } from 'v2/utils';\n\nconst etherscanUrl = ' https://etherscan.io';\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 160px;\n`;\n\nconst InfoTitle = styled.div`\n  font-size: 13px;\n  font-weight: 900;\n  color: #000;\n  text-transform: uppercase;\n`;\n\nconst InfoValue = styled.div`\n  font-size: 18px;\n  font-weight: normal;\n  word-break: break-all;\n`;\n\ninterface SectionProps {\n  noMargin?: boolean;\n}\n\nconst Section = styled.div<SectionProps>`\n  margin-top: ${props => (props.noMargin ? 0 : '23px')};\n`;\n\nconst TwoColumnsWrapper = styled.div`\n  display: flex;\n`;\n\nconst Icon = styled.img`\n  width: 24px;\n  height: auto;\n  cursor: pointer;\n`;\n\nconst SocialIcon = styled(Icon)`\n  margin-right: 21px;\n`;\n\nconst Resources = styled.div`\n  display: flex;\n`;\n\nconst ResourceItem = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 21px;\n  cursor: pointer;\n  color: #000;\n`;\n\nconst ResourceIcon = styled(Icon)`\n  margin-right: 10px;\n`;\n\nconst BackIcon = styled(Icon)`\n  margin-right: 16px;\n`;\n\nconst TokenIcon = styled.div`\n  margin-right: 8px;\n  display: flex;\n`;\n\nconst DetailsHeadingWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\ninterface InfoPieceProps {\n  title: string;\n  value: string | number | JSX.Element | undefined;\n}\n\nfunction InfoPiece(props: InfoPieceProps) {\n  const { title, value } = props;\n  return (\n    <InfoWrapper>\n      <InfoTitle>{title}</InfoTitle>\n      <InfoValue>{value}</InfoValue>\n    </InfoWrapper>\n  );\n}\n\ninterface ISocialNetwork {\n  [index: string]: { name: string; icon: string };\n}\n\nconst supportedSocialNetworks: ISocialNetwork = {\n  telegram: {\n    name: 'telegram',\n    icon: socialTelegram\n  },\n  twitter: {\n    name: 'twitter',\n    icon: socialTwitter\n  },\n  reddit: {\n    name: 'reddit',\n    icon: socialReddit\n  },\n  github: {\n    name: 'github',\n    icon: socialGithub\n  },\n  facebook: {\n    name: 'facebook',\n    icon: socialFacebook\n  },\n  slack: {\n    name: 'slack',\n    icon: socialSlack\n  },\n  cmc: {\n    name: 'coin market cap',\n    icon: socialCmc\n  }\n};\n\ninterface Props {\n  currentToken: AssetWithDetails;\n  setShowDetailsView(setShowDetailsView: boolean): void;\n}\n\nexport function TokenDetails(props: Props) {\n  const { currentToken, setShowDetailsView } = props;\n  const { details } = currentToken;\n  const tokenContract = Object.values(NETWORKS_CONFIG).find(x => x.id === currentToken.networkId);\n  const contractUrl = `${\n    tokenContract && tokenContract.blockExplorer ? tokenContract.blockExplorer.origin : etherscanUrl\n  }/token/${currentToken.contractAddress}`;\n\n  interface ISocial {\n    [index: string]: string;\n  }\n\n  // Find available supported social links\n  const filteredSocial = (details.social || {}) as ISocial;\n  Object.keys(filteredSocial).forEach(\n    key =>\n      (!filteredSocial[key] || !supportedSocialNetworks.hasOwnProperty(key)) &&\n      delete filteredSocial[key]\n  );\n  const filteredSocialArray = Object.keys(filteredSocial);\n\n  return (\n    <DashboardPanel\n      heading={\n        <DetailsHeadingWrapper>\n          <BackIcon src={backArrowIcon} onClick={() => setShowDetailsView(false)} />\n          <TokenIcon>\n            <AssetIcon symbol={currentToken.ticker as TSymbol} size={'26px'} />\n          </TokenIcon>\n          {currentToken.name}\n        </DetailsHeadingWrapper>\n      }\n      headingRight={\n        <a href={contractUrl} target=\"_blank\" rel=\"noreferrer\">\n          <Icon src={expandIcon} />\n        </a>\n      }\n      padChildren={true}\n    >\n      <Section noMargin={true}>\n        <TwoColumnsWrapper>\n          {/*TODO: Look up selected fiat currency instead of hardcoded $*/}\n          <InfoPiece title={translateRaw('LATEST_PRICE')} value={'$' + currentToken.rate} />{' '}\n          <InfoPiece\n            title={translateRaw('BALANCE')}\n            value={`${weiToFloat(currentToken.balance, currentToken.decimal).toFixed(6)} ${\n              currentToken.ticker\n            }`}\n          />\n        </TwoColumnsWrapper>\n      </Section>\n      <Section>\n        <InfoPiece title={translateRaw('TOKEN_ADDRESS')} value={currentToken.contractAddress} />\n      </Section>\n      <Section>\n        <InfoPiece title={translateRaw('TOKEN_DECIMALS')} value={currentToken.decimal} />\n      </Section>\n      <Section>\n        <InfoPiece title={translateRaw('TOKEN_SYMBOL')} value={currentToken.ticker} />\n      </Section>\n      {(details.website || details.whitepaper) && (\n        <Section>\n          <InfoPiece\n            title={translateRaw('RESOURCES')}\n            value={\n              <Resources>\n                {details.website && (\n                  <a href={details.website} target=\"_blank\" rel=\"noreferrer\">\n                    <ResourceItem>\n                      <ResourceIcon src={websiteIcon} />\n                      {translateRaw('WEBSITE')}\n                    </ResourceItem>\n                  </a>\n                )}\n                {details.whitepaper && (\n                  <a href={details.whitepaper} target=\"_blank\" rel=\"noreferrer\">\n                    <ResourceItem>\n                      <ResourceIcon src={whitepaperIcon} />\n                      {translateRaw('WHITEPAPER')}\n                    </ResourceItem>\n                  </a>\n                )}\n              </Resources>\n            }\n          />\n        </Section>\n      )}\n      {Object.keys(filteredSocial).length > 0 && (\n        <Section>\n          <InfoPiece\n            title={translateRaw('SOCIAL')}\n            value={\n              <>\n                {filteredSocialArray.map(social => {\n                  return (\n                    <a key={social} href={details.social[social]} target=\"_blank\" rel=\"noreferrer\">\n                      <SocialIcon\n                        alt={supportedSocialNetworks[social].name}\n                        src={supportedSocialNetworks[social].icon}\n                      />\n                    </a>\n                  );\n                })}\n              </>\n            }\n          />\n        </Section>\n      )}\n    </DashboardPanel>\n  );\n}\n","import React from 'react';\nimport { Typography, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { convertToFiatFromAsset } from 'v2/utils';\nimport { AssetWithDetails, TSymbol } from 'v2/types';\nimport { AssetIcon, DashboardPanel, Spinner } from 'v2/components';\nimport { translateRaw } from 'translations';\n\nimport moreIcon from 'common/assets/images/icn-more.svg';\n\nconst TokenListWrapper = styled.div`\n  max-height: 313px;\n  overflow-y: auto;\n`;\n\nconst Token = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 15px 0;\n  margin-right: 8px;\n`;\n\nconst Asset = styled.div`\n  display: flex;\n  align-items: center;\n  width: 65%;\n`;\n\nconst AssetName = styled(Typography)`\n  margin: 0 0 0 15px !important;\n  font-weight: normal;\n  font-size: 14px;\n`;\n\nconst TokenValueWrapper = styled.div`\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst TokenValue = styled(Typography)`\n  margin: 0 15px 0 0 !important;\n  font-weight: normal;\n  font-size: 16px;\n`;\n\nconst MoreIcon = styled.img`\n  cursor: pointer;\n`;\n\nconst StyledButton = styled(Button)`\n  padding: 9px 16px;\n  font-size: 18px;\n  margin-left: 8px;\n`;\n\nconst SpinnerWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 32px 0;\n`;\n\ninterface TokenListProps {\n  isScanning: boolean;\n  tokens: AssetWithDetails[];\n  setShowDetailsView(show: boolean): void;\n  setShowAddToken(setShowAddToken: boolean): void;\n  setCurrentToken(token: AssetWithDetails): void;\n  handleScanTokens(): Promise<void>;\n}\n\nexport function TokenList(props: TokenListProps) {\n  const {\n    setShowDetailsView,\n    setCurrentToken,\n    tokens,\n    isScanning,\n    setShowAddToken,\n    handleScanTokens\n  } = props;\n  return (\n    <DashboardPanel\n      heading={translateRaw('TOKENS')}\n      headingRight={\n        <div>\n          <StyledButton onClick={() => handleScanTokens()}>\n            {translateRaw('SCAN_TOKENS_SHORT')}\n          </StyledButton>\n          <StyledButton onClick={() => setShowAddToken(true)}>\n            + {translateRaw('ADD_TOKEN_SHORT')}\n          </StyledButton>\n        </div>\n      }\n      padChildren={true}\n    >\n      {isScanning ? (\n        <SpinnerWrapper>\n          <Spinner size=\"x3\" />\n        </SpinnerWrapper>\n      ) : (\n        <TokenListWrapper>\n          {tokens.map(token => (\n            <Token key={token.name}>\n              <Asset>\n                <AssetIcon symbol={token.ticker as TSymbol} size={'26px'} />\n                <AssetName>{token.name}</AssetName>\n              </Asset>\n              <TokenValueWrapper>\n                <TokenValue>${convertToFiatFromAsset(token, token.rate).toFixed(2)}</TokenValue>\n                <MoreIcon\n                  src={moreIcon}\n                  alt=\"More\"\n                  onClick={() => {\n                    setShowDetailsView(true);\n                    setCurrentToken(token);\n                  }}\n                />\n              </TokenValueWrapper>\n            </Token>\n          ))}\n        </TokenListWrapper>\n      )}\n    </DashboardPanel>\n  );\n}\n","import React, { useContext } from 'react';\nimport { List, Address, Button } from '@mycrypto/ui';\nimport styled from 'styled-components';\n\nimport { AddressBook, ExtendedAccount } from 'v2/types';\nimport { truncate } from 'v2/utils';\nimport { getLabelByAccount, AddressBookContext } from 'v2/services/Store';\n\nconst AccountContainer = styled.div`\n  display: flex;\n  font-size: 18px;\n`;\n\nconst DeleteButton = styled(Button)`\n  align-self: flex-start;\n  margin-left: 1em;\n`;\n\nexport interface AccountListProps {\n  accounts: ExtendedAccount[];\n  deleteAccount(uuid: string): void;\n}\n\nconst ToolsAccountList: React.FC<AccountListProps> = props => {\n  const { addressBook } = useContext(AddressBookContext);\n  const { accounts, deleteAccount } = props;\n  const list = accounts.map((account: ExtendedAccount, index: number) => {\n    const detectedLabel: AddressBook | undefined = getLabelByAccount(account, addressBook);\n    const label = detectedLabel ? detectedLabel.label : 'Unknown Account';\n    return (\n      <AccountContainer key={index}>\n        <Address title={label} address={account.address} truncate={truncate} />\n        <DeleteButton onClick={() => deleteAccount(account.uuid)} icon=\"exit\" />\n      </AccountContainer>\n    );\n  });\n\n  return <List group={true}>{list}</List>;\n};\n\nexport default ToolsAccountList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { NotificationsContext, NotificationTemplates } from 'v2/features/NotificationsPanel';\n\nconst ToolWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 14px;\n  width: 100%;\n  backround: white;\n  padding: 8px;\n  border: 1px solid silver;\n`;\n\nconst ToolsNotifications = () => {\n  return (\n    <NotificationsContext.Consumer>\n      {({ displayNotification }) => (\n        <ToolWrapper>\n          <p>\n            <b>Dashboard notifications</b>\n          </p>\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.walletCreated, {\n                address: 'N3WAddre3ssCreated'\n              });\n            }}\n          >\n            New Wallet Created\n          </button>{' '}\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.walletAdded, {\n                address: 'N3WAddr3ssAdd3d'\n              });\n            }}\n          >\n            New Wallet Added\n          </button>{' '}\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.saveSettings);\n            }}\n          >\n            Save Settings\n          </button>{' '}\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.printPaperWallet, {\n                address: 'N3WAddre3ssCreatedPap3r',\n                privateKey: 'Privat3K3y'\n              });\n            }}\n          >\n            Print Paper Wallet\n          </button>{' '}\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.getHardwareWallet);\n            }}\n          >\n            Get Hardware Wallet\n          </button>\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.onboardingPleaseUnderstand, {\n                previousNotificationClosedDate: new Date()\n              });\n            }}\n          >\n            Onboarding Please Understand\n          </button>\n          <button\n            onClick={() => {\n              displayNotification(NotificationTemplates.onboardingResponsible, {\n                firstDashboardVisitDate: new Date()\n              });\n            }}\n          >\n            Onboarding Responsible\n          </button>\n        </ToolWrapper>\n      )}\n    </NotificationsContext.Consumer>\n  );\n};\n\nexport default ToolsNotifications;\n","import React, { DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react';\nimport styled, { StyledComponentClass, css } from 'styled-components';\nimport { Theme, scale } from '@mycrypto/ui';\n\nimport Typography from './Typography';\n\ntype StackedCardEntry = string | ReactNode;\n\nexport interface StackedCardData {\n  heading: ReactNode;\n  entries: StackedCardEntry[][];\n  icons?: ReactNode[];\n}\n\ntype Props = StackedCardData;\n\nconst StackedCardContainer = styled.section`\n  padding: 0.9375em;\n  border-bottom: 0.0625em solid #dde3ee;\n`;\n\nconst StackedCardHead = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StackedCardHeading = styled(Typography)`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  font-weight: bold;\n  line-height: 1.31;\n  font-size: ${scale(1)};\n`;\n\nStackedCardHeading.defaultProps = {\n  as: 'header'\n};\n\n// Arbitrary positioning of icons to respect AddressBook and AccountList designs\nconst StackedCardIcons = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  > * {\n    width: 15px;\n  }\n  ${props =>\n    props.qty &&\n    css`\n      width: calc(15px * ${props.qty || 1});\n    `}\n  ${(props: { qty: number }) =>\n    props.qty === 2 &&\n    css`\n      > *:first-child {\n        margin-bottom: -2px;\n      }\n      > *:last-child {\n        margin-left: 8px;\n      }\n    `}\n`;\n\n// Arbitrary left margin to allow AccountList rows to align to\n// the Identicon + label display.\n// @TODO: remove arbitrary style.\nconst StackedCardBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 1.5625em;\n  margin-left: calc(14px + 2em);\n`;\n\nconst StackedCardEntry = styled.dl`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\ntype StyledHTMLElement = StyledComponentClass<\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\n  Theme\n>;\n\nconst StackedCardLabel = styled(Typography)`\n  flex: 0.7;\n  margin: 0;\n  color: ${props => props.theme.cardText};\n  letter-spacing: 0.106875em;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 0.856em;\n  line-height: 1em;\n` as StyledHTMLElement;\n\nStackedCardLabel.defaultProps = {\n  as: 'dt'\n};\n\nconst StackedCardValue = styled(Typography)`\n  flex: 1;\n  margin: 0;\n` as StyledHTMLElement;\n\nStackedCardValue.defaultProps = {\n  as: 'dd'\n};\n\nexport const StackedCard = ({ heading, icons = [], entries, ...rest }: Props) => {\n  return (\n    <StackedCardContainer {...rest}>\n      <StackedCardHead>\n        <StackedCardHeading>{heading}</StackedCardHeading>\n        <StackedCardIcons qty={icons.length}>{icons}</StackedCardIcons>\n      </StackedCardHead>\n      <StackedCardBody>\n        {entries.map(([label, value], index) => (\n          <StackedCardEntry key={index}>\n            <StackedCardLabel>{label}</StackedCardLabel>\n            <StackedCardValue>{value}</StackedCardValue>\n          </StackedCardEntry>\n        ))}\n      </StackedCardBody>\n    </StackedCardContainer>\n  );\n};\n\nexport default StackedCard;\n","import styled from 'styled-components';\nimport { Icon } from '@mycrypto/ui';\n\nconst IconCaret = styled(Icon)`\n  margin: 0;\n  margin-left: 20px;\n  margin-bottom: -1em;\n  font-size: 0.75em;\n`;\n\nexport default IconCaret;\n","/*\n  Imported and modified from @mycrypto/ui to style headers\n  In order to style the headers particularyly the Icon caret\n*/\n\nimport React, {\n  ClassAttributes,\n  Component,\n  DetailedHTMLProps,\n  ReactNode,\n  TdHTMLAttributes,\n  ThHTMLAttributes\n} from 'react';\nimport styled, { StyledComponentClass } from 'styled-components';\nimport { Theme } from '@mycrypto/ui';\n\nimport { default as Typography } from './Typography';\nimport { default as IconCaret } from './IconCaret';\n\nexport interface TableGroup {\n  title: string;\n  entries: ReactNode[][];\n  offset?: number;\n}\n\nexport interface TableConfig {\n  sortableColumn?: string | null;\n  hiddenHeadings?: (string | JSX.Element)[]; //Hack to allow a head to include JSX.Elements\n  reversedColumns?: string[];\n  sortFunction?(a: any, b: any): number;\n}\n\nexport interface TableContent {\n  body: ReactNode[][];\n  groups?: TableGroup[];\n}\n\nexport interface TableData extends TableContent {\n  head: (string | JSX.Element)[];\n  config?: TableConfig;\n}\n\nexport enum ColumnDirections {\n  Forward,\n  Reverse\n}\n\ntype Props = TableData;\n\ninterface State {\n  collapsedGroups: {\n    [title: string]: boolean;\n  };\n  sortedColumnDirection: ColumnDirections;\n}\n\ninterface CellProps {\n  isReversed?: boolean;\n}\n\nconst sharedCellProperties = ({ isReversed }: CellProps) => `\n  min-width: 1em;\n  padding: 1em;\n  text-align: ${isReversed ? 'right' : 'left'};\n`;\n\nconst TableHead = styled.tr`\n  border-top: 0.0625em solid ${props => props.theme.tableHeadBorder};\n  border-bottom: 0.0625em solid ${props => props.theme.tableHeadBorder};\n  background: ${props => props.theme.tableHeadBackground};\n  font-size: 0.9em;\n`;\n\ninterface HeadingProps extends CellProps {\n  isSortable?: boolean;\n  isHidden?: boolean;\n}\n\nconst TableHeading = styled(Typography)<HeadingProps>`\n  ${sharedCellProperties}\n  color: ${props => props.theme.headline};\n  font-weight: normal;\n  text-transform: uppercase;\n  letter-spacing: 0.0625em;\n  cursor: ${props => (props.isSortable ? 'pointer' : 'inherit')}\n    ${props =>\n      props.isHidden &&\n      `\n    position: fixed;\n    top: -9999em;\n    left: -9999em;\n  `};\n` as StyledComponentClass<\n  ClassAttributes<HTMLTableHeaderCellElement> &\n    ThHTMLAttributes<HTMLTableHeaderCellElement> &\n    HeadingProps,\n  Theme\n>;\n\nTableHeading.defaultProps = {\n  as: 'th'\n};\n\nconst TableRow = styled.tr`\n  border-bottom: 0.0625em solid ${props => props.theme.tableRowBorder};\n`;\n\nconst TableGroupHead = styled(TableRow)`\n  text-transform: uppercase;\n  cursor: pointer;\n`;\n\nconst TableCaret = styled(IconCaret)<{ isFlipped?: boolean }>`\n  margin-left: 0.5em;\n  ${props =>\n    props.isFlipped &&\n    `\n    svg {\n      transform: rotateX(180deg);\n    }\n  `};\n`;\n\nconst TableCell = styled(Typography)`\n  ${sharedCellProperties};\n` as StyledComponentClass<\n  DetailedHTMLProps<\n    TdHTMLAttributes<HTMLTableDataCellElement> & CellProps,\n    HTMLTableDataCellElement\n  >,\n  Theme\n>;\n\nTableCell.defaultProps = {\n  as: 'td'\n};\n\n// tslint:disable-next-line\nconst noop = () => {};\n\nexport const defaultColumnSort = (a: any, b: any): number => {\n  try {\n    const aText = a.props.children;\n    const bText = b.props.children;\n\n    return aText.localeCompare(bText);\n  } catch (error) {\n    throw new Error(`The default column sort of <Table /> expects either a string or a single-nested React element for cell contents.\n    For anything else, provide a custom sortFunction in the config.`);\n  }\n};\n\nexport const getSortedRows = (\n  head: any[],\n  body: ReactNode[][],\n  config: TableConfig,\n  sortedColumnDirection: ColumnDirections\n): ReactNode[][] => {\n  const { sortableColumn, sortFunction = defaultColumnSort } = config;\n  // Determine which column to order.\n  const sortableColumnIndex = head.indexOf(sortableColumn);\n  // Create an array containing the data from each row in the specified column.\n  const sortableColumnEntries = body\n    .map(row => row[sortableColumnIndex])\n    .map(entry =>\n      // If the entry is a string, wrap it.\n      typeof entry === 'string' ? <React.Fragment>{entry}</React.Fragment> : entry\n    );\n  // Rearrange that array based on the selected sort.\n  const sortedColumnEntries = [...sortableColumnEntries].sort(sortFunction);\n  // Translate the new order into the indexes of the original order to determine the change.\n  const sortedColumnIndices = sortedColumnEntries.map(sortedEntry =>\n    sortableColumnEntries.indexOf(sortedEntry)\n  );\n  // Potentially reverse the new order depending on the sort direction.\n  const finalSortedColumnIndices =\n    sortedColumnDirection === ColumnDirections.Forward\n      ? sortedColumnIndices\n      : sortedColumnIndices.reverse();\n  // Apply the new order to all of the rows.\n  const sortedRows = finalSortedColumnIndices.map(index => body[index]);\n\n  return sortedRows;\n};\n\nclass AbstractTable extends Component<Props, State> {\n  public static defaultProps = {\n    head: [],\n    body: [],\n    groups: [],\n    config: {}\n  };\n\n  public state: State = {\n    collapsedGroups: {},\n    sortedColumnDirection: ColumnDirections.Forward\n  };\n\n  public componentDidMount() {\n    this.verifyTableLayout();\n  }\n\n  public render() {\n    const { head, config, ...rest } = this.props;\n    const { collapsedGroups, sortedColumnDirection } = this.state;\n    const { body, groups } = this.getSortedLayout();\n\n    const isReversedColumn = (heading: any) =>\n      config && config.reversedColumns && config.reversedColumns.includes(heading);\n\n    return (\n      <table {...rest}>\n        <thead>\n          <TableHead>\n            {head.map((heading, index) => {\n              const isSortableColumn = config && config.sortableColumn === heading;\n              const isHiddenHeading =\n                config && config.hiddenHeadings && config.hiddenHeadings.includes(heading);\n\n              return (\n                <TableHeading\n                  key={index}\n                  onClick={isSortableColumn ? this.toggleSortedColumnDirection : noop}\n                  role={isSortableColumn ? 'button' : ''}\n                  isSortable={isSortableColumn}\n                  isHidden={isHiddenHeading}\n                  isReversed={isReversedColumn(heading)}\n                  data-testid={isSortableColumn ? 'sortable-column-heading' : ''}\n                >\n                  {heading}\n                  {isSortableColumn && (\n                    <TableCaret\n                      icon=\"navDownCaret\"\n                      isFlipped={sortedColumnDirection === ColumnDirections.Reverse}\n                    />\n                  )}\n                </TableHeading>\n              );\n            })}\n          </TableHead>\n        </thead>\n        <tbody>\n          {/* Ungrouped rows are placed on top of grouped rows. */}\n          {body.map((row, rowIndex) => (\n            <TableRow key={rowIndex}>\n              {row.map((cell, cellIndex) => (\n                <TableCell\n                  key={cellIndex}\n                  isReversed={isReversedColumn(head[cellIndex])}\n                  data-testid={`ungrouped-${rowIndex}-${cellIndex}`}\n                >\n                  {cell}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n          {groups!.map(({ title, entries, offset = 0 }) => (\n            <React.Fragment key={title}>\n              <TableGroupHead onClick={this.toggleCollapseGroup.bind(this, title)} role=\"button\">\n                {/* Enter ghost cells to facilitate the offset. */}\n                {Array.from({ length: offset }, (_, index) => (\n                  <td key={index} />\n                ))}\n                <TableHeading colSpan={head.length - offset}>\n                  {title}\n                  <TableCaret icon=\"navDownCaret\" isFlipped={collapsedGroups[title]} />\n                </TableHeading>\n              </TableGroupHead>\n              {/* Display group rows if not collapsed. */}\n              {!collapsedGroups[title] &&\n                entries.map((row, rowIndex) => (\n                  <TableRow key={rowIndex}>\n                    {row.map((cell, cellIndex) => (\n                      <TableCell key={cellIndex} isReversed={isReversedColumn(head[cellIndex])}>\n                        {cell}\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n            </React.Fragment>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  private readonly verifyTableLayout = () => {\n    const { head, body, groups, config } = this.props;\n    const columnCount = head.length;\n\n    if (columnCount === 0) {\n      throw new Error('A <Table /> must have at least one column.');\n    }\n\n    body.forEach((row, index) => {\n      if (row.length !== columnCount) {\n        throw new Error(`Unbalanced row found in <Table /> at position ${index}.`);\n      }\n    });\n\n    groups!.forEach(({ title, entries, offset }) => {\n      if (!title || title === '') {\n        throw new Error(`Untitled group in <Table /> -- all table groups must have a title.`);\n      }\n\n      entries.forEach((row, index) => {\n        if (row.length !== columnCount) {\n          throw new Error(\n            `Unbalanced row in group \"${title}\" found in <Table /> at position ${index}.`\n          );\n        }\n      });\n\n      if (offset && offset > columnCount - 1) {\n        throw new Error(`Bad offset in group \"${title}\" found in <Table />.`);\n      }\n    });\n\n    const { sortableColumn, hiddenHeadings } = config!;\n\n    if (sortableColumn) {\n      const sortedColumnExists = head.includes(sortableColumn);\n\n      if (!sortedColumnExists) {\n        throw new Error(`Nonexistent sortable column provided to <Table />.`);\n      }\n    }\n\n    if (hiddenHeadings) {\n      hiddenHeadings.forEach(heading => {\n        if (!head.includes(heading)) {\n          throw new Error(`Unused heading ${heading} found in hiddenHeadings in <Table />`);\n        }\n      });\n    }\n  };\n\n  private readonly toggleCollapseGroup = (title: string) =>\n    this.setState(prevState => ({\n      collapsedGroups: {\n        ...prevState.collapsedGroups,\n        [title]: !prevState.collapsedGroups[title]\n      }\n    }));\n\n  private readonly toggleSortedColumnDirection = () =>\n    this.setState(prevState => ({\n      sortedColumnDirection:\n        prevState.sortedColumnDirection === ColumnDirections.Forward\n          ? ColumnDirections.Reverse\n          : ColumnDirections.Forward\n    }));\n\n  private readonly getSortedLayout = (): TableContent => {\n    const { head, body, groups, config } = this.props;\n    const { sortedColumnDirection } = this.state;\n\n    return config && config.sortableColumn\n      ? {\n          body: getSortedRows(head, body, config, sortedColumnDirection),\n          groups: groups!.map(group => ({\n            ...group,\n            entries: getSortedRows(head, group.entries, config, sortedColumnDirection)\n          }))\n        }\n      : { body, groups };\n  };\n}\n\nexport const Table = styled(AbstractTable)`\n  width: 100%;\n  border-collapse: collapse;\n  border-spacing: 0;\n`;\n\nexport default Table;\n","module.exports = __webpack_public_path__ + \"common/assets/images/icn-sent.svg?aab842\";","import React from 'react';\nimport styled from 'styled-components';\nimport { Copyable } from '@mycrypto/ui';\n\nimport { Asset } from 'v2/types';\n\ninterface Props {\n  asset: Asset;\n}\n\nconst IntermediaryDisplay = styled('div')`\n  display: flex;\n  border: 1px solid #55b6e2;\n  box-sizing: border-box;\n  box-shadow: inset 0px 1px 1px rgba(63, 63, 68, 0.05);\n  border-radius: 2px;\n`;\n\nconst IntermediaryDisplayBox = styled('div')`\n  font-size: 16px;\n  line-height: 21px;\n  padding-bottom: 12px;\n  padding-top: 12px;\n  padding-left: 15px;\n  padding-right: 12px;\n`;\n\nconst IntermediaryDisplayLabel = styled('div')`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  color: #55b6e2;\n`;\n\nconst IntermediaryDisplayContract = styled(Copyable)`\n  font-size: 16px;\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  color: #282d32;\n`;\n\nconst truncate = (children: string) => {\n  return children; //[children.substring(0, 8), '…', children.substring(children.length - 6)].join('');\n};\n\nfunction TransactionIntermediaryDisplay({ asset }: Props) {\n  return (\n    <>\n      {asset.contractAddress && (\n        <div className=\"ConfirmTransaction-row-column\">\n          <IntermediaryDisplay>\n            <IntermediaryDisplayBox>\n              <IntermediaryDisplayLabel>{`Transaction performed via ${asset.ticker} contract:`}</IntermediaryDisplayLabel>\n              <IntermediaryDisplayContract text={asset.contractAddress} truncate={truncate} />\n            </IntermediaryDisplayBox>\n          </IntermediaryDisplay>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default TransactionIntermediaryDisplay;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { WalletId } from 'v2/types';\nimport { BREAK_POINTS, COLORS } from 'v2/theme';\n\nconst { SCREEN_SM } = BREAK_POINTS;\nconst { WHITE } = COLORS;\n\ninterface OwnProps {\n  name: string;\n  description?: string;\n  example?: string;\n  walletType?: WalletId;\n  isSecure?: boolean;\n  isDisabled?: boolean;\n  disableReason?: string;\n  onClick(walletType: any): void;\n}\n\ninterface StateProps {\n  isFormatDisabled?: boolean;\n}\n\ninterface Icon {\n  icon?: string;\n  tooltip?: string;\n  href?: string;\n  arialabel?: string;\n}\n\ntype Props = OwnProps & StateProps & Icon;\n\nconst WalletButtonWrapper = styled.div`\n  @keyframes wallet-button-enter {\n    0% {\n      opacity: 0;\n      transform: translateY(6px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0px);\n    }\n  }\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px;\n  height: 200px;\n  width: 200px;\n  padding: 25px 15px;\n  background-color: ${WHITE};\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.07);\n  border-radius: 6px;\n  text-align: center;\n  cursor: pointer;\n  transition: transform 150ms ease, box-shadow 150ms ease;\n  animation: wallet-button-enter 400ms ease 1;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @media only screen and (max-width: ${SCREEN_SM}) {\n    height: 150px;\n    width: 150px;\n  }\n`;\n\nconst WalletLabel = styled.div`\n  transition: color 150ms ease;\n  font-size: 18px;\n  padding-top: 19px;\n`;\n\nconst WalletIcon = styled.img`\n  max-height: 75px;\n  opacity: 0.8;\n\n  @media screen and (max-width: ${SCREEN_SM}) {\n    max-height: 60px;\n  }\n`;\n\nexport class WalletButton extends React.PureComponent<Props> {\n  public render() {\n    const { name, icon } = this.props;\n\n    return (\n      <WalletButtonWrapper onClick={this.handleClick}>\n        {icon && <WalletIcon src={icon} alt={name + ' logo'} />}\n        <WalletLabel>{name}</WalletLabel>\n      </WalletButtonWrapper>\n    );\n  }\n\n  private handleClick = () => {\n    this.props.onClick(this.props.walletType);\n  };\n}\n","import React from 'react';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport styled from 'styled-components';\nimport { Identicon } from '@mycrypto/ui';\n\nimport { QRCode } from 'v2/components';\nimport { KNOWLEDGE_BASE_URL } from 'v2/config';\n\nimport walletIcon from 'common/assets/images/icn-hardware-wallet.svg';\nimport myCryptoIcon from 'common/assets/images/logo-mycrypto-transparent.png';\n\ninterface PaperWalletWrapperProps {\n  isHidden?: boolean;\n}\n\n// size of paper wallet is 2 times of design size\nconst paperWalletWidth: number = 1458;\nconst paperWalletHeight: number = 612;\n\nconst PaperWalletWrapper = styled.div<PaperWalletWrapperProps>`\n  ${props => props.isHidden && `position: fixed; top: -${paperWalletHeight}px;`}\n  width: ${paperWalletWidth}px;\n  height: ${paperWalletHeight}px;\n  color: black;\n`;\n\ninterface PartProps {\n  hasRightBorder?: boolean;\n  hasLeftBorder?: boolean;\n  hasTopBorder?: boolean;\n}\n\nconst borderStyle = '6px dashed rgba(227, 237, 255, 0.3);';\nconst Part = styled.div<PartProps>`\n  width: 486px;\n  height: 304px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  ${props => props.hasRightBorder && `border-right: ${borderStyle}`}\n  ${props => props.hasLeftBorder && `border-left: ${borderStyle}`}\n  ${props => props.hasTopBorder && `border-top: ${borderStyle}`}\n`;\n\ninterface PartWrapperProps {\n  rotateChildren?: boolean;\n}\nconst PartWrapper = styled.div<PartWrapperProps>`\n  display: flex;\n  ${Part} {\n    ${props => props.rotateChildren && 'transform: rotate(180deg);'}\n  }\n`;\n\nconst WalletImage = styled.img`\n  width: 120px;\n  height: 120px;\n`;\n\nconst Resources = styled.p`\n  text-align: center;\n  font-size: 28px;\n  font-weight: normal;\n`;\n\nconst MyCryptoImage = styled.img`\n  width: 360px;\n  height: auto;\n`;\n\nconst LogoText = styled.p`\n  text-align: right;\n  font-size: 30px;\n  font-weight: normal;\n  margin-top: -14px;\n`;\n\nconst Notes = styled.p`\n  text-align: left;\n  font-size: 26px;\n  font-weight: normal;\n  margin: 0;\n`;\n\nconst InnerPartWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 30px;\n`;\n\nconst HorizontalLine = styled.hr`\n  border: 1px solid #b5bfc7;\n  width: 100%;\n  margin: 0 0 30px 0;\n`;\n\nconst IdenticonHeader = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n\nconst IdenticonIcon = styled(Identicon)`\n  margin-right: 20px;\n\n  img {\n    width: 68px;\n    height: 68px;\n    max-width: none;\n  }\n`;\n\nconst TextHeader = styled.div`\n  font-size: 26px;\n  font-weight: normal;\n  line-height: 26px;\n`;\n\ninterface TextSubHeaderProps {\n  noTopMargin?: boolean;\n}\nconst TextSubHeader = styled.p<TextSubHeaderProps>`\n  font-size: 14px;\n  font-weight: normal;\n  margin: ${props => (props.noTopMargin ? '0' : '14px')} 0 0 0;\n`;\n\ninterface QRAddressWrapperProps {\n  isInversed: boolean;\n}\nconst QRAddressWrapper = styled.div<QRAddressWrapperProps>`\n  width: 244px;\n  height: 426px;\n  border: 6px solid ${props => (props.isInversed ? '#ef4747' : '#a7e07b')};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  transform: rotate(${props => props.isInversed && '-'}90deg) translate\n    ${props => (props.isInversed ? 'X' : 'Y')} (-100%);\n  transform-origin: 0 0;\n`;\n\nconst QRCodeWrapper = styled.div`\n  width: 200px;\n  height: 200px;\n`;\n\nconst QRCodeTitle = styled.div`\n  font-size: 36px;\n  text-align: center;\n  font-weight: bold;\n`;\n\nconst QRCodeSubTitle = styled.div`\n  min-height: 50px;\n  font-size: 14px;\n  text-align: center;\n  font-weight: normal;\n`;\n\nconst Path = styled.div`\n  min-height: 30px;\n  font-size: 14px;\n  text-align: center;\n  font-weight: normal;\n  margin-top: 6px;\n`;\n\nconst Address = styled.div`\n  font-size: 18px;\n  text-align: center;\n  font-weight: normal;\n  margin: 0px 32px 20px 32px;\n  line-height: 24px;\n  word-break: break-all;\n`;\n\ninterface MnemonicProps {\n  breakWords?: boolean;\n}\nconst Mnemonic = styled.div<MnemonicProps>`\n  font-size: 14px;\n  text-align: center;\n  font-weight: normal;\n  margin: 0px 16px 10px 16px;\n  line-height: 17px;\n  ${props => props.breakWords && 'word-break: break-all;'}\n`;\n\ninterface Props {\n  address: string;\n  privateKey?: string;\n  mnemonic?: string;\n  path?: string;\n  isHidden?: boolean;\n}\n\nexport default class PaperWallet extends React.Component<Props, {}> {\n  private container: HTMLElement | null;\n\n  public render() {\n    const { isHidden, address } = this.props;\n\n    return (\n      <PaperWalletWrapper isHidden={isHidden} ref={(el: any) => (this.container = el)}>\n        <PartWrapper rotateChildren={true}>\n          <Part hasLeftBorder={true}>\n            <InnerPartWrapper>\n              <IdenticonHeader>\n                <IdenticonIcon address={address} />\n                <TextHeader>\n                  Your Identicon\n                  <TextSubHeader noTopMargin={true}>\n                    Look for this icon when sending funds to this wallet.\n                  </TextSubHeader>\n                </TextHeader>\n              </IdenticonHeader>\n              <TextSubHeader>\n                To deposit funds to this wallet, send ETH or tokens to the public address.\n              </TextSubHeader>\n              <TextSubHeader>\n                To check the balance of this wallet, go to www.mycrypto.com or the MyCrypto Desktop\n                app and unlock your wallet.\n              </TextSubHeader>\n              <TextSubHeader>\n                DO NOT SHARE YOUR PRIVATE KEY with anyone. You are responsible for keeping your\n                funds safe. MyCrypto cannot recover your funds for you.\n              </TextSubHeader>\n            </InnerPartWrapper>\n          </Part>\n          <Part hasLeftBorder={true}>\n            <InnerPartWrapper>\n              <Notes>Notes:</Notes>\n              {[...Array(7)].map((x: any, index: any) => (\n                <HorizontalLine key={`${index}${x}`} />\n              ))}\n            </InnerPartWrapper>\n          </Part>\n          <Part>{this.getQRAddressWrapper(true)}</Part>\n        </PartWrapper>\n        <PartWrapper>\n          <Part hasRightBorder={true} hasTopBorder={true}>\n            <div>\n              <MyCryptoImage src={myCryptoIcon} />\n              <LogoText>Paper Wallet</LogoText>\n            </div>\n          </Part>\n          <Part hasRightBorder={true} hasTopBorder={true}>\n            <WalletImage src={walletIcon} />\n            <Resources>For Resources and Help, Visit: {KNOWLEDGE_BASE_URL}</Resources>\n          </Part>\n          <Part hasTopBorder={true}>{this.getQRAddressWrapper(false)}</Part>\n        </PartWrapper>\n      </PaperWalletWrapper>\n    );\n  }\n\n  public toPNG = async (scale: number = 1) => {\n    if (!this.container) {\n      return '';\n    }\n    const canvas = await html2canvas(this.container, { scale });\n    return canvas.toDataURL('image/png');\n  };\n\n  public toPDF = async () => {\n    const { address } = this.props;\n    const png = await this.toPNG(3);\n    const pdf = new jsPDF('l', 'px');\n    const pdfWidth = pdf.internal.pageSize.getWidth();\n    const pdfHeight = pdf.internal.pageSize.getHeight();\n\n    // ratio setting size of paper wallet in PDF\n    const pdfImageSizeRation = 2.6;\n    const printedWidth = paperWalletWidth / pdfImageSizeRation;\n    const printedHeight = paperWalletHeight / pdfImageSizeRation;\n\n    pdf.addImage(\n      png,\n      'PNG',\n      (pdfWidth - printedWidth) / 2,\n      (pdfHeight - printedHeight) / 2,\n      printedWidth,\n      printedHeight,\n      undefined,\n      'FAST'\n    );\n\n    pdf.save(`paper-wallet-${address.substr(0, 8)}`);\n\n    //return pdf.output('datauristring');\n  };\n\n  private getQRAddressWrapper = (isPrivate: boolean) => {\n    const { mnemonic, privateKey, path, address } = this.props;\n    let dataText: string = '';\n    let data: string = '';\n    if (isPrivate) {\n      if (mnemonic) {\n        data = mnemonic;\n        dataText = 'Your Mnemonic Phrase';\n      }\n      if (privateKey) {\n        data = privateKey;\n        dataText = 'Your Private Key';\n      }\n    } else {\n      data = address;\n    }\n    const subTitle = isPrivate\n      ? 'Keep this safe. Do not share.'\n      : 'Share this with your friends when they need to send you crypto!';\n\n    return (\n      <InnerPartWrapper>\n        <QRAddressWrapper isInversed={isPrivate}>\n          <QRCodeTitle>{isPrivate ? 'PRIVATE' : 'PUBLIC'}</QRCodeTitle>\n          <QRCodeSubTitle>{subTitle}</QRCodeSubTitle>\n          <QRCodeWrapper>\n            <QRCode data={data} />\n          </QRCodeWrapper>\n          <Path>{isPrivate && path && `Derived Path: ${path}`}</Path>\n          {isPrivate ? (\n            <Mnemonic breakWords={!!privateKey}>\n              <b>{dataText}:</b>\n              <br />\n              {data}\n            </Mnemonic>\n          ) : (\n            <Address>{data}</Address>\n          )}\n        </QRAddressWrapper>\n      </InnerPartWrapper>\n    );\n  };\n}\n"],"mappings":"AACA;;;ACeA;AACA;AAkBA;;;;;;AClBA;;AAEA;;AAIA;;;;AAeA;AACA;AACA;AACA;AACA;AAKA;AAGA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;AAIA;;;AAKA;;;;;;AAMA;;;;;;;AASA;;;;AAIA;;;AAgBA;;;ACpEA;;;;;;;;;;;ACvBA;;;;AAMA;;;;AAMA;;;;AAMA;;;;;AAOA;;;;;;;;;;;;AAoBA;;;AC1DA;;;ACJA;;ACIA;;;AAKA;;AAIA;;;;;AAOA;;;;;AAOA;;;;;;;AASA;;;AAeA;;;;;;AC7BA;;;AAKA;;;;;;AAMA;;;AAKA;;;;;AAOA;;;;AAQA;;;;AAUA;;;;;;;AAOA;AAQA;;;;;;AAMA;;;AAKA;;;;;;;;;AASA;;;AAKA;;;;AAMA;;;AAKA;;;;;;AAQA;;;;;;;;;;AAYA;;AAIA;;;AAKA;;AAIA;;AAEA;;AAEA;AAGA;;;AAKA;;;AAKA;;;;;AAOA;;AAIA;;;;;;;;ACnJA;;;AAKA;;;;;;;;AAUA;;;;;AAKA;;;AAGA;;;AAKA;;;;;AAKA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;;;;;;;;;;AAmBA;AACA;;;;;AAOA;;;;;;;;;AASA;;;;;;AAQA;;AAIA;;;AAKA;;;;;;;;;;AAiBA;;;;;;AAMA;AACA;;AAIA;;;AAWA;AACA;AACA;;;;AAIA;;AAsOA;;;AC3dA;;;;AAWA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAQA;;;;AAMA;;ACnCA;;;;ACaA;;;;;AAKA;;;;;;;;;;AAYA;;;;;AAOA;;;;AAMA;;AAIA;;;;;;AAQA;;;;;AAOA;;;;;;;;;AAWA;;AAIA;;AAIA;;;;ACxFA;;;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;;;;AAKA;;;AAKA;;;;;;AAMA;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;;;ACpCA;;;;;;;;;;;AAYA;;;;;;AAMA;AAGA;;;;AAIA;AACA;;;;;;AAQA;;;AAKA;;;;;;;;;;AAYA;;;;;;;;;AA0BA;;;ACxEA;;;;AAMA;;AAIA;;;;AAMA;;;AAKA;;;;AAMA;;AAIA;;;;;AAOA;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;AAKA;;AAIA;;;;AAuLA;;;;ACxNA;;;;;;;;;;ACtDA;;AAIA;;;;;;AAMA;AACA;;;;AA+CA;;;;;AC9DA;;;;;;;;AAUA;;;;;;;AASA;;;AA2EA;;;;;AC7FA;;;;;;;;AAUA;;;AAKA;;;AAwHA;;;;;;;;;;;;;;;;;;;AC9HA;;;;;;;;;;;;AAaA;;;;;;AAMA;AAGA;;;;AAIA;AACA;;;;;;AAQA;;;;AAMA;;;;;;;;;;AAYA;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAaA;;;;;;;;;AAWA;;;;;;AClGA;;;;;;AAMA;AAGA;;;;;AAKA;AAGA;;;;AAMA;;;;;;;;AAUA;;;;;;;AASA;;;;;;;;;;;;AAcA;;;;;;;AAOA;;;;;AAKA;;;AAOA;;ACrFA;;;;AAMA;;;;AAyBA;;;;ACjCA;;;;ACHA;;AAQA;;;;;AAKA;AAGA;;AASA;;;;;AClBA;;;;;AA6DA;;;;AC5DA;;;;;;;;;;AAYA;;;;;;;AASA;;;AAKA;;;;;;;;AAUA;;;;;;;;;;AAYA;;;AAUA;;AC9DA;;AAIA;;;;;;;;;;;;;AAeA;;;;;;AAaA;;;;;;;ACrBA;;;AAKA;;;AAKA;;;AAKA;;;;;AAKA;;;AAKA;AACA;;;AAKA;;;;;ACnCA;;AAIA;;;AAGA;AACA;;;AAKA;;AAEA;AACA;AAGA;;ACmBA;;;;AClCA;;;;;AAOA;;;;AAMA;;;;;;AAMA;;;;AAOA;;;;;;;;;;;;AC7BA;;;;AAIA;;;;;AAOA;;;;;;;;;;;;;;AAcA;;;;;;;;AAUA;;;;;AAKA;;;;;AAKA;;;AAGA;;;;;AAKA;;;;AAMA;;;AAGA;;;AAyBA;;ACzFA;;;;;;AAQA;;AAaA;;;;AC3BA;;;;AAMA;;;AAKA;;;;;;AAMA;AAGA;;;;;;AAQA;;;;;;;;;;;AAaA;;;;AAMA;;AA4IA;;;;;;;;ACnLA;;;;AAMA;;;;;;;;;;;;;AAeA;;;;;AAOA;;;AAKA;;;;;;;;;AAgBA;;;;;;ACnDA;;;;;;;;AAUA;;;;AAMA;;AAIA;;;;;;;;;;;;;AAeA;;;;;AAOA;;AAcA;;;;;;;;ACrDA;;AAIA;;AAIA;;;AAKA;;;;;;;;AAUA;;;;;;;;ACvBA;;;;;;AAQA;;;;;;;;;;AAYA;;;;AAMA;;;;AAMA;;;;;;;;;;;;;AAeA;;;;;;;AAeA;;;;;;;;AChEA;;;;;AAOA;;AAIA;;;;;;;;;;;;;;AAgBA;;;AAUA;;;;AAIA;AAIA;;AAiBA;;;;;AClEA;;;;;;;;AAUA;;;;;;;;;;AAYA;;;;AAMA;;;;AAMA;;;;;;;;;;;;;AAeA;;AAeA;;AC9DA;;;;AAMA;;AAUA;;;;;;;;ACZA;;;;;AAOA;;;AAKA;;;;;;;;;;;;;AAeA;;;;;;;AAgDA;;;;;;AC9EA;AACA;AACA;;;;AAIA;;;AAKA;;;AAGA;;;;AAIA;;;;AAMA;;;;;AAKA;;;;AAMA;;;;;;;;AAQA;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;;AAOA;;;;;;AAMA;AACA;AACA;;;;AAIA;;;;AAMA;;;;AAYA;;;;;AC5FA;AACA;AACA;;;AAKA;;;AAGA;;;;AAMA;;;AAGA;;;AAGA;;;AAKA;;;;;AAKA;AACA;AACA;;;AAKA;;;;;;AAMA;;;AAUA;;;;;AAKA;AACA;AACA;AACA;;;AAGA;;;;AAMA;;;AAGA;;;;AAIA;;;AAKA;;;AAGA;;;AAGA;;;AAGA;;;;AAIA;;;;;;AAQA;;;;;AAKA;AACA;AACA;;;AAGA;;;AAGA;;;AAKA;;;;;AAKA;;;;;AAKA;;;AAKA;;;AAGA;;;;;;;;AAkBA;;;;;AC/JA;;;;;AAKA;;;AAGA;;;AAKA;;;;;;AAQA;;;;;;AAMA;;;AAKA;;;;AAIA;;AAIA;;;;;;AAMA;;;AAKA;;;;;AAOA;;;AAKA;;ACrEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;AAIA;;;;;;;;;;;AAWA;;;;AAIA;;;;;;;;;;;;;;;AAiBA;;;;;;AAMA;AACA;AACA;;;AAKA;;AAIA;;;;;AAKA;;;AAKA;;;;;;;;;AASA;;;AAKA;;;;;;AAQA;;;;;;AAQA;;;;;;AAeA;;;;;;;AC7HA;AACA;AACA;;;;AAIA;;;AAKA;;;;;AAOA;;;AAGA;;;;AAIA;;;AAKA;;;;;AAKA;;;AAGA;;;AAKA;;;;;;AAMA;;;;;AAOA;;;;;;;;AAQA;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;;AAOA;;;;;AAKA;AACA;AACA;;;AAGA;;;;AAIA;;;;;AAOA;;;;AAIA;;;;;AAOA;;;;;;AAMA;;;AAUA;;;;;;AC5IA;AACA;AACA;;;;;;AAMA;;;AAKA;;;;;AAKA;;;;;AAOA;;;;;;;AAOA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;;;AAQA;;;;;;AAMA;;;;;AAKA;;;;AAWA;;;;;;ACtEA;;;AAGA;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;AAWA;;AAEA;AACA;AACA;;;AAKA;;;;;AAOA;;;;;AAKA;;;AAKA;;;AAGA;;;AAKA;;;;;;AAcA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;AASA;;;;;AAOA;;;AAGA;;AAyCA;;;;;ACzKA;AACA;AACA;;;;AAIA;;;;AAIA;;;AAKA;;;;;;;AAOA;;;;;;;;AAUA;;;;;;AAMA;;;;;AAOA;;;;;AAKA;AACA;;;;AAIA;;;AAKA;;;;;;AAMA;;;AAGA;;;;;;;AAOA;;;AAKA;;;;AAIA;;;AAKA;;;AAGA;;;;AAMA;;;;AAIA;;;;;AAKA;;;;;;;;AAUA;;;;;;;;AAQA;;;;;AAOA;;AAEA;;;;;AAOA;;;;AAIA;AACA;AACA;;;;AAIA;;;AAKA;;;AAGA;AACA;AACA;;;;;AAKA;;;AAKA;;;;;;;;AAQA;;;;;AAmBA;;;;;;AC/LA;;AAEA;;;AAKA;AACA;;;;AAMA;AC5BA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;;AAKA;;;AAKA;;;;;;AAMA;;;AAKA;;;;;;;AAcA;AACA;AACA;AAGA;;;;;;AAMA;;AAIA;ACpEA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;;AAKA;;;AAKA;;;;;;;AAOA;;;AAKA;;;;AAMA;;;;;;;;;;ACpCA;;;;AAMA;;;;AAYA;;;;;;;;;;;;AClBA;;;;;;AAaA;;;;;;;;;;;;;ACbA;;;;;;;;AAeA;;;;;;;ACrBA;;;AAKA;;;;;;;;;;ACCA;;;;AAMA;;;;AAYA;;;;;;;;;;AClBA;;;;AAMA;;;;AAYA;;;;;;;ACvBA;;;AAKA;;;;;;;;AA4EA;;;;;;AClFA;;AAiHA;;;;;AChHA;;;;;;;;;;;AAWA;AAYA;ACxBA;AACA;;;;;;;;;;;;;;AAcA;;;;;;AAoBA;AC/CA;AACA;;;AAGA;AACA;AAYA;;;;;;ACmFA;;AAEA;;;AAKA;;AAOA;AASA;;;;;ACnHA;;;;;;;;;;;;;;;;AAgBA;;;;AAMA;;;;;;;;;;ACdA;AAGA;;;;AAIA;;;;;AAOA;;;;;AAOA;;;;;;AAMA;;;AASA;;;;;;;;;;AAUA;AACA;AACA;;;;;AAKA;;AAUA;;;AC7EA;;;;;;;AASA;;;;;;;;;AAsBA;AChCA;;;AAGA;;;AAGA;;AAQA;AACA;;;;;;;;AAWA;;AASA;ACpCA;;;AAOA;;;;;;ACIA;;;;;;;;;;;;;;AAgBA;;;;;;;AAuBA;;;;;;AClCA;;;;;;;;AAUA;;;ACpBA;;;;;;;AAOA;AASA;;AAEA;AACA;;AAEA;;;;AAIA;;;AAGA;;;AAGA;AACA;AAGA;;AAEA;AACA;;AAEA;;;;AAIA;;;AAGA;;;AAGA;;AAEA;AAGA;;;AASA;;;;;AAKA;;;;AAMA;;;;;;;AAmGA;;;;;;;;;;;;AC3JA;;;;AAMA;;;;;;;;;AAWA;;;;AAMA;;;;;;AAMA;AASA;;;AAGA;AACA;AACA;AAQA;AACA;;;;;AAKA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;AAIA;;;;;AAKA;;AAIA;;;;;;;AC3GA;;;AAUA;AClBA;;;AAOA;ACAA;AACA;;AAEA;;;;;AAOA;;;;;;;;;AAeA;;;;AAIA;;;;;AAKA;AAGA;;;AAKA;;;;AAIA;;;;;;;;;;AAYA;;;;AAUA;;;AAGA;;;;;;;AASA;;;;;;;AA0BA;AC7GA;AAgBA;ACjBA;AACA;;;AAGA;AACA;AAMA;ACPA;AACA;AACA;AACA;;;;AAMA;;;;;;;;;AAWA;;;;;;;;;AAWA;;;AAKA;;;AASA;;;AAGA;;;AAqBA;;;;;;;;;AC5DA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;AAwBA;;;;;;;AC9CA;;;;;AAFA;AAAA;AAAA;;;;;;;;;;;;AACA;;;AAuBA;;;;;AAxBA;AAAA;;AACA;AAgCA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;AAQA;;;;;;;;AAUA;;AAIA;;;AC/FA;;;;AAIA;;;AAKA;;;;AAIA;;;AAKA;ACzBA;;;;AAQA;ACGA;AAeA;;;;;;ACtBA;;AAuBA;;;ACNA;;;;;AAKA;;;AAKA;AACA;;;AAOA;AACA;;;AAKA;AACA;AACA;AACA;;;AASA;;;;;AAKA;AACA;;;;;;;AASA;;;;AAMA;;;;AAiBA;;AC7EA;;;;;;;;AAUA;;;;AAIA;;AA0BA;;;AC7CA;;;;ACCA;AACA;AACA;AACA;;;AAKA;;;AAGA;;AAEA;;;AAWA;;;;ACRA;AACA;AACA;AACA;;;AAKA;;;AAKA;;;;;;;AAOA;AAGA;;AAQA;;;;;;;AAOA;AACA;;;;AAmJA;;;;;;;;;AC9MA;;;;AAIA;AAGA;;;;;AAKA;AACA;;;;AAMA;;;;AAMA;;;;;;;ACvBA;;;;;;AAQA;;;AAKA;;;;AAMA;;;;;;AAMA;;AAIA;;;;;;;ACLA;;;;;;;ACrBA;;;;;;;;;AAWA;;;;;AAKA;;;AAKA;AACA;AACA;;AAIA;AACA;AAGA;;;AAKA;;AAIA;ACtCA;;AAIA;;;;;;AAOA;;;;;AAKA;AACA;;;;;;;;;;;;;;;AAwBA;;;;AAMA;;;;;;AAMA;;AA0FA;;;;ACpJA;;;;;;AAQA;;AAIA;;AAUA;;;;ACbA;;;;;AAOA;;;;AAUA;AACA;AAGA;;AAIA;;;;AAMA;;AAIA;;AAIA;;;;;;AAQA;;AAIA;;AAIA;;;AAKA;;;AAUA;;;ACnFA;;;;;;AAQA;;;;AAMA;;;;AAMA;;;;AAMA;;;;AAMA;;AAIA;;;;AAMA;;;;;AAgBA;;;AC7DA;;;AA2BA;;;;;;;;ACiDA;;;ACpEA;;;;AAMA;;;;;;AAMA;AAGA;;;;;;;;AAaA;AAGA;;AAEA;;;;;;;;AAeA;;;;;AAOA;;;;AAWA;;;AAGA;;;;;;AAQA;;;AASA;;;;;ACjGA;ACyDA;AACA;AACA;;AASA;AACA;AACA;;;;AAIA;AACA;AAcA;AAKA;AAGA;;;AAKA;;AAEA;AASA;AACA;AASA;;;;ACrIA;;;;;;ACkBA;;;;;;;AASA;;;;;AAOA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;ACWA;;;;;;;;;;;;AAYA;;;;AAMA;;;;AAMA;;;;AAIA;;;AAKA;ACjEA;AACA;AACA;;AAUA;;;;;;;AAQA;AACA;AACA;AAMA;;AAEA;AACA;;AAIA;;;AAKA;;;;AAMA;;;AAKA;;;;;AAOA;;;;;AAOA;;;;AAMA;;;;AAMA;;;AAKA;;;;;;;;AAUA;;;;AASA;;;AAGA;AAMA;;;AAGA;;;;AAIA;AACA;;AAIA;;;AAKA;;;;AAMA;;;;;AAOA;;;;;;AAQA;;;;;;;AAYA;;;;;;AAMA;AAWA","sourceRoot":""}